# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AutoReceptionistsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_auto_receptionist(self, **kwargs):  # noqa: E501
        """Add an auto receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone  **Prerequisites:** * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneAutoReceptionistsBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_auto_receptionist_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_auto_receptionist_with_http_info(self, **kwargs):  # noqa: E501
        """Add an auto receptionist  # noqa: E501

        Auto receptionists answer calls with a personalized recording and routes calls to a phone user, call queue, common area, voicemail or an IVR system. Use this API to add an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) to a Zoom Phone  **Prerequisites:** * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_auto_receptionist_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneAutoReceptionistsBody body:
        :return: InlineResponse201
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse201',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_policy(self, auto_receptionist_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting  # noqa: E501

        Use this API to add a policy sub-setting according to the policy type for a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). For example, you can set up shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_policy(auto_receptionist_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to add. Allowed values: `voice_mail` (required)
        :param PoliciesPolicyTypeBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_policy_with_http_info(auto_receptionist_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.add_policy_with_http_info(auto_receptionist_id, policy_type, **kwargs)  # noqa: E501
            return data

    def add_policy_with_http_info(self, auto_receptionist_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting  # noqa: E501

        Use this API to add a policy sub-setting according to the policy type for a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). For example, you can set up shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_policy_with_http_info(auto_receptionist_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to add. Allowed values: `voice_mail` (required)
        :param PoliciesPolicyTypeBody body:
        :return: InlineResponse2011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `add_policy`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `add_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/policies/{policyType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign phone numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistIdPhoneNumbersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Assign phone numbers  # noqa: E501

        Assign available phone numbers to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). The available numbers can be retrieved using the List Phone Numbers API with `type` query parameter set to \"unassigned\".  **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistIdPhoneNumbersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `assign_phone_numbers_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Delete a non-primary auto receptionist  # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area (phone), or to a voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options. Use this API to [delete a non-primary auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3).  **Prerequisites:** * Pro or higher account with Zoom Phone license.  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def delete_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Delete a non-primary auto receptionist  # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area (phone), or to a voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options. Use this API to [delete a non-primary auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3).  **Prerequisites:** * Pro or higher account with Zoom Phone license.  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `delete_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_policy(self, auto_receptionist_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete a policy setting  # noqa: E501

        Use this API to remove the policy sub-setting of a [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). For example, you can remove shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy(auto_receptionist_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to remove. Allowed values: `voice_mail` (required)
        :param list[str] shared_ids: Unique identifier of the voicemail that the user can access. Required only for `voice_mail` policy type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_policy_with_http_info(auto_receptionist_id, policy_type, shared_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_policy_with_http_info(auto_receptionist_id, policy_type, shared_ids, **kwargs)  # noqa: E501
            return data

    def delete_policy_with_http_info(self, auto_receptionist_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete a policy setting  # noqa: E501

        Use this API to remove the policy sub-setting of a [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-). For example, you can remove shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_policy_with_http_info(auto_receptionist_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to remove. Allowed values: `voice_mail` (required)
        :param list[str] shared_ids: Unique identifier of the voicemail that the user can access. Required only for `voice_mail` policy type. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'policy_type', 'shared_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `delete_policy`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `delete_policy`")  # noqa: E501
        # verify the required parameter 'shared_ids' is set
        if ('shared_ids' not in params or
                params['shared_ids'] is None):
            raise ValueError("Missing the required parameter `shared_ids` when calling `delete_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []
        if 'shared_ids' in params:
            query_params.append(('shared_ids', params['shared_ids']))  # noqa: E501
            collection_formats['shared_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/policies/{policyType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_receptionist_detail(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Get an auto receptionist  # noqa: E501

        Use this API to get information on a specific auto receptionist.  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_receptionist_detail(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_auto_receptionist_detail_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_receptionist_detail_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def get_auto_receptionist_detail_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Get an auto receptionist  # noqa: E501

        Use this API to get information on a specific auto receptionist.  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_receptionist_detail_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_receptionist_detail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `get_auto_receptionist_detail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_auto_receptionists_policy(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Get an auto receptionist policy  # noqa: E501

        Use this API to get the policy setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_receptionists_policy(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_auto_receptionists_policy_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_auto_receptionists_policy_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def get_auto_receptionists_policy_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Get an auto receptionist policy  # noqa: E501

        Use this API to get the policy setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_auto_receptionists_policy_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_auto_receptionists_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `get_auto_receptionists_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/policies', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_auto_receptionists(self, **kwargs):  # noqa: E501
        """List auto receptionists  # noqa: E501

        Use this API to list auto receptionists.  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_auto_receptionists(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The total number of records returned from a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_auto_receptionists_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_auto_receptionists_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_auto_receptionists_with_http_info(self, **kwargs):  # noqa: E501
        """List auto receptionists  # noqa: E501

        Use this API to list auto receptionists.  **Prerequisites:** * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_auto_receptionists_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The total number of records returned from a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_auto_receptionists" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_a_phone_num_auto_receptionist(self, auto_receptionist_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassign a specific phone number that was previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_auto_receptionist(auto_receptionist_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str phone_number_id: Unique Identifier of the phone number or provide the actual phone number in e164 format (example: +19995550123). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def unassign_a_phone_num_auto_receptionist_with_http_info(self, auto_receptionist_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassign a specific phone number that was previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_auto_receptionist_with_http_info(auto_receptionist_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str phone_number_id: Unique Identifier of the phone number or provide the actual phone number in e164 format (example: +19995550123). (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_a_phone_num_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `unassign_a_phone_num_auto_receptionist`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `unassign_a_phone_num_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_all_phone_nums_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Unassign all phone numbers that were previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_phone_nums_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def unassign_all_phone_nums_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Unassign all phone numbers that were previously assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions<br> **Scopes:** `phone:write:admin`<br>    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_phone_nums_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_all_phone_nums_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `unassign_all_phone_nums_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/phone_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auto_receptionist(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update an auto receptionist  # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options. Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as the display name and extension number assigned to the main auto receptionist.  **Prerequisites:** * Pro or higher account with Zoom Phone license.  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistsAutoReceptionistIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auto_receptionist_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def update_auto_receptionist_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update an auto receptionist  # noqa: E501

        An auto receptionist answers calls with a personalized recording and routes calls to a phone user, call queue, common area, or voicemail. An auto receptionist can also be set up so that it routes calls to an interactive voice response (IVR) system to allow callers to select the routing options. Use this API to [change information](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-#h_1d5ffc56-6ba3-4ce5-9d86-4a1a1ee743f3) such as the display name and extension number assigned to the main auto receptionist.  **Prerequisites:** * Pro or higher account with Zoom Phone license.  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistsAutoReceptionistIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auto_receptionist" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `update_auto_receptionist`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_auto_receptionist_policy(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update an auto receptionist policy  # noqa: E501

        Use this API to update the policy setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist_policy(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistIdPoliciesBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_auto_receptionist_policy_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_auto_receptionist_policy_with_http_info(auto_receptionist_id, **kwargs)  # noqa: E501
            return data

    def update_auto_receptionist_policy_with_http_info(self, auto_receptionist_id, **kwargs):  # noqa: E501
        """Update an auto receptionist policy  # noqa: E501

        Use this API to update the policy setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-).   **Prerequisites:** * Pro or higher account plan with Zoom Phone License * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_auto_receptionist_policy_with_http_info(auto_receptionist_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param AutoReceptionistIdPoliciesBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_auto_receptionist_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `update_auto_receptionist_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/policies', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_policy(self, auto_receptionist_id, policy_type, **kwargs):  # noqa: E501
        """Update a policy setting  # noqa: E501

        Use this API to update the policy sub-setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) according to the policy type. For example, you can update shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy(auto_receptionist_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to modify. Allowed values: `voice_mail` (required)
        :param PoliciesPolicyTypeBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_policy_with_http_info(auto_receptionist_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_policy_with_http_info(auto_receptionist_id, policy_type, **kwargs)  # noqa: E501
            return data

    def update_policy_with_http_info(self, auto_receptionist_id, policy_type, **kwargs):  # noqa: E501
        """Update a policy setting  # noqa: E501

        Use this API to update the policy sub-setting of a specific [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Interactive-Voice-Response-IVR-) according to the policy type. For example, you can update shared access members.  **Prerequisites:** * Pro or higher account plan with Zoom Phone license * Account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_policy_with_http_info(auto_receptionist_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str auto_receptionist_id: The unique identifier of the auto receptionist. It can be retrieved from the [List auto receptionists API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listAutoReceptionists). (required)
        :param str policy_type: Corresponds to the policy item you wish to modify. Allowed values: `voice_mail` (required)
        :param PoliciesPolicyTypeBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['auto_receptionist_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'auto_receptionist_id' is set
        if ('auto_receptionist_id' not in params or
                params['auto_receptionist_id'] is None):
            raise ValueError("Missing the required parameter `auto_receptionist_id` when calling `update_policy`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `update_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'auto_receptionist_id' in params:
            path_params['autoReceptionistId'] = params['auto_receptionist_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/auto_receptionists/{autoReceptionistId}/policies/{policyType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
