# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BlockedListApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_anumber_to_blocked_list(self, **kwargs):  # noqa: E501
        """Create a blocked list  # noqa: E501

        A Zoom account owner or a user with the admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to create a block list and add a number to the list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_anumber_to_blocked_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneBlockedListBody body:
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_anumber_to_blocked_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_anumber_to_blocked_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_anumber_to_blocked_list_with_http_info(self, **kwargs):  # noqa: E501
        """Create a blocked list  # noqa: E501

        A Zoom account owner or a user with the admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to create a block list and add a number to the list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_anumber_to_blocked_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneBlockedListBody body:
        :return: InlineResponse2013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_anumber_to_blocked_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/blocked_list', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_blocked_list(self, blocked_list_id, **kwargs):  # noqa: E501
        """Delete a blocked list  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers).  Use this API to delete a blocked list and therefore removing the associated number from the blocked list. The number will be unblocked after the deletion.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_blocked_list(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. This can be retrieved from the List Blocked List API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
            return data

    def delete_a_blocked_list_with_http_info(self, blocked_list_id, **kwargs):  # noqa: E501
        """Delete a blocked list  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers).  Use this API to delete a blocked list and therefore removing the associated number from the blocked list. The number will be unblocked after the deletion.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_blocked_list_with_http_info(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. This can be retrieved from the List Blocked List API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blocked_list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_blocked_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blocked_list_id' is set
        if ('blocked_list_id' not in params or
                params['blocked_list_id'] is None):
            raise ValueError("Missing the required parameter `blocked_list_id` when calling `delete_a_blocked_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blocked_list_id' in params:
            path_params['blockedListId'] = params['blocked_list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/blocked_list/{blockedListId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_blocked_list(self, blocked_list_id, **kwargs):  # noqa: E501
        """Get blocked list details  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to get information about a specific blocked list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_blocked_list(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
            return data

    def get_a_blocked_list_with_http_info(self, blocked_list_id, **kwargs):  # noqa: E501
        """Get blocked list details  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to get information about a specific blocked list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_blocked_list_with_http_info(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blocked_list_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_blocked_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blocked_list_id' is set
        if ('blocked_list_id' not in params or
                params['blocked_list_id'] is None):
            raise ValueError("Missing the required parameter `blocked_list_id` when calling `get_a_blocked_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blocked_list_id' in params:
            path_params['blockedListId'] = params['blocked_list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/blocked_list/{blockedListId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_blocked_list(self, **kwargs):  # noqa: E501
        """List blocked lists  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available.  Use this API to list all the blocked lists in an acccount.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blocked_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The total number of records returned from a single API call.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_blocked_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_blocked_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_blocked_list_with_http_info(self, **kwargs):  # noqa: E501
        """List blocked lists  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available.  Use this API to list all the blocked lists in an acccount.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_blocked_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The total number of records returned from a single API call.
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_blocked_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/blocked_list', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_blocked_list(self, blocked_list_id, **kwargs):  # noqa: E501
        """Update a blocked list  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to update the information on the blocked list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_blocked_list(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. (required)
        :param BlockedListBlockedListIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_blocked_list_with_http_info(blocked_list_id, **kwargs)  # noqa: E501
            return data

    def update_blocked_list_with_http_info(self, blocked_list_id, **kwargs):  # noqa: E501
        """Update a blocked list  # noqa: E501

        A Zoom account owner or a user with admin privilege can block phone numbers for phone users in an account. Blocked numbers can be inbound (numbers will be blocked from calling in) and outbound (phone users in your account won't be able to dial those numbers). Blocked callers will hear a generic message stating that the person they are calling is not available. Use this API to update the information on the blocked list.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_blocked_list_with_http_info(blocked_list_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str blocked_list_id: Unique identifier of the blocked list. (required)
        :param BlockedListBlockedListIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['blocked_list_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_blocked_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'blocked_list_id' is set
        if ('blocked_list_id' not in params or
                params['blocked_list_id'] is None):
            raise ValueError("Missing the required parameter `blocked_list_id` when calling `update_blocked_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'blocked_list_id' in params:
            path_params['blockedListId'] = params['blocked_list_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/blocked_list/{blockedListId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
