# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CallQueuesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_cq_policy_sub_setting(self, call_queue_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting to a call queue  # noqa: E501

        Use this API to add the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to set up shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cq_policy_sub_setting(call_queue_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: The policy sub-setting item that you wish to add. Allowed values: `voice_mail`. (required)
        :param PoliciesPolicyTypeBody2 body:
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.add_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, **kwargs)  # noqa: E501
            return data

    def add_cq_policy_sub_setting_with_http_info(self, call_queue_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting to a call queue  # noqa: E501

        Use this API to add the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to set up shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: The policy sub-setting item that you wish to add. Allowed values: `voice_mail`. (required)
        :param PoliciesPolicyTypeBody2 body:
        :return: InlineResponse2016
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_cq_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `add_cq_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `add_cq_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/policies/{policyType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2016',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_members_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Add members to a call queue  # noqa: E501

        Add phone users and/or [common areas](https://support.zoom.us/hc/articles/4481136653709) as members to a specific call queue.  **Prerequisites:** * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdMembersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Add members to a call queue  # noqa: E501

        Add phone users and/or [common areas](https://support.zoom.us/hc/articles/4481136653709) as members to a specific call queue.  **Prerequisites:** * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdMembersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `add_members_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_to_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign numbers to a call queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).   **Prerequisites:**  * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdPhoneNumbersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_to_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_to_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Assign numbers to a call queue  # noqa: E501

        After [buying phone number(s)](https://support.zoom.us/hc/en-us/articles/360020808292#h_007ec8c2-0914-4265-8351-96ab23efa3ad), you can assign it, allowing callers to directly dial a number to reach a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).   **Prerequisites:**  * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_to_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdPhoneNumbersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_to_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `assign_phone_to_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def change_call_queue_manager(self, call_queue_id, **kwargs):  # noqa: E501
        """Change call queue manager  # noqa: E501

        A call queue manager has the privileges to manage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.   Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c).   **Prerequisites:** * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdManagerBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.change_call_queue_manager_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def change_call_queue_manager_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Change call queue manager  # noqa: E501

        A call queue manager has the privileges to manage the call queue's voicemail inbox and recordings, change all call queue settings and call queue policy settings.   Use this API to to set another phone user as the [call queue manager](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_db06854b-e6a3-4afe-ba15-baf58f31f90c).   **Prerequisites:** * Pro or higher account plan. * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_call_queue_manager_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueueIdManagerBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_call_queue_manager" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `change_call_queue_manager`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/manager', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_call_queue(self, **kwargs):  # noqa: E501
        """Create a call queue  # noqa: E501

        [Creates a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413). Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service, and so on.  You can add phone users or common areas to call queues.  **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneCallQueuesBody body:
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_call_queue_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_call_queue_with_http_info(self, **kwargs):  # noqa: E501
        """Create a call queue  # noqa: E501

        [Creates a call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues#h_e81faeeb-9184-429a-aaea-df49ff5ff413). Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service, and so on.  You can add phone users or common areas to call queues.  **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_call_queue_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneCallQueuesBody body:
        :return: InlineResponse2015
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_call_queue" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2015',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Delete a call queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to delete a Call Queue.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the call queue. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def delete_a_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Delete a call queue  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to delete a Call Queue.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the call queue. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `delete_a_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Get call queue details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to get information on a specific Call Queue.    **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from [List Call Queues API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-call-queues/listcallqueues). (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def get_a_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Get call queue details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to get information on a specific Call Queue.    **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from [List Call Queues API](https://marketplace.zoom.us/docs/api-reference/zoom-api/phone-call-queues/listcallqueues). (required)
        :return: InlineResponse20011
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `get_a_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20011',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_call_queue_recordings(self, call_queue_id, **kwargs):  # noqa: E501
        """Get call queue recordings  # noqa: E501

        Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues.   **Scope:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_queue_recordings(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data. The month defined should fall within the last six months. If unspecified, returns data within the 24 hours.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_call_queue_recordings_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_call_queue_recordings_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def get_call_queue_recordings_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Get call queue recordings  # noqa: E501

        Use this API to view [call recordings](https://support.zoom.us/hc/en-us/articles/360038521091#h_cbc9f2a3-e06c-4daa-83d4-ddbceef9c77b) from the call queue.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * [Automatic call recordings](https://support.zoom.us/hc/en-us/articles/360033511872#h_fcb297bb-14e8-4094-91ca-dc61e1a18734) must be enabled in the Policy Settings for call queues.   **Scope:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`      # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_queue_recordings_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data. The month defined should fall within the last six months. If unspecified, returns data within the 24 hours.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :return: InlineResponse20013
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'page_size', 'next_page_token', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_call_queue_recordings" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `get_call_queue_recordings`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/recordings', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20013',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_call_queue_members(self, call_queue_id, **kwargs):  # noqa: E501
        """List call queue members  # noqa: E501

        Lists the call queue members.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queue_members(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID that is retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_call_queue_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_call_queue_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def list_call_queue_members_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """List call queue members  # noqa: E501

        Lists the call queue members.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queue_members_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID that is retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :return: InlineResponse20012
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_call_queue_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `list_call_queue_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20012',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_call_queues(self, **kwargs):  # noqa: E501
        """List call queues  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to list Call queues.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queues(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned from a single API call.
        :param str site_id: Unique identifier of the site. Get it from the [List Phone Sites](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listPhoneSites) API.
        :param str cost_center: The call queue's cost center.
        :param str department: The call queue's department.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_call_queues_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_call_queues_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_call_queues_with_http_info(self, **kwargs):  # noqa: E501
        """List call queues  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to list Call queues.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:read:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_queues_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned from a single API call.
        :param str site_id: Unique identifier of the site. Get it from the [List Phone Sites](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listPhoneSites) API.
        :param str cost_center: The call queue's cost center.
        :param str department: The call queue's department.
        :return: InlineResponse20010
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page_token', 'page_size', 'site_id', 'cost_center', 'department']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_call_queues" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'cost_center' in params:
            query_params.append(('cost_center', params['cost_center']))  # noqa: E501
        if 'department' in params:
            query_params.append(('department', params['department']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20010',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_cq_policy_sub_setting(self, call_queue_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete a CQ policy setting  # noqa: E501

        Use this API to remove the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to remove shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_cq_policy_sub_setting(call_queue_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: Corresponds to tbe policy sub-setting item you wish to remove. Allowed values: `voice_mail` (required)
        :param list[str] shared_ids: Comma separated list of shared IDs to remove. The number is limited to the minimum value of 10 or the number of allowed access members account setting. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, shared_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, shared_ids, **kwargs)  # noqa: E501
            return data

    def remove_cq_policy_sub_setting_with_http_info(self, call_queue_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete a CQ policy setting  # noqa: E501

        Use this API to remove the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to remove shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: Corresponds to tbe policy sub-setting item you wish to remove. Allowed values: `voice_mail` (required)
        :param list[str] shared_ids: Comma separated list of shared IDs to remove. The number is limited to the minimum value of 10 or the number of allowed access members account setting. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'policy_type', 'shared_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_cq_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `remove_cq_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `remove_cq_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'shared_ids' is set
        if ('shared_ids' not in params or
                params['shared_ids'] is None):
            raise ValueError("Missing the required parameter `shared_ids` when calling `remove_cq_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []
        if 'shared_ids' in params:
            query_params.append(('shared_ids', params['shared_ids']))  # noqa: E501
            collection_formats['shared_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/policies/{policyType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_assign_phone_num_call_queue(self, call_queue_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).   **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_assign_phone_num_call_queue(call_queue_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from the List Call Queues API. (required)
        :param str phone_number_id: Unique identifier of the Phone Number.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def un_assign_phone_num_call_queue_with_http_info(self, call_queue_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        After assigning a phone number, you can unbind it if you don't want it to be assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues). Use this API to unbind a phone number from a Call Queue. After successful unbinding, the number will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).   **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.un_assign_phone_num_call_queue_with_http_info(call_queue_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from the List Call Queues API. (required)
        :param str phone_number_id: Unique identifier of the Phone Number.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_assign_phone_num_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `un_assign_phone_num_call_queue`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `un_assign_phone_num_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_a_phone_num_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).  If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead.   **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from List Call Queues API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def unassign_a_phone_num_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Use this API to unbind all phone numbers that are assigned to a [Call Queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues) After successful unbinding, the numbers will appear in the [Unassigned tab](https://zoom.us/signin#/numbers/unassigned).  If you only need to unassign a specific phone number, use the Unassign a Phone Number API instead.   **Prerequisites:** * Pro or higher account palan * Account owner or admin permissions * Zoom Phone license   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_a_phone_num_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. This can be retrieved from List Call Queues API. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_a_phone_num_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_a_phone_num_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/phone_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_all_members(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all members  # noqa: E501

        Removes all members from a call queue who were previously assigned to that call queue. The members could be phone users or [common areas](https://support.zoom.us/hc/articles/4481136653709).  **Prerequisites:**  * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_members(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_all_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_all_members_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def unassign_all_members_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Unassign all members  # noqa: E501

        Removes all members from a call queue who were previously assigned to that call queue. The members could be phone users or [common areas](https://support.zoom.us/hc/articles/4481136653709).  **Prerequisites:**  * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_all_members_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_all_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_all_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_member_from_call_queue(self, call_queue_id, member_id, **kwargs):  # noqa: E501
        """Unassign a member  # noqa: E501

        Removes a member who was previously added to a call queue. The member could be a phone user or common area. Note that you cannot use this API to unassign a call queue manager.   **Prerequisites:**  * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_member_from_call_queue(call_queue_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue from which the member needs to be unassigned. (required)
        :param str member_id: Unique identifier of the member who needs to be unassigned. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, **kwargs)  # noqa: E501
            return data

    def unassign_member_from_call_queue_with_http_info(self, call_queue_id, member_id, **kwargs):  # noqa: E501
        """Unassign a member  # noqa: E501

        Removes a member who was previously added to a call queue. The member could be a phone user or common area. Note that you cannot use this API to unassign a call queue manager.   **Prerequisites:**  * Pro or higher account plan. * Zoom Phone license  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_member_from_call_queue_with_http_info(call_queue_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue from which the member needs to be unassigned. (required)
        :param str member_id: Unique identifier of the member who needs to be unassigned. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_member_from_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `unassign_member_from_call_queue`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `unassign_member_from_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/members/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_call_queue(self, call_queue_id, **kwargs):  # noqa: E501
        """Update call queue details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to update information of a specific Call Queue.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueuesCallQueueIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_call_queue_with_http_info(call_queue_id, **kwargs)  # noqa: E501
            return data

    def update_call_queue_with_http_info(self, call_queue_id, **kwargs):  # noqa: E501
        """Update call queue details  # noqa: E501

        Call queues allow you to route incoming calls to a group of users. For instance, you can use call queues to route calls to various departments in your organization such as sales, engineering, billing, customer service etc.  Use this API to update information of a specific Call Queue.   **Prerequisites:**  * Pro, Business, or Education account * Account owner or admin permissions * Zoom Phone license  **Scopes:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_call_queue_with_http_info(call_queue_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: Unique identifier of the Call Queue. (required)
        :param CallQueuesCallQueueIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_call_queue" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `update_call_queue`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_cq_policy_sub_setting(self, call_queue_id, policy_type, **kwargs):  # noqa: E501
        """Update a CQ policy setting  # noqa: E501

        Use this API to update the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to update shared access members.  **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cq_policy_sub_setting(call_queue_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: Corresponds to the policy sub-setting item you wish to update. Allowed values: `voice_mail`. (required)
        :param PoliciesPolicyTypeBody3 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, **kwargs)  # noqa: E501
            return data

    def update_cq_policy_sub_setting_with_http_info(self, call_queue_id, policy_type, **kwargs):  # noqa: E501
        """Update a CQ policy setting  # noqa: E501

        Use this API to update the policy sub-setting for a specific [call queue](https://support.zoom.us/hc/en-us/articles/360021524831) according to the `policyType`. For example, you can use this API to update shared access members.  **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_cq_policy_sub_setting_with_http_info(call_queue_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_queue_id: The call queue ID, retrievable from the [List Call Queues](https://marketplace.zoom.us/docs/api-reference/phone/methods#tag/Call-Queues/operation/listCallQueues) API. (required)
        :param str policy_type: Corresponds to the policy sub-setting item you wish to update. Allowed values: `voice_mail`. (required)
        :param PoliciesPolicyTypeBody3 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_queue_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_cq_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_queue_id' is set
        if ('call_queue_id' not in params or
                params['call_queue_id'] is None):
            raise ValueError("Missing the required parameter `call_queue_id` when calling `update_cq_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `update_cq_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_queue_id' in params:
            path_params['callQueueId'] = params['call_queue_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/call_queues/{callQueueId}/policies/{policyType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
