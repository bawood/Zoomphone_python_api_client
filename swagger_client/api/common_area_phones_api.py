# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CommonAreaPhonesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_common_area_phone(self, **kwargs):  # noqa: E501
        """Add a common area phone  # noqa: E501

        Use this API to [add a common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones#h_2d0da347-c35a-4993-9771-e21aaa568deb).  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:**  `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_common_area_phone(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneCommonAreaPhonesBody body:
        :return: InlineResponse2017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_common_area_phone_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_common_area_phone_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_common_area_phone_with_http_info(self, **kwargs):  # noqa: E501
        """Add a common area phone  # noqa: E501

        Use this API to [add a common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones#h_2d0da347-c35a-4993-9771-e21aaa568deb).  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:**  `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_common_area_phone_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneCommonAreaPhonesBody body:
        :return: InlineResponse2017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_calling_plans_to_common_area_phone(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Assign calling plans to common area phone  # noqa: E501

        Assign calling plans to common area phone.    **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_calling_plans_to_common_area_phone(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhoneIdCallingPlansBody body:
        :return: InlineResponse2018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_calling_plans_to_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_calling_plans_to_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
            return data

    def assign_calling_plans_to_common_area_phone_with_http_info(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Assign calling plans to common area phone  # noqa: E501

        Assign calling plans to common area phone.    **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions.  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_calling_plans_to_common_area_phone_with_http_info(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhoneIdCallingPlansBody body:
        :return: InlineResponse2018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_calling_plans_to_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `assign_calling_plans_to_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}/calling_plans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_to_common_area_phone(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Assign phone numbers to common area phone  # noqa: E501

        Assign phone numbers to common area phone.    **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. **Scope:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_to_common_area_phone(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhoneIdPhoneNumbersBody body:
        :return: InlineResponse2019
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_to_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_to_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_to_common_area_phone_with_http_info(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Assign phone numbers to common area phone  # noqa: E501

        Assign phone numbers to common area phone.    **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. **Scope:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_to_common_area_phone_with_http_info(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhoneIdPhoneNumbersBody body:
        :return: InlineResponse2019
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_to_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `assign_phone_numbers_to_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2019',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_common_area_phone(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Delete a common area phone  # noqa: E501

        A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  Use this API to remove the [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) from Zoom Phone System in an account.  **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. * [Supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_common_area_phone(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: Unique identifier of the common area phone. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
            return data

    def delete_common_area_phone_with_http_info(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Delete a common area phone  # noqa: E501

        A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  Use this API to remove the [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) from Zoom Phone System in an account.  **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. * [Supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:** `phone:write:admin`      **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_common_area_phone_with_http_info(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: Unique identifier of the common area phone. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `delete_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_common_area_phone(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Get common area phone details  # noqa: E501

        Use this API to get details on a specific [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) in an account.  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.     **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:**  `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_common_area_phone(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: Unique identifier of the Common Area Phone. Use the unique identifier or the Mac address of the common area phone. The Mac address can be in hyphenated (`00-04-f2-5e-ec-3c`) or not hyphenated (`0004f25eec3c`) format. You can get this value from the [List Common Area Phones API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listCommonAreaPhones). (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
            return data

    def get_a_common_area_phone_with_http_info(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Get common area phone details  # noqa: E501

        Use this API to get details on a specific [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) in an account.  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.     **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  **Scopes:**  `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_common_area_phone_with_http_info(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: Unique identifier of the Common Area Phone. Use the unique identifier or the Mac address of the common area phone. The Mac address can be in hyphenated (`00-04-f2-5e-ec-3c`) or not hyphenated (`0004f25eec3c`) format. You can get this value from the [List Common Area Phones API](https://marketplace.zoom.us/docs/api-reference/phone/methods#operation/listCommonAreaPhones). (required)
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `get_a_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_common_area_phones(self, **kwargs):  # noqa: E501
        """List common area phones  # noqa: E501

        Use this API to list all of an account's [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Scopes:** `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_common_area_phones(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The total number of records returned from a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_common_area_phones_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_common_area_phones_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_common_area_phones_with_http_info(self, **kwargs):  # noqa: E501
        """List common area phones  # noqa: E501

        Use this API to list all of an account's [common area phones](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones).  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Scopes:** `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license. * Account owner or admin permissions. * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_common_area_phones_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The total number of records returned from a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20017
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_common_area_phones" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20017',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_calling_plans_from_common_area_phone(self, common_area_phone_id, type, **kwargs):  # noqa: E501
        """Unassign calling plan from a common area phone  # noqa: E501

        Use this API to unassign a calling plan from a common area phone.  **Prerequisites:**  * A Pro or higher account with a Zoom Phone license  * An account owner or admin permissions  **Scopes:**   `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_calling_plans_from_common_area_phone(common_area_phone_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: The common area phone's unique ID. (required)
        :param str type: The [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) to remove. (required)
        :param str billing_account_id: Billing account ID. If the common area phone is in India, the parameter is required.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_calling_plans_from_common_area_phone_with_http_info(common_area_phone_id, type, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_calling_plans_from_common_area_phone_with_http_info(common_area_phone_id, type, **kwargs)  # noqa: E501
            return data

    def unassign_calling_plans_from_common_area_phone_with_http_info(self, common_area_phone_id, type, **kwargs):  # noqa: E501
        """Unassign calling plan from a common area phone  # noqa: E501

        Use this API to unassign a calling plan from a common area phone.  **Prerequisites:**  * A Pro or higher account with a Zoom Phone license  * An account owner or admin permissions  **Scopes:**   `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_calling_plans_from_common_area_phone_with_http_info(common_area_phone_id, type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: The common area phone's unique ID. (required)
        :param str type: The [calling plan](https://marketplace.zoom.us/docs/api-reference/other-references/plans#zoom-phone-calling-plans) to remove. (required)
        :param str billing_account_id: Billing account ID. If the common area phone is in India, the parameter is required.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id', 'type', 'billing_account_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_calling_plans_from_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `unassign_calling_plans_from_common_area_phone`")  # noqa: E501
        # verify the required parameter 'type' is set
        if ('type' not in params or
                params['type'] is None):
            raise ValueError("Missing the required parameter `type` when calling `unassign_calling_plans_from_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501
        if 'type' in params:
            path_params['type'] = params['type']  # noqa: E501

        query_params = []
        if 'billing_account_id' in params:
            query_params.append(('billing_account_id', params['billing_account_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}/calling_plans/{type}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_phone_numbers_from_common_area_phone(self, common_area_phone_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign phone numbers from a common area phone  # noqa: E501

        Use this API to unassign a phone number from a common Area phone.  **Prerequisites:**  * A Pro or a higher account with a Zoom Phone license * An account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_numbers_from_common_area_phone(common_area_phone_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: The common area phone's unique ID. (required)
        :param str phone_number_id: The phone number or the phone number's unique ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_phone_numbers_from_common_area_phone_with_http_info(common_area_phone_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_phone_numbers_from_common_area_phone_with_http_info(common_area_phone_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def unassign_phone_numbers_from_common_area_phone_with_http_info(self, common_area_phone_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign phone numbers from a common area phone  # noqa: E501

        Use this API to unassign a phone number from a common Area phone.  **Prerequisites:**  * A Pro or a higher account with a Zoom Phone license * An account owner or admin permissions  **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_numbers_from_common_area_phone_with_http_info(common_area_phone_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: The common area phone's unique ID. (required)
        :param str phone_number_id: The phone number or the phone number's unique ID. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_phone_numbers_from_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `unassign_phone_numbers_from_common_area_phone`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `unassign_phone_numbers_from_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_common_area_phone(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Update common area phone  # noqa: E501

        Use this API to update details on a specific [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) in an account.  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Scopes:** `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_common_area_phone(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhonesCommonAreaPhoneIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_common_area_phone_with_http_info(common_area_phone_id, **kwargs)  # noqa: E501
            return data

    def update_common_area_phone_with_http_info(self, common_area_phone_id, **kwargs):  # noqa: E501
        """Update common area phone  # noqa: E501

        Use this API to update details on a specific [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-Common-Area-Phones) in an account.  A common area phone can be provisioned by a Zoom account owner or a Zoom admin so that anyone in an organization can use it. For example, if your office has shared desks that don't belong to a specific employees, you could add a common area phone so that any person can use it.  **Scopes:** `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license * Account owner or admin permissions * A [supported device](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_common_area_phone_with_http_info(common_area_phone_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str common_area_phone_id: (required)
        :param CommonAreaPhonesCommonAreaPhoneIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['common_area_phone_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_common_area_phone" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'common_area_phone_id' is set
        if ('common_area_phone_id' not in params or
                params['common_area_phone_id'] is None):
            raise ValueError("Missing the required parameter `common_area_phone_id` when calling `update_common_area_phone`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'common_area_phone_id' in params:
            path_params['commonAreaPhoneId'] = params['common_area_phone_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/common_area_phones/{commonAreaPhoneId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
