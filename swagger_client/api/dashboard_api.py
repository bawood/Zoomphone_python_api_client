# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DashboardApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_call_log_metrics_details(self, call_id, **kwargs):  # noqa: E501
        """Get call details from call log  # noqa: E501

        Lists call log details of a specific call. The call logs provide a record of all incoming and outgoing calls over Zoom Phone in an account.   **Prerequisites:** * Business, or Education account * Zoom Phone license   **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_log_metrics_details(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: The unique identifier of the phone call. The value of this field can be retrieved from [List Call Logs]() API. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_call_log_metrics_details_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_call_log_metrics_details_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def get_call_log_metrics_details_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Get call details from call log  # noqa: E501

        Lists call log details of a specific call. The call logs provide a record of all incoming and outgoing calls over Zoom Phone in an account.   **Prerequisites:** * Business, or Education account * Zoom Phone license   **Scopes:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_log_metrics_details_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: The unique identifier of the phone call. The value of this field can be retrieved from [List Call Logs]() API. (required)
        :return: InlineResponse20038
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_call_log_metrics_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if ('call_id' not in params or
                params['call_id'] is None):
            raise ValueError("Missing the required parameter `call_id` when calling `get_call_log_metrics_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['call_id'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/metrics/call_logs/{call_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20038',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_call_qo_s(self, call_id, **kwargs):  # noqa: E501
        """Get call QoS  # noqa: E501

        Gets the call quality of service (QoS) data for a call made or received by a Zoom phone user in the account.   **Prerequisites:** * Business, or Education account * Zoom Phone license <br><br> **Scopes:** `phone:read:admin`<br> **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_qo_s(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: The unique identifier of the call. (required)
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_call_qo_s_with_http_info(call_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_call_qo_s_with_http_info(call_id, **kwargs)  # noqa: E501
            return data

    def get_call_qo_s_with_http_info(self, call_id, **kwargs):  # noqa: E501
        """Get call QoS  # noqa: E501

        Gets the call quality of service (QoS) data for a call made or received by a Zoom phone user in the account.   **Prerequisites:** * Business, or Education account * Zoom Phone license <br><br> **Scopes:** `phone:read:admin`<br> **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_call_qo_s_with_http_info(call_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str call_id: The unique identifier of the call. (required)
        :return: InlineResponse20037
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['call_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_call_qo_s" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'call_id' is set
        if ('call_id' not in params or
                params['call_id'] is None):
            raise ValueError("Missing the required parameter `call_id` when calling `get_call_qo_s`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'call_id' in params:
            path_params['callId'] = params['call_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/metrics/call_logs/{callId}/qos', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20037',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_call_logs_metrics(self, **kwargs):  # noqa: E501
        """List call logs  # noqa: E501

         Lists the monthly call logs metrics. You can use query parameters to filter the response by date, site and MOS(Mean Opinion Score) of the call.The call logs that provide a record of all incoming and outgoing calls over Zoom Phone in an account.   **Prerequisites:** * Business, or Education account * Zoom Phone license   **Scopes:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_logs_metrics(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: The start date in **yyyy-mm-dd** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 1 day.
        :param date to: This setting is **required** only when the `from` parameter is specified. The end date is in **yyyy-mm-dd** format, which is the same format as the `from` parameter.
        :param str site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites). Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by call logs of a specific phone site.
        :param str quality_type: This setting filters call logs by voice quality. Zoom uses MOS of 3.5 as a general baseline to categorize calls by call quality. A MOS greater than or equal to 3.5 means good quality, while below 3.5 means poor quality. <br><br>The value of this field can be one of the following:<br> * `good`: Retrieve call logs of the call(s) with good quality of voice.<br> * `bad`: Retrieve call logs of the call(s) with good quality of voice.<br> * `all`: Retrieve all call logs without filtering by voice quality.     
        :param int page_size: The number of records returned within a single call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_call_logs_metrics_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_call_logs_metrics_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_call_logs_metrics_with_http_info(self, **kwargs):  # noqa: E501
        """List call logs  # noqa: E501

         Lists the monthly call logs metrics. You can use query parameters to filter the response by date, site and MOS(Mean Opinion Score) of the call.The call logs that provide a record of all incoming and outgoing calls over Zoom Phone in an account.   **Prerequisites:** * Business, or Education account * Zoom Phone license   **Scopes:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_call_logs_metrics_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param date _from: The start date in **yyyy-mm-dd** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 1 day.
        :param date to: This setting is **required** only when the `from` parameter is specified. The end date is in **yyyy-mm-dd** format, which is the same format as the `from` parameter.
        :param str site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites). Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by call logs of a specific phone site.
        :param str quality_type: This setting filters call logs by voice quality. Zoom uses MOS of 3.5 as a general baseline to categorize calls by call quality. A MOS greater than or equal to 3.5 means good quality, while below 3.5 means poor quality. <br><br>The value of this field can be one of the following:<br> * `good`: Retrieve call logs of the call(s) with good quality of voice.<br> * `bad`: Retrieve call logs of the call(s) with good quality of voice.<br> * `all`: Retrieve all call logs without filtering by voice quality.     
        :param int page_size: The number of records returned within a single call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token will be returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20036
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['_from', 'to', 'site_id', 'quality_type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_call_logs_metrics" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'quality_type' in params:
            query_params.append(('quality_type', params['quality_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/metrics/call_logs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20036',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_tracked_locations(self, **kwargs):  # noqa: E501
        """List tracked locations  # noqa: E501

        Lists the tracked locations.   **Prerequisites:** * Pro or higher account plan with Zoom phone license * Account owner or admin permissions  **Scope:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_tracked_locations(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: The type of response data. Supports  only six responses at this time. `1`: Nomadic Emergency Services. `2`: Users Permission for Location Sharing. `3`: Default Emergency Address. `4`: Detectable Personal Location. `5`: Real-time Location for Users. `6`: Real-time Location for IP Phones.
        :param str site_id: The site's ID.
        :param str location_type: The location's type. 'Company' is the default value.
        :param str keyword: The device name or device MAC address.
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_tracked_locations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_tracked_locations_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_tracked_locations_with_http_info(self, **kwargs):  # noqa: E501
        """List tracked locations  # noqa: E501

        Lists the tracked locations.   **Prerequisites:** * Pro or higher account plan with Zoom phone license * Account owner or admin permissions  **Scope:** `phone:read:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_tracked_locations_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: The type of response data. Supports  only six responses at this time. `1`: Nomadic Emergency Services. `2`: Users Permission for Location Sharing. `3`: Default Emergency Address. `4`: Detectable Personal Location. `5`: Real-time Location for Users. `6`: Real-time Location for IP Phones.
        :param str site_id: The site's ID.
        :param str location_type: The location's type. 'Company' is the default value.
        :param str keyword: The device name or device MAC address.
        :return: InlineResponse20039
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'site_id', 'location_type', 'keyword']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_tracked_locations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'location_type' in params:
            query_params.append(('location_type', params['location_type']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/metrics/location_tracking', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20039',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
