# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EmergencyAddressesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_emergency_address(self, **kwargs):  # noqa: E501
        """Add an emergency address  # noqa: E501

        Adds an emergency address. If the address provided is not an exact match, the system generated corrected address will be used.   **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_emergency_address(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneEmergencyAddressesBody body:
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_emergency_address_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_emergency_address_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_emergency_address_with_http_info(self, **kwargs):  # noqa: E501
        """Add an emergency address  # noqa: E501

        Adds an emergency address. If the address provided is not an exact match, the system generated corrected address will be used.   **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_emergency_address_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneEmergencyAddressesBody body:
        :return: InlineResponse20115
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_emergency_address" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_addresses', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20115',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_emergency_address(self, emergency_address_id, **kwargs):  # noqa: E501
        """Delete an emergency address  # noqa: E501

        Removes an emergency address.  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_emergency_address(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The emergency address ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
            return data

    def delete_emergency_address_with_http_info(self, emergency_address_id, **kwargs):  # noqa: E501
        """Delete an emergency address  # noqa: E501

        Removes an emergency address.  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_emergency_address_with_http_info(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The emergency address ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emergency_address_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_emergency_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emergency_address_id' is set
        if ('emergency_address_id' not in params or
                params['emergency_address_id'] is None):
            raise ValueError("Missing the required parameter `emergency_address_id` when calling `delete_emergency_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emergency_address_id' in params:
            path_params['emergencyAddressId'] = params['emergency_address_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_addresses/{emergencyAddressId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_emergency_address(self, emergency_address_id, **kwargs):  # noqa: E501
        """Get emergency address details  # noqa: E501

        Gets the emergency address information.  **Scopes:** `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_emergency_address(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The emergency address ID. (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
            return data

    def get_emergency_address_with_http_info(self, emergency_address_id, **kwargs):  # noqa: E501
        """Get emergency address details  # noqa: E501

        Gets the emergency address information.  **Scopes:** `phone:write:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions<br>  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_emergency_address_with_http_info(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The emergency address ID. (required)
        :return: InlineResponse20027
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emergency_address_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_emergency_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emergency_address_id' is set
        if ('emergency_address_id' not in params or
                params['emergency_address_id'] is None):
            raise ValueError("Missing the required parameter `emergency_address_id` when calling `get_emergency_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emergency_address_id' in params:
            path_params['emergencyAddressId'] = params['emergency_address_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_addresses/{emergencyAddressId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20027',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_emergency_addresses(self, **kwargs):  # noqa: E501
        """List emergency addresses  # noqa: E501

        Lists the emergency addresses.  **Scopes:** `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_emergency_addresses(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The emergency address site ID.
        :param str user_id: User ID to which the personal emergency address belongs.
        :param int level: The emergency address owner level:  * `0` - Account/Company-level emergency address.   * `1` - User/Personal-level emergency address.  * `2` - Unknown company/pending emergency address.
        :param int status: The emergency address verification status:  * `1` — Verification not Required.  * `2` — Unverified.  * `3` — Verification requested.  * `4` — Verified.  * `5` — Rejected.  * `6` — Verification failed.
        :param str address_keyword: Keyword(s) to filter emergency addresses. You can filter by either:  * Address Line 1.  * Address Line 2.  * City.  * State Abbreviation.  * Zip Code.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned within a single API call.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_emergency_addresses_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_emergency_addresses_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_emergency_addresses_with_http_info(self, **kwargs):  # noqa: E501
        """List emergency addresses  # noqa: E501

        Lists the emergency addresses.  **Scopes:** `phone:read:admin` **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_emergency_addresses_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The emergency address site ID.
        :param str user_id: User ID to which the personal emergency address belongs.
        :param int level: The emergency address owner level:  * `0` - Account/Company-level emergency address.   * `1` - User/Personal-level emergency address.  * `2` - Unknown company/pending emergency address.
        :param int status: The emergency address verification status:  * `1` — Verification not Required.  * `2` — Unverified.  * `3` — Verification requested.  * `4` — Verified.  * `5` — Rejected.  * `6` — Verification failed.
        :param str address_keyword: Keyword(s) to filter emergency addresses. You can filter by either:  * Address Line 1.  * Address Line 2.  * City.  * State Abbreviation.  * Zip Code.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param int page_size: The number of records returned within a single API call.
        :return: InlineResponse20026
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'user_id', 'level', 'status', 'address_keyword', 'next_page_token', 'page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_emergency_addresses" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'user_id' in params:
            query_params.append(('user_id', params['user_id']))  # noqa: E501
        if 'level' in params:
            query_params.append(('level', params['level']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'address_keyword' in params:
            query_params.append(('address_keyword', params['address_keyword']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_addresses', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20026',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_emergency_address(self, emergency_address_id, **kwargs):  # noqa: E501
        """Update an emergency address  # noqa: E501

        Updates an emergency address information. If the address provided is not an exact match, the system generated corrected address will be used.   **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_emergency_address(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The ID of the emergency address. (required)
        :param EmergencyAddressesEmergencyAddressIdBody body:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_emergency_address_with_http_info(emergency_address_id, **kwargs)  # noqa: E501
            return data

    def update_emergency_address_with_http_info(self, emergency_address_id, **kwargs):  # noqa: E501
        """Update an emergency address  # noqa: E501

        Updates an emergency address information. If the address provided is not an exact match, the system generated corrected address will be used.   **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * Pro or a higher account with Zoom Phone license  * Account owner or admin permissions  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_emergency_address_with_http_info(emergency_address_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str emergency_address_id: The ID of the emergency address. (required)
        :param EmergencyAddressesEmergencyAddressIdBody body:
        :return: InlineResponse20028
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['emergency_address_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_emergency_address" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'emergency_address_id' is set
        if ('emergency_address_id' not in params or
                params['emergency_address_id'] is None):
            raise ValueError("Missing the required parameter `emergency_address_id` when calling `update_emergency_address`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'emergency_address_id' in params:
            path_params['emergencyAddressId'] = params['emergency_address_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_addresses/{emergencyAddressId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20028',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
