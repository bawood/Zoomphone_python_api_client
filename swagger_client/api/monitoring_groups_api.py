# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MonitoringGroupsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_members(self, member_type, monitoring_group_id, **kwargs):  # noqa: E501
        """Add members to a monitoring group  # noqa: E501

        Use this API to add members to a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members(member_type, monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str member_type: Member type (required)
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param list[str] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_with_http_info(member_type, monitoring_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_with_http_info(member_type, monitoring_group_id, **kwargs)  # noqa: E501
            return data

    def add_members_with_http_info(self, member_type, monitoring_group_id, **kwargs):  # noqa: E501
        """Add members to a monitoring group  # noqa: E501

        Use this API to add members to a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_with_http_info(member_type, monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str member_type: Member type (required)
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param list[str] body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['member_type', 'monitoring_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'member_type' is set
        if ('member_type' not in params or
                params['member_type'] is None):
            raise ValueError("Missing the required parameter `member_type` when calling `add_members`")  # noqa: E501
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `add_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []
        if 'member_type' in params:
            query_params.append(('member_type', params['member_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}/monitor_members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_monitoring_group(self, **kwargs):  # noqa: E501
        """Create a monitoring group  # noqa: E501

        Use this API to create a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_monitoring_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneMonitoringGroupsBody body:
        :return: InlineResponse20119
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_monitoring_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_monitoring_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_monitoring_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a monitoring group  # noqa: E501

        Use this API to create a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_monitoring_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneMonitoringGroupsBody body:
        :return: InlineResponse20119
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_monitoring_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20119',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_monitoring_group(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Delete a monitoring group  # noqa: E501

        Use this API to delete a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitoring_group(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_monitoring_group_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_monitoring_group_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
            return data

    def delete_monitoring_group_with_http_info(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Delete a monitoring group  # noqa: E501

        Use this API to delete a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_monitoring_group_with_http_info(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_monitoring_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `delete_monitoring_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_monitoring_group_by_id(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Get monitoring group by ID  # noqa: E501

        Use this API to return a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711) for the specified ID.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitoring_group_by_id(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_monitoring_group_by_id_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_monitoring_group_by_id_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
            return data

    def get_monitoring_group_by_id_with_http_info(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Get monitoring group by ID  # noqa: E501

        Use this API to return a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711) for the specified ID.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_monitoring_group_by_id_with_http_info(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :return: InlineResponse20041
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_monitoring_group_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `get_monitoring_group_by_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20041',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_members(self, monitoring_group_id, member_type, **kwargs):  # noqa: E501
        """Get members of a monitoring group  # noqa: E501

        Use this API to return members list of a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_members(monitoring_group_id, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_type: Member type (required)
        :param int page_size: The size of the page.
        :param str next_page_token: The current page number of returned records.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_members_with_http_info(monitoring_group_id, member_type, **kwargs)  # noqa: E501
        else:
            (data) = self.list_members_with_http_info(monitoring_group_id, member_type, **kwargs)  # noqa: E501
            return data

    def list_members_with_http_info(self, monitoring_group_id, member_type, **kwargs):  # noqa: E501
        """Get members of a monitoring group  # noqa: E501

        Use this API to return members list of a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_members_with_http_info(monitoring_group_id, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_type: Member type (required)
        :param int page_size: The size of the page.
        :param str next_page_token: The current page number of returned records.
        :return: InlineResponse20042
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id', 'member_type', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `list_members`")  # noqa: E501
        # verify the required parameter 'member_type' is set
        if ('member_type' not in params or
                params['member_type'] is None):
            raise ValueError("Missing the required parameter `member_type` when calling `list_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []
        if 'member_type' in params:
            query_params.append(('member_type', params['member_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}/monitor_members', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20042',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_monitoring_group(self, **kwargs):  # noqa: E501
        """Get a list of monitoring groups on an account  # noqa: E501

        Use this API to return an account's [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711) list.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_monitoring_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: Monitoring group's type.
        :param str site_id: Unique identifier of the monitoring group's site.
        :param int page_size: The size of the page.
        :param str next_page_token: The current page number of returned records.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_monitoring_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_monitoring_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_monitoring_group_with_http_info(self, **kwargs):  # noqa: E501
        """Get a list of monitoring groups on an account  # noqa: E501

        Use this API to return an account's [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711) list.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_monitoring_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int type: Monitoring group's type.
        :param str site_id: Unique identifier of the monitoring group's site.
        :param int page_size: The size of the page.
        :param str next_page_token: The current page number of returned records.
        :return: InlineResponse20040
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['type', 'site_id', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_monitoring_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20040',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_member(self, monitoring_group_id, member_extension_id, **kwargs):  # noqa: E501
        """Remove a member from a monitoring group  # noqa: E501

        Use this API to remove a member from a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member(monitoring_group_id, member_extension_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_extension_id: Member's extension ID. (required)
        :param str member_type: Member type
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_member_with_http_info(monitoring_group_id, member_extension_id, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_member_with_http_info(monitoring_group_id, member_extension_id, **kwargs)  # noqa: E501
            return data

    def remove_member_with_http_info(self, monitoring_group_id, member_extension_id, **kwargs):  # noqa: E501
        """Remove a member from a monitoring group  # noqa: E501

        Use this API to remove a member from a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_member_with_http_info(monitoring_group_id, member_extension_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_extension_id: Member's extension ID. (required)
        :param str member_type: Member type
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id', 'member_extension_id', 'member_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_member" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `remove_member`")  # noqa: E501
        # verify the required parameter 'member_extension_id' is set
        if ('member_extension_id' not in params or
                params['member_extension_id'] is None):
            raise ValueError("Missing the required parameter `member_extension_id` when calling `remove_member`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501
        if 'member_extension_id' in params:
            path_params['memberExtensionId'] = params['member_extension_id']  # noqa: E501

        query_params = []
        if 'member_type' in params:
            query_params.append(('member_type', params['member_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}/monitor_members/{memberExtensionId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_members(self, monitoring_group_id, member_type, **kwargs):  # noqa: E501
        """Remove all monitors or monitored members from a monitoring group  # noqa: E501

        Use this API to remove all monitor or monitored members from a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_members(monitoring_group_id, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_type: Member type (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_members_with_http_info(monitoring_group_id, member_type, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_members_with_http_info(monitoring_group_id, member_type, **kwargs)  # noqa: E501
            return data

    def remove_members_with_http_info(self, monitoring_group_id, member_type, **kwargs):  # noqa: E501
        """Remove all monitors or monitored members from a monitoring group  # noqa: E501

        Use this API to remove all monitor or monitored members from a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_members_with_http_info(monitoring_group_id, member_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param str member_type: Member type (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id', 'member_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_members" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `remove_members`")  # noqa: E501
        # verify the required parameter 'member_type' is set
        if ('member_type' not in params or
                params['member_type'] is None):
            raise ValueError("Missing the required parameter `member_type` when calling `remove_members`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []
        if 'member_type' in params:
            query_params.append(('member_type', params['member_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}/monitor_members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_monitoring_group(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Update a monitoring group  # noqa: E501

        Use this API to update a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_monitoring_group(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param MonitoringGroupsMonitoringGroupIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_monitoring_group_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_monitoring_group_with_http_info(monitoring_group_id, **kwargs)  # noqa: E501
            return data

    def update_monitoring_group_with_http_info(self, monitoring_group_id, **kwargs):  # noqa: E501
        """Update a monitoring group  # noqa: E501

        Use this API to update a [Monitoring Group](https://support.zoom.us/hc/en-us/articles/360044804711).  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_monitoring_group_with_http_info(monitoring_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str monitoring_group_id: Monitoring group ID. (required)
        :param MonitoringGroupsMonitoringGroupIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['monitoring_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_monitoring_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'monitoring_group_id' is set
        if ('monitoring_group_id' not in params or
                params['monitoring_group_id'] is None):
            raise ValueError("Missing the required parameter `monitoring_group_id` when calling `update_monitoring_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'monitoring_group_id' in params:
            path_params['monitoringGroupId'] = params['monitoring_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/monitoring_groups/{monitoringGroupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
