# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PhoneNumbersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_byoc_number(self, **kwargs):  # noqa: E501
        """Add BYOC phone numbers  # noqa: E501

        Use this API to add BYOC (Bring Your Own Carrier) phone numbers to Zoom Phone.  **Scopes:** `phone:write:admin`, `phone:write`, or `phone:master`</br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise plan  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_byoc_number(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneByocNumbersBody body:
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_byoc_number_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.add_byoc_number_with_http_info(**kwargs)  # noqa: E501
            return data

    def add_byoc_number_with_http_info(self, **kwargs):  # noqa: E501
        """Add BYOC phone numbers  # noqa: E501

        Use this API to add BYOC (Bring Your Own Carrier) phone numbers to Zoom Phone.  **Scopes:** `phone:write:admin`, `phone:write`, or `phone:master`</br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise plan  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_byoc_number_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneByocNumbersBody body:
        :return: InlineResponse2014
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_byoc_number" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/byoc_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2014',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_number(self, user_id, **kwargs):  # noqa: E501
        """Assign a phone number to a user  # noqa: E501

        Assigns a [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers) to a user who has already enabled Zoom Phone.  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_number(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param UserIdPhoneNumbersBody body: Provide either the ID or phone number in the request body.
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_number_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_number_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_number_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Assign a phone number to a user  # noqa: E501

        Assigns a [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers) to a user who has already enabled Zoom Phone.  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_number_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: (required)
        :param UserIdPhoneNumbersBody body: Provide either the ID or phone number in the request body.
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `assign_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/users/{userId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_number_to_emergency_number_pool(self, **kwargs):  # noqa: E501
        """Assign phone numbers to the emergency number pool  # noqa: E501

        Assigns phone numbers to the [Emergency Number Pool](https://support.zoom.us/hc/en-us/articles/360062110192-Routing-emergency-calls).  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_number_to_emergency_number_pool(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmergencyNumberPoolsPhoneNumbersBody body: Provide either an ID or a number in the request body.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_number_to_emergency_number_pool_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_number_to_emergency_number_pool_with_http_info(**kwargs)  # noqa: E501
            return data

    def assign_phone_number_to_emergency_number_pool_with_http_info(self, **kwargs):  # noqa: E501
        """Assign phone numbers to the emergency number pool  # noqa: E501

        Assigns phone numbers to the [Emergency Number Pool](https://support.zoom.us/hc/en-us/articles/360062110192-Routing-emergency-calls).  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_number_to_emergency_number_pool_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param EmergencyNumberPoolsPhoneNumbersBody body: Provide either an ID or a number in the request body.
        :return: InlineResponse20029
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_number_to_emergency_number_pool" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_number_pools/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20029',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_unassigned_phone_numbers(self, phone_numbers, **kwargs):  # noqa: E501
        """Delete unassigned phone numbers  # noqa: E501

        Deletes unassigned [phone numbers](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6). Up to 20 phone numbers can be removed in a single request.  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  * The user must have been previously assigned a Zoom Phone number  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unassigned_phone_numbers(phone_numbers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] phone_numbers: Comma seperated list of unassigned phone numbers in E164 format or phone number IDs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_unassigned_phone_numbers_with_http_info(phone_numbers, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_unassigned_phone_numbers_with_http_info(phone_numbers, **kwargs)  # noqa: E501
            return data

    def delete_unassigned_phone_numbers_with_http_info(self, phone_numbers, **kwargs):  # noqa: E501
        """Delete unassigned phone numbers  # noqa: E501

        Deletes unassigned [phone numbers](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6). Up to 20 phone numbers can be removed in a single request.  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  * The user must have been previously assigned a Zoom Phone number  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_unassigned_phone_numbers_with_http_info(phone_numbers, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[str] phone_numbers: Comma seperated list of unassigned phone numbers in E164 format or phone number IDs. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_numbers']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_unassigned_phone_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_numbers' is set
        if ('phone_numbers' not in params or
                params['phone_numbers'] is None):
            raise ValueError("Missing the required parameter `phone_numbers` when calling `delete_unassigned_phone_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'phone_numbers' in params:
            query_params.append(('phone_numbers', params['phone_numbers']))  # noqa: E501
            collection_formats['phone_numbers'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_phone_number_details(self, number_id, **kwargs):  # noqa: E501
        """Get a phone number  # noqa: E501

        Gets information about an account's Zoom Phone number.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Pro or higher account plan  * A Zoom phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_number_details(number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str number_id: Unique Identifier of the Phone Number. This can be retrieved from the List Phone Numbers API. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_phone_number_details_with_http_info(number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_phone_number_details_with_http_info(number_id, **kwargs)  # noqa: E501
            return data

    def get_phone_number_details_with_http_info(self, number_id, **kwargs):  # noqa: E501
        """Get a phone number  # noqa: E501

        Gets information about an account's Zoom Phone number.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Pro or higher account plan  * A Zoom phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_phone_number_details_with_http_info(number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str number_id: Unique Identifier of the Phone Number. This can be retrieved from the List Phone Numbers API. (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_phone_number_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number_id' is set
        if ('number_id' not in params or
                params['number_id'] is None):
            raise ValueError("Missing the required parameter `number_id` when calling `get_phone_number_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'number_id' in params:
            path_params['numberId'] = params['number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/numbers/{numberId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_account_phone_numbers(self, **kwargs):  # noqa: E501
        """List phone numbers  # noqa: E501

        Lists all Zoom Phone numbers in a Zoom account.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Pro or higher account plan  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_phone_numbers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param str type: The query response by number assignment. The value can be one of the following: <br> `assigned`: The number has been assigned to either a user, a call queue, an auto-receptionist or a common area in an account. <br>`unassigned`: The number is not assigned to anyone.<br> `all`: Include both assigned and unassigned numbers in the response.<br> `byoc`: Include Bring Your Own Carrier (BYOC) numbers only in the response.
        :param str extension_type: The type of assignee to whom the number is assigned. The parameter can be set only if `type` parameter is set as `assigned`. The value can be one of the following:<br> `user`<br> `callQueue`<br> `autoReceptionist`<br> `commonAreaPhone`
        :param int page_size: The number of records returned within a single API call.
        :param str number_type: The type of phone number. The value can be either `toll` or `tollfree`.
        :param bool pending_numbers: Include or exclude pending numbers in the response. The value can be either `true` or `false`.
        :param str site_id: Unique identifier of the site. Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by a specific phone site. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) or [Adding a site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15) for details.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_account_phone_numbers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_account_phone_numbers_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_account_phone_numbers_with_http_info(self, **kwargs):  # noqa: E501
        """List phone numbers  # noqa: E501

        Lists all Zoom Phone numbers in a Zoom account.  **Scopes:** `phone:read:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites:**  * A Pro or higher account plan  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_account_phone_numbers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :param str type: The query response by number assignment. The value can be one of the following: <br> `assigned`: The number has been assigned to either a user, a call queue, an auto-receptionist or a common area in an account. <br>`unassigned`: The number is not assigned to anyone.<br> `all`: Include both assigned and unassigned numbers in the response.<br> `byoc`: Include Bring Your Own Carrier (BYOC) numbers only in the response.
        :param str extension_type: The type of assignee to whom the number is assigned. The parameter can be set only if `type` parameter is set as `assigned`. The value can be one of the following:<br> `user`<br> `callQueue`<br> `autoReceptionist`<br> `commonAreaPhone`
        :param int page_size: The number of records returned within a single API call.
        :param str number_type: The type of phone number. The value can be either `toll` or `tollfree`.
        :param bool pending_numbers: Include or exclude pending numbers in the response. The value can be either `true` or `false`.
        :param str site_id: Unique identifier of the site. Use this query parameter if you have enabled multiple sites and would like to filter the response of this API call by a specific phone site. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) or [Adding a site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15) for details.
        :return: InlineResponse20045
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['next_page_token', 'type', 'extension_type', 'page_size', 'number_type', 'pending_numbers', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_account_phone_numbers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if 'type' in params:
            query_params.append(('type', params['type']))  # noqa: E501
        if 'extension_type' in params:
            query_params.append(('extension_type', params['extension_type']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'number_type' in params:
            query_params.append(('number_type', params['number_type']))  # noqa: E501
        if 'pending_numbers' in params:
            query_params.append(('pending_numbers', params['pending_numbers']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/numbers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20045',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_phone_number(self, user_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassigns Zoom Phone user's [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6).  After assigning a phone number, you can remove it if you do not want it to be assigned to anyone.  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  * The user must have been previously assigned a Zoom Phone number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_number(user_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Provide either userId or email address of the user. (required)
        :param str phone_number_id: Provide either phone number or phoneNumberId of the user.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_phone_number_with_http_info(user_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_phone_number_with_http_info(user_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def unassign_phone_number_with_http_info(self, user_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassigns Zoom Phone user's [phone number](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6).  After assigning a phone number, you can remove it if you do not want it to be assigned to anyone.  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  * The user must have been previously assigned a Zoom Phone number  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_number_with_http_info(user_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: Provide either userId or email address of the user. (required)
        :param str phone_number_id: Provide either phone number or phoneNumberId of the user.  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_phone_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `unassign_phone_number`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `unassign_phone_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/users/{userId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def unassign_phone_number_from_emergency_number_pool(self, phone_number_id, **kwargs):  # noqa: E501
        """Unassign phone numbers from the emergency number pool  # noqa: E501

        Unassigns phone numbers from the [Emergency Number Pool](https://support.zoom.us/hc/en-us/articles/360062110192-Routing-emergency-calls).  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_number_from_emergency_number_pool(phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number_id: Provide either the phone number or the `phoneNumberId`. (required)
        :param str site_id: Required if multiple sites are enabled. Unique identifier of the site
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.unassign_phone_number_from_emergency_number_pool_with_http_info(phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.unassign_phone_number_from_emergency_number_pool_with_http_info(phone_number_id, **kwargs)  # noqa: E501
            return data

    def unassign_phone_number_from_emergency_number_pool_with_http_info(self, phone_number_id, **kwargs):  # noqa: E501
        """Unassign phone numbers from the emergency number pool  # noqa: E501

        Unassigns phone numbers from the [Emergency Number Pool](https://support.zoom.us/hc/en-us/articles/360062110192-Routing-emergency-calls).  **Scopes:** `phone:write`, `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.unassign_phone_number_from_emergency_number_pool_with_http_info(phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str phone_number_id: Provide either the phone number or the `phoneNumberId`. (required)
        :param str site_id: Required if multiple sites are enabled. Unique identifier of the site
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['phone_number_id', 'site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method unassign_phone_number_from_emergency_number_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `unassign_phone_number_from_emergency_number_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/emergency_number_pools/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_phone_number_details(self, number_id, **kwargs):  # noqa: E501
        """Update a phone number  # noqa: E501

        Updates a Zoom Phone number's information.  **Scopes:** `phone:write`, `phone:write:admin`, `phone:master`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Paid account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_phone_number_details(number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str number_id: Phone number ID. (required)
        :param NumbersNumberIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_phone_number_details_with_http_info(number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_phone_number_details_with_http_info(number_id, **kwargs)  # noqa: E501
            return data

    def update_phone_number_details_with_http_info(self, number_id, **kwargs):  # noqa: E501
        """Update a phone number  # noqa: E501

        Updates a Zoom Phone number's information.  **Scopes:** `phone:write`, `phone:write:admin`, `phone:master`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Paid account  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_phone_number_details_with_http_info(number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str number_id: Phone number ID. (required)
        :param NumbersNumberIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['number_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_phone_number_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'number_id' is set
        if ('number_id' not in params or
                params['number_id'] is None):
            raise ValueError("Missing the required parameter `number_id` when calling `update_phone_number_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'number_id' in params:
            path_params['numberId'] = params['number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/numbers/{numberId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_for_unassigned_phone_numbers(self, site_id, **kwargs):  # noqa: E501
        """Update a site's unassigned phone numbers  # noqa: E501

        Updates a site's unassigned [phone numbers](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6). Up to 20 phone numbers can be updated in a single request.   **Prerequisites:**  * A Pro or higher account plan  * A Zoom Phone license  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_for_unassigned_phone_numbers(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: Unique identifier of the site (required)
        :param SitesSiteIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_for_unassigned_phone_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_for_unassigned_phone_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def update_site_for_unassigned_phone_numbers_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Update a site's unassigned phone numbers  # noqa: E501

        Updates a site's unassigned [phone numbers](https://support.zoom.us/hc/en-us/articles/360020808292-Managing-Phone-Numbers#h_38ba8b01-26e3-4b1b-a9b5-0717c00a7ca6). Up to 20 phone numbers can be updated in a single request.   **Prerequisites:**  * A Pro or higher account plan  * A Zoom Phone license  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_for_unassigned_phone_numbers_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: Unique identifier of the site (required)
        :param SitesSiteIdBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_for_unassigned_phone_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site_for_unassigned_phone_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/numbers/sites/{siteId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
