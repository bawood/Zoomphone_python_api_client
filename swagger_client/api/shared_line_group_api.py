# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SharedLineGroupApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_members_to_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add members to a shared line group  # noqa: E501

        [Adds members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.  Note that a member can only be added to one shared line group.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group. (required)
        :param SharedLineGroupIdMembersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_members_to_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def add_members_to_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Add members to a shared line group  # noqa: E501

        [Adds members](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups#h_7cb42370-48f6-4a8f-84f4-c6eee4d9f0ca) to a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.  Note that a member can only be added to one shared line group.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_members_to_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group. (required)
        :param SharedLineGroupIdMembersBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_members_to_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `add_members_to_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_slg_policy_sub_setting(self, shared_line_group_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting to a shared line group  # noqa: E501

        Adds the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to set up shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_slg_policy_sub_setting(shared_line_group_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to add. Allowed values: `voice_mail`. (required)
        :param PolicyPolicyTypeBody body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.add_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, **kwargs)  # noqa: E501
            return data

    def add_slg_policy_sub_setting_with_http_info(self, shared_line_group_id, policy_type, **kwargs):  # noqa: E501
        """Add a policy setting to a shared line group  # noqa: E501

        Adds the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to set up shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to add. Allowed values: `voice_mail`. (required)
        :param PolicyPolicyTypeBody body:
        :return: InlineResponse20123
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_slg_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `add_slg_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `add_slg_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/policy/{policyType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20123',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def assign_phone_numbers_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign phone numbers  # noqa: E501

        Assigns phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups).  **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group. (required)
        :param SharedLineGroupIdPhoneNumbersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.assign_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def assign_phone_numbers_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Assign phone numbers  # noqa: E501

        Assigns phone numbers to a shared line groups. These direct phone numbers will be shared among members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups).  **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.assign_phone_numbers_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group. (required)
        :param SharedLineGroupIdPhoneNumbersBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method assign_phone_numbers_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `assign_phone_numbers_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_a_shared_line_group(self, **kwargs):  # noqa: E501
        """Create a shared line group  # noqa: E501

        Creates a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_a_shared_line_group(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneSharedLineGroupsBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_a_shared_line_group_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_a_shared_line_group_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_a_shared_line_group_with_http_info(self, **kwargs):  # noqa: E501
        """Create a shared line group  # noqa: E501

        Creates a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_a_shared_line_group_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneSharedLineGroupsBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_member_slg(self, shared_line_group_id, member_id, **kwargs):  # noqa: E501
        """Unassign a member from a shared line group  # noqa: E501

        Unassigns **a specific member** from a shared line group. Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail.   **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_member_slg(shared_line_group_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group from which you would like to remove a member. (required)
        :param str member_id: The unique identifier of the member who is to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, **kwargs)  # noqa: E501
            return data

    def delete_a_member_slg_with_http_info(self, shared_line_group_id, member_id, **kwargs):  # noqa: E501
        """Unassign a member from a shared line group  # noqa: E501

        Unassigns **a specific member** from a shared line group. Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail.   **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_member_slg_with_http_info(shared_line_group_id, member_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group from which you would like to remove a member. (required)
        :param str member_id: The unique identifier of the member who is to be removed. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'member_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_member_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_member_slg`")  # noqa: E501
        # verify the required parameter 'member_id' is set
        if ('member_id' not in params or
                params['member_id'] is None):
            raise ValueError("Missing the required parameter `member_id` when calling `delete_a_member_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'member_id' in params:
            path_params['memberId'] = params['member_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members/{memberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_phone_number_slg(self, shared_line_group_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassigns a specific phone number that was assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_phone_number_slg(shared_line_group_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group from which you would like to unassign a phone number. (required)
        :param str phone_number_id: The unique identifier of the phone number which is to be unassigned. This can be retrieved from Get a Shared Line Group API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, **kwargs)  # noqa: E501
            return data

    def delete_a_phone_number_slg_with_http_info(self, shared_line_group_id, phone_number_id, **kwargs):  # noqa: E501
        """Unassign a phone number  # noqa: E501

        Unassigns a specific phone number that was assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups). **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_phone_number_slg_with_http_info(shared_line_group_id, phone_number_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group from which you would like to unassign a phone number. (required)
        :param str phone_number_id: The unique identifier of the phone number which is to be unassigned. This can be retrieved from Get a Shared Line Group API. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'phone_number_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_phone_number_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_phone_number_slg`")  # noqa: E501
        # verify the required parameter 'phone_number_id' is set
        if ('phone_number_id' not in params or
                params['phone_number_id'] is None):
            raise ValueError("Missing the required parameter `phone_number_id` when calling `delete_a_phone_number_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'phone_number_id' in params:
            path_params['phoneNumberId'] = params['phone_number_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers/{phoneNumberId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Delete a shared line group  # noqa: E501

        Deletes a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas.  **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def delete_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Delete a shared line group  # noqa: E501

        Deletes a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas.  **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_members_of_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign members from a shared line group  # noqa: E501

        Unassigns **all** existing members from a Shared Line Group.Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail.   **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_of_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_members_of_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_members_of_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def delete_members_of_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign members from a shared line group  # noqa: E501

        Unassigns **all** existing members from a Shared Line Group.Members of the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) have access to the group's phone number and voicemail.   **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_members_of_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that you would like to delete. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_members_of_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_members_of_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/members', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_phone_numbers_slg(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Unassigns all the phone numbers that have been assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups).  **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_numbers_slg(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the Shared Line Group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_phone_numbers_slg_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def delete_phone_numbers_slg_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Unassign all phone numbers  # noqa: E501

        Unassigns all the phone numbers that have been assigned to the [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792-Setting-up-shared-line-groups).  **Prerequisites:**   * Pro or higher account with Zoom Phone license. * A valid Shared Line Group * Account owner or admin privileges  **Scopes:** `phone:write:admin`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_numbers_slg_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the Shared Line Group. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_phone_numbers_slg" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `delete_phone_numbers_slg`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/phone_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Get a shared line group  # noqa: E501

         Lists all the shared line groups. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the Shared Line Group. (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def get_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Get a shared line group  # noqa: E501

         Lists all the shared line groups. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the Shared Line Group. (required)
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `get_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_shared_line_groups(self, **kwargs):  # noqa: E501
        """List shared line groups  # noqa: E501

        Lists all the shared line groups. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This capability gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges  <br>  **Scopes:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_line_groups(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_shared_line_groups_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_shared_line_groups_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_shared_line_groups_with_http_info(self, **kwargs):  # noqa: E501
        """List shared line groups  # noqa: E501

        Lists all the shared line groups. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This capability gives members of the shared line group access to the group's direct phone number and voicemail.   **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges  <br>  **Scopes:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_shared_line_groups_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_shared_line_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def remove_slg_policy_sub_setting(self, shared_line_group_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete an SLG policy setting  # noqa: E501

        Removes the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to remove shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_slg_policy_sub_setting(shared_line_group_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to remove. Allowed values: `voice_mail`. (required)
        :param list[str] shared_ids: This field is a comma separated list of shared IDs to remove. The number is limited to the minimum value of 10 or the number of allowed access members account setting. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.remove_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, shared_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.remove_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, shared_ids, **kwargs)  # noqa: E501
            return data

    def remove_slg_policy_sub_setting_with_http_info(self, shared_line_group_id, policy_type, shared_ids, **kwargs):  # noqa: E501
        """Delete an SLG policy setting  # noqa: E501

        Removes the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to remove shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.remove_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, shared_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to remove. Allowed values: `voice_mail`. (required)
        :param list[str] shared_ids: This field is a comma separated list of shared IDs to remove. The number is limited to the minimum value of 10 or the number of allowed access members account setting. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'policy_type', 'shared_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method remove_slg_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `remove_slg_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `remove_slg_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'shared_ids' is set
        if ('shared_ids' not in params or
                params['shared_ids'] is None):
            raise ValueError("Missing the required parameter `shared_ids` when calling `remove_slg_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []
        if 'shared_ids' in params:
            query_params.append(('shared_ids', params['shared_ids']))  # noqa: E501
            collection_formats['shared_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/policy/{policyType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_a_shared_line_group(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a shared line group  # noqa: E501

         Updates information of a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.  **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that is to be updated. (required)
        :param SharedLineGroupsSharedLineGroupIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_a_shared_line_group_with_http_info(shared_line_group_id, **kwargs)  # noqa: E501
            return data

    def update_a_shared_line_group_with_http_info(self, shared_line_group_id, **kwargs):  # noqa: E501
        """Update a shared line group  # noqa: E501

         Updates information of a shared line group. A [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) allows Zoom Phone admins to share a phone number and extension with a group of phone users or common areas. This gives members of the shared line group access to the group's direct phone number and voicemail.  **Prerequisites:** <br> * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_a_shared_line_group_with_http_info(shared_line_group_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The unique identifier of the shared line group that is to be updated. (required)
        :param SharedLineGroupsSharedLineGroupIdBody body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_a_shared_line_group" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `update_a_shared_line_group`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_slg_policy_sub_setting(self, shared_line_group_id, policy_type, **kwargs):  # noqa: E501
        """Update an SLG policy setting  # noqa: E501

        Updates the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to update shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_slg_policy_sub_setting(shared_line_group_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to update. Allowed values: `voice_mail`. (required)
        :param PolicyPolicyTypeBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, **kwargs)  # noqa: E501
            return data

    def update_slg_policy_sub_setting_with_http_info(self, shared_line_group_id, policy_type, **kwargs):  # noqa: E501
        """Update an SLG policy setting  # noqa: E501

        Updates the policy sub-setting for a specific [shared line group](https://support.zoom.us/hc/en-us/articles/360038850792) according to the `policyType`. For example, you can use this API to update shared access members.   **Prerequisites:**  * Pro or higher account with Zoom Phone license. * Account owner or admin privileges   **Scopes:** `phone:write:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_slg_policy_sub_setting_with_http_info(shared_line_group_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str shared_line_group_id: The shared line group ID. (required)
        :param str policy_type: This field corresponds to the policy item you wish to update. Allowed values: `voice_mail`. (required)
        :param PolicyPolicyTypeBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['shared_line_group_id', 'policy_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_slg_policy_sub_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'shared_line_group_id' is set
        if ('shared_line_group_id' not in params or
                params['shared_line_group_id'] is None):
            raise ValueError("Missing the required parameter `shared_line_group_id` when calling `update_slg_policy_sub_setting`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `update_slg_policy_sub_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'shared_line_group_id' in params:
            path_params['sharedLineGroupId'] = params['shared_line_group_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/shared_line_groups/{sharedLineGroupId}/policy/{policyType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
