# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SitesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_site_outbound_caller_numbers(self, site_id, **kwargs):  # noqa: E501
        """Add customized outbound caller ID phone numbers  # noqa: E501

        Use this API to add the `site-level` customized outbound caller ID phone numbers.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_site_outbound_caller_numbers(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param OutboundCallerIdCustomizedNumbersBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_site_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.add_site_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def add_site_outbound_caller_numbers_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Add customized outbound caller ID phone numbers  # noqa: E501

        Use this API to add the `site-level` customized outbound caller ID phone numbers.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_site_outbound_caller_numbers_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param OutboundCallerIdCustomizedNumbersBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_site_outbound_caller_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_site_outbound_caller_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/outbound_caller_id/customized_numbers', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def add_site_setting(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Add a site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to add a site setting to a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_site_setting(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `holiday_hours`  * `security`. (required)
        :param SettingsSettingTypeBody4 body:
        :return: InlineResponse20124
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
        else:
            (data) = self.add_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
            return data

    def add_site_setting_with_http_info(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Add a site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to add a site setting to a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_site_setting_with_http_info(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `holiday_hours`  * `security`. (required)
        :param SettingsSettingTypeBody4 body:
        :return: InlineResponse20124
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'setting_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_site_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `add_site_setting`")  # noqa: E501
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `add_site_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/settings/{settingType}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20124',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_phone_site(self, **kwargs):  # noqa: E501
        """Create a phone site  # noqa: E501

        Use this API to create a [site](https://support.zoom.us/hc/en-us/articles/360020809672). It allows you to organize the Zoom Phone users in your organization.  **Prerequisites:** * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  * Pro or a higher account with Zoom Phone enabled.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phone_site(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneSitesBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_phone_site_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.create_phone_site_with_http_info(**kwargs)  # noqa: E501
            return data

    def create_phone_site_with_http_info(self, **kwargs):  # noqa: E501
        """Create a phone site  # noqa: E501

        Use this API to create a [site](https://support.zoom.us/hc/en-us/articles/360020809672). It allows you to organize the Zoom Phone users in your organization.  **Prerequisites:** * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  * Pro or a higher account with Zoom Phone enabled.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_phone_site_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param PhoneSitesBody body:
        :return: InlineResponse204
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_phone_site" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse204',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_phone_site(self, site_id, transfer_site_id, **kwargs):  # noqa: E501
        """Delete a phone site  # noqa: E501

         Use this API to delete a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) in a Zoom account. To delete a site, in the query parameter, you must provide the site ID of another site where the assets of current site (users, numbers and phones) can be transferred to.  You cannot use this API to delete the main site.  **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license.  * [Multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) must be enabled.  **Scope:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_site(site_id, transfer_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier of the site. (required)
        :param str transfer_site_id: The site ID of another site where the assets of the current site (users, numbers and phones) can be transferred. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_phone_site_with_http_info(site_id, transfer_site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_phone_site_with_http_info(site_id, transfer_site_id, **kwargs)  # noqa: E501
            return data

    def delete_phone_site_with_http_info(self, site_id, transfer_site_id, **kwargs):  # noqa: E501
        """Delete a phone site  # noqa: E501

         Use this API to delete a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) in a Zoom account. To delete a site, in the query parameter, you must provide the site ID of another site where the assets of current site (users, numbers and phones) can be transferred to.  You cannot use this API to delete the main site.  **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license.  * [Multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites) must be enabled.  **Scope:** `phone:write:admin`     **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_phone_site_with_http_info(site_id, transfer_site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier of the site. (required)
        :param str transfer_site_id: The site ID of another site where the assets of the current site (users, numbers and phones) can be transferred. (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'transfer_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_phone_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_phone_site`")  # noqa: E501
        # verify the required parameter 'transfer_site_id' is set
        if ('transfer_site_id' not in params or
                params['transfer_site_id'] is None):
            raise ValueError("Missing the required parameter `transfer_site_id` when calling `delete_phone_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'transfer_site_id' in params:
            query_params.append(('transfer_site_id', params['transfer_site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_outbound_caller_numbers(self, site_id, **kwargs):  # noqa: E501
        """Remove customized outbound caller ID phone numbers  # noqa: E501

        Use this API to remove the `site-level` customized outbound caller ID phone numbers.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_outbound_caller_numbers(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param list[str] customize_ids: The customization IDs.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_site_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_site_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def delete_site_outbound_caller_numbers_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Remove customized outbound caller ID phone numbers  # noqa: E501

        Use this API to remove the `site-level` customized outbound caller ID phone numbers.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_outbound_caller_numbers_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param list[str] customize_ids: The customization IDs.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'customize_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_outbound_caller_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_site_outbound_caller_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'customize_ids' in params:
            query_params.append(('customize_ids', params['customize_ids']))  # noqa: E501
            collection_formats['customize_ids'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/outbound_caller_id/customized_numbers', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_site_setting(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Delete a site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to delete the site setting of a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_setting(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `holiday_hours`  * `security`. (required)
        :param str device_type: The device type. Enable SRTP AES-256 encryption on the site for the specified device type. Used for `security` setting type.
        :param str holiday_id: The holiday hour setting ID.  Used for `holiday_hours` setting type.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
            return data

    def delete_site_setting_with_http_info(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Delete a site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to delete the site setting of a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_site_setting_with_http_info(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `holiday_hours`  * `security`. (required)
        :param str device_type: The device type. Enable SRTP AES-256 encryption on the site for the specified device type. Used for `security` setting type.
        :param str holiday_id: The holiday hour setting ID.  Used for `holiday_hours` setting type.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'setting_type', 'device_type', 'holiday_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_site_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `delete_site_setting`")  # noqa: E501
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `delete_site_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []
        if 'device_type' in params:
            query_params.append(('device_type', params['device_type']))  # noqa: E501
        if 'holiday_id' in params:
            query_params.append(('holiday_id', params['holiday_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/settings/{settingType}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_a_site(self, site_id, **kwargs):  # noqa: E501
        """Get phone site details  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to get information on a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_site(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier of the site. (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_a_site_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_a_site_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def get_a_site_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Get phone site details  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to get information on a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_a_site_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The unique identifier of the site. (required)
        :return: InlineResponse20069
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_a_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_a_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20069',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_policy_details(self, site_id, policy_type, **kwargs):  # noqa: E501
        """Get site policy details  # noqa: E501

        Use this API to get the site policy details.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_policy_details(site_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str policy_type: The site policy type: `restricted_call_hours`, `allowed_call_locations`. (required)
        :param str sub_policy_type: The sub policy type: `restricted_holiday_hours`, `allowed_call_locations_places`.  The `restricted_holiday_hours` sub policy type is for policy type `restricted_call_hours`.  The `allowed_call_locations_places` sub policy type is for policy type `allowed_call_locations`.
        :param str holiday_hours_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `restricted_holiday_hours`.
        :param str locations_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `allowed_call_locations_places`.
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_policy_details_with_http_info(site_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_policy_details_with_http_info(site_id, policy_type, **kwargs)  # noqa: E501
            return data

    def get_site_policy_details_with_http_info(self, site_id, policy_type, **kwargs):  # noqa: E501
        """Get site policy details  # noqa: E501

        Use this API to get the site policy details.  **Prerequisites:** * Pro or higher account plan with Zoom phone license  **Scope:** `phone:read:admin`   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_policy_details_with_http_info(site_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str policy_type: The site policy type: `restricted_call_hours`, `allowed_call_locations`. (required)
        :param str sub_policy_type: The sub policy type: `restricted_holiday_hours`, `allowed_call_locations_places`.  The `restricted_holiday_hours` sub policy type is for policy type `restricted_call_hours`.  The `allowed_call_locations_places` sub policy type is for policy type `allowed_call_locations`.
        :param str holiday_hours_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `restricted_holiday_hours`.
        :param str locations_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `allowed_call_locations_places`.
        :return: InlineResponse20071
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'policy_type', 'sub_policy_type', 'holiday_hours_site_id', 'locations_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_policy_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_policy_details`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `get_site_policy_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []
        if 'sub_policy_type' in params:
            query_params.append(('sub_policy_type', params['sub_policy_type']))  # noqa: E501
        if 'holiday_hours_site_id' in params:
            query_params.append(('holiday_hours_site_id', params['holiday_hours_site_id']))  # noqa: E501
        if 'locations_site_id' in params:
            query_params.append(('locations_site_id', params['locations_site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/policies/{policyType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20071',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_site_setting_for_type(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Get a phone site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to get site setting about a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_setting_for_type(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `local_based_routing`  * `business_hours`  * `closed_hours`  * `holiday_hours`  * `security`  * `outbound_caller_id`  * `audio_prompt`  * `desk_phone`  * `dial_by_name`  * `billing_account` (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_site_setting_for_type_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_site_setting_for_type_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
            return data

    def get_site_setting_for_type_with_http_info(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Get a phone site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to get site setting about a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_site_setting_for_type_with_http_info(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `local_based_routing`  * `business_hours`  * `closed_hours`  * `holiday_hours`  * `security`  * `outbound_caller_id`  * `audio_prompt`  * `desk_phone`  * `dial_by_name`  * `billing_account` (required)
        :return: InlineResponse20070
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'setting_type']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_site_setting_for_type" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `get_site_setting_for_type`")  # noqa: E501
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `get_site_setting_for_type`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/settings/{settingType}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20070',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_phone_sites(self, **kwargs):  # noqa: E501
        """List phone sites  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to list all the [sites](https://support.zoom.us/hc/en-us/articles/360020809672) that have been created for an account.<br> **Prerequisites:**<br> * Multiple Sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15). * Pro or a higher account with Zoom Phone enabled.   **Scope:** `phone:read:admin`<br>   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_phone_sites(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_phone_sites_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_phone_sites_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_phone_sites_with_http_info(self, **kwargs):  # noqa: E501
        """List phone sites  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to list all the [sites](https://support.zoom.us/hc/en-us/articles/360020809672) that have been created for an account.<br> **Prerequisites:**<br> * Multiple Sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15). * Pro or a higher account with Zoom Phone enabled.   **Scope:** `phone:read:admin`<br>   **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_phone_sites_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20068
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_phone_sites" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20068',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_site_customize_outbound_caller_numbers(self, site_id, **kwargs):  # noqa: E501
        """List customized outbound caller ID phone numbers  # noqa: E501

        Use this API to retrieve phone numbers that can be used as the `site-level` customized outbound caller ID.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_customize_outbound_caller_numbers(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param bool selected: Status of the phone numbers.<br>`true`- Numbers already added to the custom list. <br>`false`- Numbers not yet added to the custom list
        :param str site_id: For filtering phone numbers that belong to the site.
        :param str extension_type: The type of the extension to which the phone number belongs.
        :param str keyword: A search keyword for phone or extension numbers.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.list_site_customize_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_site_customize_outbound_caller_numbers_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def list_site_customize_outbound_caller_numbers_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """List customized outbound caller ID phone numbers  # noqa: E501

        Use this API to retrieve phone numbers that can be used as the `site-level` customized outbound caller ID.  * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).   **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license.  **Scope:** `phone:read:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.list_site_customize_outbound_caller_numbers_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param bool selected: Status of the phone numbers.<br>`true`- Numbers already added to the custom list. <br>`false`- Numbers not yet added to the custom list
        :param str site_id: For filtering phone numbers that belong to the site.
        :param str extension_type: The type of the extension to which the phone number belongs.
        :param str keyword: A search keyword for phone or extension numbers.
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The next page token paginates through a large set of results. A next page token is returned whenever the set of available results exceeds the current page size. The expiration period for this token is 15 minutes.
        :return: InlineResponse20072
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'selected', 'site_id', 'extension_type', 'keyword', 'page_size', 'next_page_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_site_customize_outbound_caller_numbers" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `list_site_customize_outbound_caller_numbers`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []
        if 'selected' in params:
            query_params.append(('selected', params['selected']))  # noqa: E501
        if 'site_id' in params:
            query_params.append(('site_id', params['site_id']))  # noqa: E501
        if 'extension_type' in params:
            query_params.append(('extension_type', params['extension_type']))  # noqa: E501
        if 'keyword' in params:
            query_params.append(('keyword', params['keyword']))  # noqa: E501
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/outbound_caller_id/customized_numbers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20072',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_details(self, site_id, **kwargs):  # noqa: E501
        """Update phone site details  # noqa: E501

        Allows you to organize Zoom Phone users in your organization. Use this API to update information about a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).   **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license. * **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_details(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: Unique identifier of the site. (required)
        :param SitesSiteIdBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_details_with_http_info(site_id, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_details_with_http_info(site_id, **kwargs)  # noqa: E501
            return data

    def update_site_details_with_http_info(self, site_id, **kwargs):  # noqa: E501
        """Update phone site details  # noqa: E501

        Allows you to organize Zoom Phone users in your organization. Use this API to update information about a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672).   **Prerequisites:**   * Account must have a Pro or a higher plan with Zoom Phone license. * **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_details_with_http_info(site_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: Unique identifier of the site. (required)
        :param SitesSiteIdBody1 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_policy(self, site_id, policy_type, **kwargs):  # noqa: E501
        """Update site policy  # noqa: E501

        Use this API to update a site's [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) policy.  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_policy(site_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str policy_type: The site policy type: `restricted_call_hours`, `allowed_call_locations`. (required)
        :param PoliciesPolicyTypeBody5 body:
        :param str sub_policy_type: The sub policy type: `restricted_holiday_hours`, `allowed_call_locations_places`.  The `restricted_holiday_hours` sub policy type is for policy type `restricted_call_hours`.  The `allowed_call_locations_places` sub policy type is for policy type `allowed_call_locations`.
        :param str holiday_hours_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `restricted_holiday_hours`.
        :param str locations_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `allowed_call_locations_places`.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_policy_with_http_info(site_id, policy_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_policy_with_http_info(site_id, policy_type, **kwargs)  # noqa: E501
            return data

    def update_site_policy_with_http_info(self, site_id, policy_type, **kwargs):  # noqa: E501
        """Update site policy  # noqa: E501

        Use this API to update a site's [Zoom Phone](https://support.zoom.us/hc/en-us/categories/360001370051-Zoom-Phone) policy.  **Scopes:** `phone:write:admin`<br>**[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  **Prerequisites:**  * A Business or Enterprise account  * A Zoom Phone license  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_policy_with_http_info(site_id, policy_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str policy_type: The site policy type: `restricted_call_hours`, `allowed_call_locations`. (required)
        :param PoliciesPolicyTypeBody5 body:
        :param str sub_policy_type: The sub policy type: `restricted_holiday_hours`, `allowed_call_locations_places`.  The `restricted_holiday_hours` sub policy type is for policy type `restricted_call_hours`.  The `allowed_call_locations_places` sub policy type is for policy type `allowed_call_locations`.
        :param str holiday_hours_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `restricted_holiday_hours`.
        :param str locations_site_id: The unique identifier of the [site](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for sub policy type `allowed_call_locations_places`.
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'policy_type', 'body', 'sub_policy_type', 'holiday_hours_site_id', 'locations_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site_policy`")  # noqa: E501
        # verify the required parameter 'policy_type' is set
        if ('policy_type' not in params or
                params['policy_type'] is None):
            raise ValueError("Missing the required parameter `policy_type` when calling `update_site_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'policy_type' in params:
            path_params['policyType'] = params['policy_type']  # noqa: E501

        query_params = []
        if 'sub_policy_type' in params:
            query_params.append(('sub_policy_type', params['sub_policy_type']))  # noqa: E501
        if 'holiday_hours_site_id' in params:
            query_params.append(('holiday_hours_site_id', params['holiday_hours_site_id']))  # noqa: E501
        if 'locations_site_id' in params:
            query_params.append(('locations_site_id', params['locations_site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/policies/{policyType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_site_setting(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Update the site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to update the site setting of a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_setting(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `local_based_routing`  * `business_hours`  * `closed_hours`  * `holiday_hours` * `outbound_caller_id`  * `audio_prompt`  * `desk_phone`  * `dial_by_name`  * `billing_account` (required)
        :param SettingsSettingTypeBody5 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
        else:
            (data) = self.update_site_setting_with_http_info(site_id, setting_type, **kwargs)  # noqa: E501
            return data

    def update_site_setting_with_http_info(self, site_id, setting_type, **kwargs):  # noqa: E501
        """Update the site setting  # noqa: E501

        Sites allow you to organize Zoom Phone users in your organization. Use this API to update the site setting of a specific [site](https://support.zoom.us/hc/en-us/articles/360020809672) according to the setting type.  **Prerequisites:**  * Account must have a Pro or a higher plan with Zoom Phone license. * Multiple sites must be [enabled](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_05c88e35-1593-491f-b1a8-b7139a75dc15).  **Scope:** `phone:write:admin`    **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Light`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_site_setting_with_http_info(site_id, setting_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_id: The site ID. (required)
        :param str setting_type: The site setting type:  * `local_based_routing`  * `business_hours`  * `closed_hours`  * `holiday_hours` * `outbound_caller_id`  * `audio_prompt`  * `desk_phone`  * `dial_by_name`  * `billing_account` (required)
        :param SettingsSettingTypeBody5 body:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'setting_type', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_site_setting" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `update_site_setting`")  # noqa: E501
        # verify the required parameter 'setting_type' is set
        if ('setting_type' not in params or
                params['setting_type'] is None):
            raise ValueError("Missing the required parameter `setting_type` when calling `update_site_setting`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'site_id' in params:
            path_params['siteId'] = params['site_id']  # noqa: E501
        if 'setting_type' in params:
            path_params['settingType'] = params['setting_type']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sites/{siteId}/settings/{settingType}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
