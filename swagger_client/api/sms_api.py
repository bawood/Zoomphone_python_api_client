# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class SMSApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_sms_session(self, **kwargs):  # noqa: E501
        """Get account's SMS sessions  # noqa: E501

        Get details about SMS sessions for an account.  **Scopes:** `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_sms_session(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param str phone_number: Either the sender's or receiver's phone number, to limit the list of SMS sessions.
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_sms_session_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_sms_session_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_sms_session_with_http_info(self, **kwargs):  # noqa: E501
        """Get account's SMS sessions  # noqa: E501

        Get details about SMS sessions for an account.  **Scopes:** `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_sms_session_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param str phone_number: Either the sender's or receiver's phone number, to limit the list of SMS sessions.
        :return: InlineResponse20073
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page_size', 'next_page_token', '_from', 'to', 'phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_sms_session" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phone_number', params['phone_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sms/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20073',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sms_sessions(self, user_id, sync_type, **kwargs):  # noqa: E501
        """List user's SMS sessions in descending order  # noqa: E501

        Use this API to retrieve user's SMS sessions in descending order. Mirrors the ZP client behavior with the most recent on top.  **Prerequisites:** * Paid account  * User-enabled Zoom phone   **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **Rate Limit Label:** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sms_sessions(user_id, sync_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User ID, user email, or “me” if using OAuth token. (required)
        :param str sync_type: FSync: Full sync BSync: Backward sync ISync: Forward sync (required)
        :param str sync_token: Sync token. Use if requesting a backward (`BSync`) or forward (`ISync`) sync.
        :param int count: Record count of each query
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_sms_sessions_with_http_info(user_id, sync_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sms_sessions_with_http_info(user_id, sync_type, **kwargs)  # noqa: E501
            return data

    def get_sms_sessions_with_http_info(self, user_id, sync_type, **kwargs):  # noqa: E501
        """List user's SMS sessions in descending order  # noqa: E501

        Use this API to retrieve user's SMS sessions in descending order. Mirrors the ZP client behavior with the most recent on top.  **Prerequisites:** * Paid account  * User-enabled Zoom phone   **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **Rate Limit Label:** `Medium`  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_sms_sessions_with_http_info(user_id, sync_type, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User ID, user email, or “me” if using OAuth token. (required)
        :param str sync_type: FSync: Full sync BSync: Backward sync ISync: Forward sync (required)
        :param str sync_token: Sync token. Use if requesting a backward (`BSync`) or forward (`ISync`) sync.
        :param int count: Record count of each query
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'sync_type', 'sync_token', 'count']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sms_sessions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `get_sms_sessions`")  # noqa: E501
        # verify the required parameter 'sync_type' is set
        if ('sync_type' not in params or
                params['sync_type'] is None):
            raise ValueError("Missing the required parameter `sync_type` when calling `get_sms_sessions`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'sync_type' in params:
            query_params.append(('sync_type', params['sync_type']))  # noqa: E501
        if 'sync_token' in params:
            query_params.append(('sync_token', params['sync_token']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/users/{userId}/sms/sessions/sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sms_by_message_id(self, session_id, message_id, **kwargs):  # noqa: E501
        """Get SMS by message ID  # noqa: E501

        Get details about a specific message in an SMS session.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_by_message_id(session_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The SMS session ID. (required)
        :param str message_id: The SMS message ID. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sms_by_message_id_with_http_info(session_id, message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sms_by_message_id_with_http_info(session_id, message_id, **kwargs)  # noqa: E501
            return data

    def sms_by_message_id_with_http_info(self, session_id, message_id, **kwargs):  # noqa: E501
        """Get SMS by message ID  # noqa: E501

        Get details about a specific message in an SMS session.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_by_message_id_with_http_info(session_id, message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: The SMS session ID. (required)
        :param str message_id: The SMS message ID. (required)
        :return: InlineResponse20076
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sms_by_message_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sms_by_message_id`")  # noqa: E501
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `sms_by_message_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sms/sessions/{sessionId}/messages/{messageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20076',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sms_session_details(self, session_id, **kwargs):  # noqa: E501
        """Get SMS session details  # noqa: E501

        Get details about an SMS session.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_session_details(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: SMS session ID. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param int sort: Order of SMS to return based on creation time. `1`: ascending `2`: descending
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sms_session_details_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sms_session_details_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def sms_session_details_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Get SMS session details  # noqa: E501

        Get details about an SMS session.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_session_details_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: SMS session ID. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param int sort: Order of SMS to return based on creation time. `1`: ascending `2`: descending
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'page_size', 'next_page_token', '_from', 'to', 'sort']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sms_session_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sms_session_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'sort' in params:
            query_params.append(('sort', params['sort']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sms/sessions/{sessionId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def sms_session_sync(self, session_id, **kwargs):  # noqa: E501
        """Sync SMS by session ID  # noqa: E501

        Use this API to sync SMS messages in a session.   **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_session_sync(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: SMS session ID. (required)
        :param str sync_type: Options for synchronizing sms message:<br> FSync - Full sync<br> ISync - Increase sync<br> BSync - Backward sync
        :param int count: The number of records returned within a single API call.
        :param str sync_token: The time range for returned records. Used for locating where the next retrieval will begin.
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.sms_session_sync_with_http_info(session_id, **kwargs)  # noqa: E501
        else:
            (data) = self.sms_session_sync_with_http_info(session_id, **kwargs)  # noqa: E501
            return data

    def sms_session_sync_with_http_info(self, session_id, **kwargs):  # noqa: E501
        """Sync SMS by session ID  # noqa: E501

        Use this API to sync SMS messages in a session.   **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Medium`  **Prerequisites** * Paid account * User-enabled Zoom phone    # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.sms_session_sync_with_http_info(session_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str session_id: SMS session ID. (required)
        :param str sync_type: Options for synchronizing sms message:<br> FSync - Full sync<br> ISync - Increase sync<br> BSync - Backward sync
        :param int count: The number of records returned within a single API call.
        :param str sync_token: The time range for returned records. Used for locating where the next retrieval will begin.
        :return: InlineResponse20075
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['session_id', 'sync_type', 'count', 'sync_token']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method sms_session_sync" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'session_id' is set
        if ('session_id' not in params or
                params['session_id'] is None):
            raise ValueError("Missing the required parameter `session_id` when calling `sms_session_sync`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'session_id' in params:
            path_params['sessionId'] = params['session_id']  # noqa: E501

        query_params = []
        if 'sync_type' in params:
            query_params.append(('sync_type', params['sync_type']))  # noqa: E501
        if 'count' in params:
            query_params.append(('count', params['count']))  # noqa: E501
        if 'sync_token' in params:
            query_params.append(('sync_token', params['sync_token']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/sms/sessions/{sessionId}/sync', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20075',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def user_sms_session(self, user_id, **kwargs):  # noqa: E501
        """Get user's SMS sessions  # noqa: E501

        Get details about SMS sessions for a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites:**  * Paid account  * User-enabled Zoom phone  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sms_session(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User ID, user email, or “me” if using OAuth token. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param str phone_number: Either the sender's or receiver's phone number, to limit the list of SMS sessions.
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.user_sms_session_with_http_info(user_id, **kwargs)  # noqa: E501
        else:
            (data) = self.user_sms_session_with_http_info(user_id, **kwargs)  # noqa: E501
            return data

    def user_sms_session_with_http_info(self, user_id, **kwargs):  # noqa: E501
        """Get user's SMS sessions  # noqa: E501

        Get details about SMS sessions for a user. For user-level apps, pass [the `me` value](https://marketplace.zoom.us/docs/api-reference/using-zoom-apis#mekeyword) instead of the `userId` parameter.  **Scopes:** `phone_sms:read`, `phone_sms:read:admin`, `phone_sms:master`  **[Rate Limit Label](https://developers.zoom.us/docs/api/rest/rate-limits/):** `Heavy`  **Prerequisites:**  * Paid account  * User-enabled Zoom phone  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.user_sms_session_with_http_info(user_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_id: User ID, user email, or “me” if using OAuth token. (required)
        :param int page_size: The number of records returned within a single API call.
        :param str next_page_token: The current page number of returned records.
        :param date _from: The start time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format. The date range defined by the `from` and `to` parameters should be a month as the response only includes one month's worth of data at once. If unspecified, returns data from the past 30 days.
        :param date to: **Required** only when the `from` parameter is specified. End time and date in **yyyy-mm-dd** or **yyyy-MM-dd'T'HH:mm:ss'Z'** format, the same format as the `from` parameter.
        :param str phone_number: Either the sender's or receiver's phone number, to limit the list of SMS sessions.
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_id', 'page_size', 'next_page_token', '_from', 'to', 'phone_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method user_sms_session" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_id' is set
        if ('user_id' not in params or
                params['user_id'] is None):
            raise ValueError("Missing the required parameter `user_id` when calling `user_sms_session`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'user_id' in params:
            path_params['userId'] = params['user_id']  # noqa: E501

        query_params = []
        if 'page_size' in params:
            query_params.append(('page_size', params['page_size']))  # noqa: E501
        if 'next_page_token' in params:
            query_params.append(('next_page_token', params['next_page_token']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'phone_number' in params:
            query_params.append(('phone_number', params['phone_number']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth']  # noqa: E501

        return self.api_client.call_api(
            '/phone/users/{userId}/sms/sessions', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20088',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
