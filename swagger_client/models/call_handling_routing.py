# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallHandlingRouting(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'int',
        'forward_to': 'CallHandlingRoutingForwardTo',
        'operator': 'CallHandlingRoutingOperator',
        'connect_to_operator': 'bool',
        'allow_callers_check_voicemail': 'bool',
        'voicemail_greeting': 'CallHandlingRoutingVoicemailGreeting',
        'require_press_1_before_connecting': 'bool',
        'overflow_play_callee_voicemail_greeting': 'bool',
        'play_callee_voicemail_greeting': 'bool',
        'busy_play_callee_voicemail_greeting': 'bool'
    }

    attribute_map = {
        'action': 'action',
        'forward_to': 'forward_to',
        'operator': 'operator',
        'connect_to_operator': 'connect_to_operator',
        'allow_callers_check_voicemail': 'allow_callers_check_voicemail',
        'voicemail_greeting': 'voicemail_greeting',
        'require_press_1_before_connecting': 'require_press_1_before_connecting',
        'overflow_play_callee_voicemail_greeting': 'overflow_play_callee_voicemail_greeting',
        'play_callee_voicemail_greeting': 'play_callee_voicemail_greeting',
        'busy_play_callee_voicemail_greeting': 'busy_play_callee_voicemail_greeting'
    }

    def __init__(self, action=None, forward_to=None, operator=None, connect_to_operator=None, allow_callers_check_voicemail=None, voicemail_greeting=None, require_press_1_before_connecting=None, overflow_play_callee_voicemail_greeting=None, play_callee_voicemail_greeting=None, busy_play_callee_voicemail_greeting=None):  # noqa: E501
        """CallHandlingRouting - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._forward_to = None
        self._operator = None
        self._connect_to_operator = None
        self._allow_callers_check_voicemail = None
        self._voicemail_greeting = None
        self._require_press_1_before_connecting = None
        self._overflow_play_callee_voicemail_greeting = None
        self._play_callee_voicemail_greeting = None
        self._busy_play_callee_voicemail_greeting = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if forward_to is not None:
            self.forward_to = forward_to
        if operator is not None:
            self.operator = operator
        if connect_to_operator is not None:
            self.connect_to_operator = connect_to_operator
        if allow_callers_check_voicemail is not None:
            self.allow_callers_check_voicemail = allow_callers_check_voicemail
        if voicemail_greeting is not None:
            self.voicemail_greeting = voicemail_greeting
        if require_press_1_before_connecting is not None:
            self.require_press_1_before_connecting = require_press_1_before_connecting
        if overflow_play_callee_voicemail_greeting is not None:
            self.overflow_play_callee_voicemail_greeting = overflow_play_callee_voicemail_greeting
        if play_callee_voicemail_greeting is not None:
            self.play_callee_voicemail_greeting = play_callee_voicemail_greeting
        if busy_play_callee_voicemail_greeting is not None:
            self.busy_play_callee_voicemail_greeting = busy_play_callee_voicemail_greeting

    @property
    def action(self):
        """Gets the action of this CallHandlingRouting.  # noqa: E501

        The extension's forwarding or overflow information. For `call_not_answered`:  * `1` — Forward to a voicemail/videomail.  * `2` - Forward to the user.  * `4` - Forward to the common area.  * `6` - Forward to the auto receptionist.  * `7` - Forward to a call queue.  * `8` - Forward to a shared line group.  * `9` - Forward to an external contact.  * `10` - Forward to an external number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  For `busy_on_another_call_action`:  * `21` - Call waiting.  * `22` - Play a busy signal.  * `1` — Forward to a voicemail/videomail.  * `2` - Forward to the user.  * `4` - Forward to the common area.  * `6` - Forward to the auto receptionist.  * `7` - Forward to a call queue.  * `8` - Forward to a shared line group.  * `9` - Forward to an external contact.  * `10` - Forward to an external number.  * `12` — Play a message, then disconnect.  # noqa: E501

        :return: The action of this CallHandlingRouting.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this CallHandlingRouting.

        The extension's forwarding or overflow information. For `call_not_answered`:  * `1` — Forward to a voicemail/videomail.  * `2` - Forward to the user.  * `4` - Forward to the common area.  * `6` - Forward to the auto receptionist.  * `7` - Forward to a call queue.  * `8` - Forward to a shared line group.  * `9` - Forward to an external contact.  * `10` - Forward to an external number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  For `busy_on_another_call_action`:  * `21` - Call waiting.  * `22` - Play a busy signal.  * `1` — Forward to a voicemail/videomail.  * `2` - Forward to the user.  * `4` - Forward to the common area.  * `6` - Forward to the auto receptionist.  * `7` - Forward to a call queue.  * `8` - Forward to a shared line group.  * `9` - Forward to an external contact.  * `10` - Forward to an external number.  * `12` — Play a message, then disconnect.  # noqa: E501

        :param action: The action of this CallHandlingRouting.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def forward_to(self):
        """Gets the forward_to of this CallHandlingRouting.  # noqa: E501


        :return: The forward_to of this CallHandlingRouting.  # noqa: E501
        :rtype: CallHandlingRoutingForwardTo
        """
        return self._forward_to

    @forward_to.setter
    def forward_to(self, forward_to):
        """Sets the forward_to of this CallHandlingRouting.


        :param forward_to: The forward_to of this CallHandlingRouting.  # noqa: E501
        :type: CallHandlingRoutingForwardTo
        """

        self._forward_to = forward_to

    @property
    def operator(self):
        """Gets the operator of this CallHandlingRouting.  # noqa: E501


        :return: The operator of this CallHandlingRouting.  # noqa: E501
        :rtype: CallHandlingRoutingOperator
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this CallHandlingRouting.


        :param operator: The operator of this CallHandlingRouting.  # noqa: E501
        :type: CallHandlingRoutingOperator
        """

        self._operator = operator

    @property
    def connect_to_operator(self):
        """Gets the connect_to_operator of this CallHandlingRouting.  # noqa: E501

        Whether to allow callers to reach an operator. Returned only for the `user` and `call_handling` subsetting. Displayed when the `call_not_answer_action` setting or `busy_on_another_call_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The connect_to_operator of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._connect_to_operator

    @connect_to_operator.setter
    def connect_to_operator(self, connect_to_operator):
        """Sets the connect_to_operator of this CallHandlingRouting.

        Whether to allow callers to reach an operator. Returned only for the `user` and `call_handling` subsetting. Displayed when the `call_not_answer_action` setting or `busy_on_another_call_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :param connect_to_operator: The connect_to_operator of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._connect_to_operator = connect_to_operator

    @property
    def allow_callers_check_voicemail(self):
        """Gets the allow_callers_check_voicemail of this CallHandlingRouting.  # noqa: E501

        Whether to allow the callers to check voicemails over a phone. Returned only for the `user` and `call_handling` subsetting. Displayed when the `call_not_answer_action` setting or `busy_on_another_call_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The allow_callers_check_voicemail of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._allow_callers_check_voicemail

    @allow_callers_check_voicemail.setter
    def allow_callers_check_voicemail(self, allow_callers_check_voicemail):
        """Sets the allow_callers_check_voicemail of this CallHandlingRouting.

        Whether to allow the callers to check voicemails over a phone. Returned only for the `user` and `call_handling` subsetting. Displayed when the `call_not_answer_action` setting or `busy_on_another_call_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :param allow_callers_check_voicemail: The allow_callers_check_voicemail of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._allow_callers_check_voicemail = allow_callers_check_voicemail

    @property
    def voicemail_greeting(self):
        """Gets the voicemail_greeting of this CallHandlingRouting.  # noqa: E501


        :return: The voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :rtype: CallHandlingRoutingVoicemailGreeting
        """
        return self._voicemail_greeting

    @voicemail_greeting.setter
    def voicemail_greeting(self, voicemail_greeting):
        """Sets the voicemail_greeting of this CallHandlingRouting.


        :param voicemail_greeting: The voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :type: CallHandlingRoutingVoicemailGreeting
        """

        self._voicemail_greeting = voicemail_greeting

    @property
    def require_press_1_before_connecting(self):
        """Gets the require_press_1_before_connecting of this CallHandlingRouting.  # noqa: E501

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. This helps to ensure that missed calls do not reach to your personal voicemail. Returned for the `Forward to an external number` and `Forward to External Contacts` options.  # noqa: E501

        :return: The require_press_1_before_connecting of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._require_press_1_before_connecting

    @require_press_1_before_connecting.setter
    def require_press_1_before_connecting(self, require_press_1_before_connecting):
        """Sets the require_press_1_before_connecting of this CallHandlingRouting.

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. This helps to ensure that missed calls do not reach to your personal voicemail. Returned for the `Forward to an external number` and `Forward to External Contacts` options.  # noqa: E501

        :param require_press_1_before_connecting: The require_press_1_before_connecting of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._require_press_1_before_connecting = require_press_1_before_connecting

    @property
    def overflow_play_callee_voicemail_greeting(self):
        """Gets the overflow_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `call_not_answer_action` set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :return: The overflow_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._overflow_play_callee_voicemail_greeting

    @overflow_play_callee_voicemail_greeting.setter
    def overflow_play_callee_voicemail_greeting(self, overflow_play_callee_voicemail_greeting):
        """Sets the overflow_play_callee_voicemail_greeting of this CallHandlingRouting.

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `call_not_answer_action` set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :param overflow_play_callee_voicemail_greeting: The overflow_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._overflow_play_callee_voicemail_greeting = overflow_play_callee_voicemail_greeting

    @property
    def play_callee_voicemail_greeting(self):
        """Gets the play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_routing` action or `call_not_answer_action` set to `1` - Forward to a voicemail.  # noqa: E501

        :return: The play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._play_callee_voicemail_greeting

    @play_callee_voicemail_greeting.setter
    def play_callee_voicemail_greeting(self, play_callee_voicemail_greeting):
        """Sets the play_callee_voicemail_greeting of this CallHandlingRouting.

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_routing` action or `call_not_answer_action` set to `1` - Forward to a voicemail.  # noqa: E501

        :param play_callee_voicemail_greeting: The play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._play_callee_voicemail_greeting = play_callee_voicemail_greeting

    @property
    def busy_play_callee_voicemail_greeting(self):
        """Gets the busy_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_routing` action set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :return: The busy_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :rtype: bool
        """
        return self._busy_play_callee_voicemail_greeting

    @busy_play_callee_voicemail_greeting.setter
    def busy_play_callee_voicemail_greeting(self, busy_play_callee_voicemail_greeting):
        """Sets the busy_play_callee_voicemail_greeting of this CallHandlingRouting.

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_routing` action set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :param busy_play_callee_voicemail_greeting: The busy_play_callee_voicemail_greeting of this CallHandlingRouting.  # noqa: E501
        :type: bool
        """

        self._busy_play_callee_voicemail_greeting = busy_play_callee_voicemail_greeting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallHandlingRouting, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallHandlingRouting):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
