# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200102Versions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'update_log': 'str',
        'expire_time': 'str',
        'status': 'int'
    }

    attribute_map = {
        'version': 'version',
        'update_log': 'update_log',
        'expire_time': 'expire_time',
        'status': 'status'
    }

    def __init__(self, version=None, update_log=None, expire_time=None, status=None):  # noqa: E501
        """InlineResponse200102Versions - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._update_log = None
        self._expire_time = None
        self._status = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if update_log is not None:
            self.update_log = update_log
        if expire_time is not None:
            self.expire_time = expire_time
        if status is not None:
            self.status = status

    @property
    def version(self):
        """Gets the version of this InlineResponse200102Versions.  # noqa: E501

        Firmware version.  # noqa: E501

        :return: The version of this InlineResponse200102Versions.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this InlineResponse200102Versions.

        Firmware version.  # noqa: E501

        :param version: The version of this InlineResponse200102Versions.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def update_log(self):
        """Gets the update_log of this InlineResponse200102Versions.  # noqa: E501

        The update log.  # noqa: E501

        :return: The update_log of this InlineResponse200102Versions.  # noqa: E501
        :rtype: str
        """
        return self._update_log

    @update_log.setter
    def update_log(self, update_log):
        """Sets the update_log of this InlineResponse200102Versions.

        The update log.  # noqa: E501

        :param update_log: The update_log of this InlineResponse200102Versions.  # noqa: E501
        :type: str
        """

        self._update_log = update_log

    @property
    def expire_time(self):
        """Gets the expire_time of this InlineResponse200102Versions.  # noqa: E501

        Expire time.  # noqa: E501

        :return: The expire_time of this InlineResponse200102Versions.  # noqa: E501
        :rtype: str
        """
        return self._expire_time

    @expire_time.setter
    def expire_time(self, expire_time):
        """Sets the expire_time of this InlineResponse200102Versions.

        Expire time.  # noqa: E501

        :param expire_time: The expire_time of this InlineResponse200102Versions.  # noqa: E501
        :type: str
        """

        self._expire_time = expire_time

    @property
    def status(self):
        """Gets the status of this InlineResponse200102Versions.  # noqa: E501

        Version status:  * `1` — Available.  * `2` — Unavailable.  * `3` — Sunset  # noqa: E501

        :return: The status of this InlineResponse200102Versions.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200102Versions.

        Version status:  * `1` — Available.  * `2` — Unavailable.  * `3` — Sunset  # noqa: E501

        :param status: The status of this InlineResponse200102Versions.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200102Versions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200102Versions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
