# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse200108(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'status': 'str',
        'service_type': 'str',
        'brand': 'InlineResponse200107Brand',
        'phone_numbers': 'list[InlineResponse200108PhoneNumbers]',
        'auto_renew': 'bool',
        'create_time': 'str',
        'use_case': 'str',
        'categories_fit': 'bool',
        'content_type': 'list[str]',
        'sample_message_1': 'str',
        'sample_message_2': 'str',
        'sample_message_3': 'str',
        'sample_message_4': 'str',
        'sample_message_5': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'status': 'status',
        'service_type': 'service_type',
        'brand': 'brand',
        'phone_numbers': 'phone_numbers',
        'auto_renew': 'auto_renew',
        'create_time': 'create_time',
        'use_case': 'use_case',
        'categories_fit': 'categories_fit',
        'content_type': 'content_type',
        'sample_message_1': 'sample_message_1',
        'sample_message_2': 'sample_message_2',
        'sample_message_3': 'sample_message_3',
        'sample_message_4': 'sample_message_4',
        'sample_message_5': 'sample_message_5'
    }

    def __init__(self, id=None, display_name=None, status=None, service_type=None, brand=None, phone_numbers=None, auto_renew=None, create_time=None, use_case=None, categories_fit=None, content_type=None, sample_message_1=None, sample_message_2=None, sample_message_3=None, sample_message_4=None, sample_message_5=None):  # noqa: E501
        """InlineResponse200108 - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._status = None
        self._service_type = None
        self._brand = None
        self._phone_numbers = None
        self._auto_renew = None
        self._create_time = None
        self._use_case = None
        self._categories_fit = None
        self._content_type = None
        self._sample_message_1 = None
        self._sample_message_2 = None
        self._sample_message_3 = None
        self._sample_message_4 = None
        self._sample_message_5 = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if status is not None:
            self.status = status
        if service_type is not None:
            self.service_type = service_type
        if brand is not None:
            self.brand = brand
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if auto_renew is not None:
            self.auto_renew = auto_renew
        if create_time is not None:
            self.create_time = create_time
        if use_case is not None:
            self.use_case = use_case
        if categories_fit is not None:
            self.categories_fit = categories_fit
        if content_type is not None:
            self.content_type = content_type
        if sample_message_1 is not None:
            self.sample_message_1 = sample_message_1
        if sample_message_2 is not None:
            self.sample_message_2 = sample_message_2
        if sample_message_3 is not None:
            self.sample_message_3 = sample_message_3
        if sample_message_4 is not None:
            self.sample_message_4 = sample_message_4
        if sample_message_5 is not None:
            self.sample_message_5 = sample_message_5

    @property
    def id(self):
        """Gets the id of this InlineResponse200108.  # noqa: E501

        The campaign ID.  # noqa: E501

        :return: The id of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse200108.

        The campaign ID.  # noqa: E501

        :param id: The id of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse200108.  # noqa: E501

        The display name for the SMS campaign.  # noqa: E501

        :return: The display_name of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse200108.

        The display name for the SMS campaign.  # noqa: E501

        :param display_name: The display_name of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def status(self):
        """Gets the status of this InlineResponse200108.  # noqa: E501

        The status of the SMS campaign. Returns `--` if the campaign is in an exception status.  # noqa: E501

        :return: The status of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse200108.

        The status of the SMS campaign. Returns `--` if the campaign is in an exception status.  # noqa: E501

        :param status: The status of this InlineResponse200108.  # noqa: E501
        :type: str
        """
        allowed_values = ["draft", "active", "expired", "pending", "declined", "--"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def service_type(self):
        """Gets the service_type of this InlineResponse200108.  # noqa: E501

        Which service the campaign is used for.  # noqa: E501

        :return: The service_type of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._service_type

    @service_type.setter
    def service_type(self, service_type):
        """Sets the service_type of this InlineResponse200108.

        Which service the campaign is used for.  # noqa: E501

        :param service_type: The service_type of this InlineResponse200108.  # noqa: E501
        :type: str
        """
        allowed_values = ["zoomPhone", "contactCenter"]  # noqa: E501
        if service_type not in allowed_values:
            raise ValueError(
                "Invalid value for `service_type` ({0}), must be one of {1}"  # noqa: E501
                .format(service_type, allowed_values)
            )

        self._service_type = service_type

    @property
    def brand(self):
        """Gets the brand of this InlineResponse200108.  # noqa: E501


        :return: The brand of this InlineResponse200108.  # noqa: E501
        :rtype: InlineResponse200107Brand
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this InlineResponse200108.


        :param brand: The brand of this InlineResponse200108.  # noqa: E501
        :type: InlineResponse200107Brand
        """

        self._brand = brand

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this InlineResponse200108.  # noqa: E501

        Assigned phone numbers.  # noqa: E501

        :return: The phone_numbers of this InlineResponse200108.  # noqa: E501
        :rtype: list[InlineResponse200108PhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this InlineResponse200108.

        Assigned phone numbers.  # noqa: E501

        :param phone_numbers: The phone_numbers of this InlineResponse200108.  # noqa: E501
        :type: list[InlineResponse200108PhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def auto_renew(self):
        """Gets the auto_renew of this InlineResponse200108.  # noqa: E501

        Whether to keep the SMS capabilities for all phone numbers associated with this campaign. If 'false', the campaign will expire 90 days from the creation date.  # noqa: E501

        :return: The auto_renew of this InlineResponse200108.  # noqa: E501
        :rtype: bool
        """
        return self._auto_renew

    @auto_renew.setter
    def auto_renew(self, auto_renew):
        """Sets the auto_renew of this InlineResponse200108.

        Whether to keep the SMS capabilities for all phone numbers associated with this campaign. If 'false', the campaign will expire 90 days from the creation date.  # noqa: E501

        :param auto_renew: The auto_renew of this InlineResponse200108.  # noqa: E501
        :type: bool
        """

        self._auto_renew = auto_renew

    @property
    def create_time(self):
        """Gets the create_time of this InlineResponse200108.  # noqa: E501

        The creation time of the campaign.  # noqa: E501

        :return: The create_time of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._create_time

    @create_time.setter
    def create_time(self, create_time):
        """Sets the create_time of this InlineResponse200108.

        The creation time of the campaign.  # noqa: E501

        :param create_time: The create_time of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._create_time = create_time

    @property
    def use_case(self):
        """Gets the use_case of this InlineResponse200108.  # noqa: E501

        What will you be using these campaigns for.  # noqa: E501

        :return: The use_case of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._use_case

    @use_case.setter
    def use_case(self, use_case):
        """Sets the use_case of this InlineResponse200108.

        What will you be using these campaigns for.  # noqa: E501

        :param use_case: The use_case of this InlineResponse200108.  # noqa: E501
        :type: str
        """
        allowed_values = ["lowVolumeMixed"]  # noqa: E501
        if use_case not in allowed_values:
            raise ValueError(
                "Invalid value for `use_case` ({0}), must be one of {1}"  # noqa: E501
                .format(use_case, allowed_values)
            )

        self._use_case = use_case

    @property
    def categories_fit(self):
        """Gets the categories_fit of this InlineResponse200108.  # noqa: E501

        Whether *all* customer-facing messages fit into the categories `Account Notifications`, `Customer Care`, `Delivery Notifications`, `Marketing`, and `Public Service Announcements`.  # noqa: E501

        :return: The categories_fit of this InlineResponse200108.  # noqa: E501
        :rtype: bool
        """
        return self._categories_fit

    @categories_fit.setter
    def categories_fit(self, categories_fit):
        """Sets the categories_fit of this InlineResponse200108.

        Whether *all* customer-facing messages fit into the categories `Account Notifications`, `Customer Care`, `Delivery Notifications`, `Marketing`, and `Public Service Announcements`.  # noqa: E501

        :param categories_fit: The categories_fit of this InlineResponse200108.  # noqa: E501
        :type: bool
        """

        self._categories_fit = categories_fit

    @property
    def content_type(self):
        """Gets the content_type of this InlineResponse200108.  # noqa: E501

        The message's content type.  # noqa: E501

        :return: The content_type of this InlineResponse200108.  # noqa: E501
        :rtype: list[str]
        """
        return self._content_type

    @content_type.setter
    def content_type(self, content_type):
        """Sets the content_type of this InlineResponse200108.

        The message's content type.  # noqa: E501

        :param content_type: The content_type of this InlineResponse200108.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["urlLink", "phoneNumber", "ageGated", "lending"]  # noqa: E501
        if not set(content_type).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `content_type` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(content_type) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._content_type = content_type

    @property
    def sample_message_1(self):
        """Gets the sample_message_1 of this InlineResponse200108.  # noqa: E501

        The sample message 1.  # noqa: E501

        :return: The sample_message_1 of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._sample_message_1

    @sample_message_1.setter
    def sample_message_1(self, sample_message_1):
        """Sets the sample_message_1 of this InlineResponse200108.

        The sample message 1.  # noqa: E501

        :param sample_message_1: The sample_message_1 of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._sample_message_1 = sample_message_1

    @property
    def sample_message_2(self):
        """Gets the sample_message_2 of this InlineResponse200108.  # noqa: E501

        The sample message 2.  # noqa: E501

        :return: The sample_message_2 of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._sample_message_2

    @sample_message_2.setter
    def sample_message_2(self, sample_message_2):
        """Sets the sample_message_2 of this InlineResponse200108.

        The sample message 2.  # noqa: E501

        :param sample_message_2: The sample_message_2 of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._sample_message_2 = sample_message_2

    @property
    def sample_message_3(self):
        """Gets the sample_message_3 of this InlineResponse200108.  # noqa: E501

        The sample message 3.  # noqa: E501

        :return: The sample_message_3 of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._sample_message_3

    @sample_message_3.setter
    def sample_message_3(self, sample_message_3):
        """Sets the sample_message_3 of this InlineResponse200108.

        The sample message 3.  # noqa: E501

        :param sample_message_3: The sample_message_3 of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._sample_message_3 = sample_message_3

    @property
    def sample_message_4(self):
        """Gets the sample_message_4 of this InlineResponse200108.  # noqa: E501

        The sample message 4.  # noqa: E501

        :return: The sample_message_4 of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._sample_message_4

    @sample_message_4.setter
    def sample_message_4(self, sample_message_4):
        """Sets the sample_message_4 of this InlineResponse200108.

        The sample message 4.  # noqa: E501

        :param sample_message_4: The sample_message_4 of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._sample_message_4 = sample_message_4

    @property
    def sample_message_5(self):
        """Gets the sample_message_5 of this InlineResponse200108.  # noqa: E501

        The sample message 5.  # noqa: E501

        :return: The sample_message_5 of this InlineResponse200108.  # noqa: E501
        :rtype: str
        """
        return self._sample_message_5

    @sample_message_5.setter
    def sample_message_5(self, sample_message_5):
        """Sets the sample_message_5 of this InlineResponse200108.

        The sample message 5.  # noqa: E501

        :param sample_message_5: The sample_message_5 of this InlineResponse200108.  # noqa: E501
        :type: str
        """

        self._sample_message_5 = sample_message_5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse200108, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse200108):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
