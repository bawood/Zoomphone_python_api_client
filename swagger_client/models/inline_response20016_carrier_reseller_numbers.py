# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20016CarrierResellerNumbers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_status': 'str',
        'carrier_code': 'int',
        'country_iso_code': 'str',
        'phone_number': 'str',
        'status': 'str',
        'sub_account_id': 'str',
        'sub_account_name': 'str'
    }

    attribute_map = {
        'assigned_status': 'assigned_status',
        'carrier_code': 'carrier_code',
        'country_iso_code': 'country_iso_code',
        'phone_number': 'phone_number',
        'status': 'status',
        'sub_account_id': 'sub_account_id',
        'sub_account_name': 'sub_account_name'
    }

    def __init__(self, assigned_status=None, carrier_code=None, country_iso_code=None, phone_number=None, status=None, sub_account_id=None, sub_account_name=None):  # noqa: E501
        """InlineResponse20016CarrierResellerNumbers - a model defined in Swagger"""  # noqa: E501
        self._assigned_status = None
        self._carrier_code = None
        self._country_iso_code = None
        self._phone_number = None
        self._status = None
        self._sub_account_id = None
        self._sub_account_name = None
        self.discriminator = None
        if assigned_status is not None:
            self.assigned_status = assigned_status
        if carrier_code is not None:
            self.carrier_code = carrier_code
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if phone_number is not None:
            self.phone_number = phone_number
        if status is not None:
            self.status = status
        if sub_account_id is not None:
            self.sub_account_id = sub_account_id
        if sub_account_name is not None:
            self.sub_account_name = sub_account_name

    @property
    def assigned_status(self):
        """Gets the assigned_status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        Number assignment status.  # noqa: E501

        :return: The assigned_status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._assigned_status

    @assigned_status.setter
    def assigned_status(self, assigned_status):
        """Sets the assigned_status of this InlineResponse20016CarrierResellerNumbers.

        Number assignment status.  # noqa: E501

        :param assigned_status: The assigned_status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["assigned", "unassigned", "returned"]  # noqa: E501
        if assigned_status not in allowed_values:
            raise ValueError(
                "Invalid value for `assigned_status` ({0}), must be one of {1}"  # noqa: E501
                .format(assigned_status, allowed_values)
            )

        self._assigned_status = assigned_status

    @property
    def carrier_code(self):
        """Gets the carrier_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        Carrier reseller ID.  # noqa: E501

        :return: The carrier_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: int
        """
        return self._carrier_code

    @carrier_code.setter
    def carrier_code(self, carrier_code):
        """Sets the carrier_code of this InlineResponse20016CarrierResellerNumbers.

        Carrier reseller ID.  # noqa: E501

        :param carrier_code: The carrier_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: int
        """

        self._carrier_code = carrier_code

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        Two lettered country [code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).  # noqa: E501

        :return: The country_iso_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this InlineResponse20016CarrierResellerNumbers.

        Two lettered country [code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).  # noqa: E501

        :param country_iso_code: The country_iso_code of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        Phone number in E164 format.  # noqa: E501

        :return: The phone_number of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse20016CarrierResellerNumbers.

        Phone number in E164 format.  # noqa: E501

        :param phone_number: The phone_number of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def status(self):
        """Gets the status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        Status of phone number.  # noqa: E501

        :return: The status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20016CarrierResellerNumbers.

        Status of phone number.  # noqa: E501

        :param status: The status of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """
        allowed_values = ["inactive", "active"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def sub_account_id(self):
        """Gets the sub_account_id of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        `nullable` Partner account ID from sub-account.  # noqa: E501

        :return: The sub_account_id of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._sub_account_id

    @sub_account_id.setter
    def sub_account_id(self, sub_account_id):
        """Sets the sub_account_id of this InlineResponse20016CarrierResellerNumbers.

        `nullable` Partner account ID from sub-account.  # noqa: E501

        :param sub_account_id: The sub_account_id of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """

        self._sub_account_id = sub_account_id

    @property
    def sub_account_name(self):
        """Gets the sub_account_name of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501

        `nullable` Sub-account name.  # noqa: E501

        :return: The sub_account_name of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :rtype: str
        """
        return self._sub_account_name

    @sub_account_name.setter
    def sub_account_name(self, sub_account_name):
        """Sets the sub_account_name of this InlineResponse20016CarrierResellerNumbers.

        `nullable` Sub-account name.  # noqa: E501

        :param sub_account_name: The sub_account_name of this InlineResponse20016CarrierResellerNumbers.  # noqa: E501
        :type: str
        """

        self._sub_account_name = sub_account_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20016CarrierResellerNumbers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20016CarrierResellerNumbers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
