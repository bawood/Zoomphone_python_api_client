# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'calling_plans': 'list[InlineResponse20018CallingPlans]',
        'cost_center': 'str',
        'department': 'str',
        'device_type': 'str',
        'emergency_address': 'InlineResponse20018EmergencyAddress',
        'id': 'str',
        'mac_address': 'str',
        'name': 'str',
        'phone_numbers': 'list[InlineResponse20018PhoneNumbers]',
        'policy': 'InlineResponse20018Policy',
        'provision': 'InlineResponse20018Provision',
        'provision_template': 'InlineResponse20018ProvisionTemplate',
        'site': 'InlineResponse20017Site',
        'status': 'str',
        'common_area_optimized': 'bool'
    }

    attribute_map = {
        'calling_plans': 'calling_plans',
        'cost_center': 'cost_center',
        'department': 'department',
        'device_type': 'device_type',
        'emergency_address': 'emergency_address',
        'id': 'id',
        'mac_address': 'mac_address',
        'name': 'name',
        'phone_numbers': 'phone_numbers',
        'policy': 'policy',
        'provision': 'provision',
        'provision_template': 'provision_template',
        'site': 'site',
        'status': 'status',
        'common_area_optimized': 'common_area_optimized'
    }

    def __init__(self, calling_plans=None, cost_center=None, department=None, device_type=None, emergency_address=None, id=None, mac_address=None, name=None, phone_numbers=None, policy=None, provision=None, provision_template=None, site=None, status=None, common_area_optimized=None):  # noqa: E501
        """InlineResponse20018 - a model defined in Swagger"""  # noqa: E501
        self._calling_plans = None
        self._cost_center = None
        self._department = None
        self._device_type = None
        self._emergency_address = None
        self._id = None
        self._mac_address = None
        self._name = None
        self._phone_numbers = None
        self._policy = None
        self._provision = None
        self._provision_template = None
        self._site = None
        self._status = None
        self._common_area_optimized = None
        self.discriminator = None
        if calling_plans is not None:
            self.calling_plans = calling_plans
        if cost_center is not None:
            self.cost_center = cost_center
        if department is not None:
            self.department = department
        if device_type is not None:
            self.device_type = device_type
        if emergency_address is not None:
            self.emergency_address = emergency_address
        if id is not None:
            self.id = id
        if mac_address is not None:
            self.mac_address = mac_address
        if name is not None:
            self.name = name
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if policy is not None:
            self.policy = policy
        if provision is not None:
            self.provision = provision
        if provision_template is not None:
            self.provision_template = provision_template
        if site is not None:
            self.site = site
        if status is not None:
            self.status = status
        if common_area_optimized is not None:
            self.common_area_optimized = common_area_optimized

    @property
    def calling_plans(self):
        """Gets the calling_plans of this InlineResponse20018.  # noqa: E501


        :return: The calling_plans of this InlineResponse20018.  # noqa: E501
        :rtype: list[InlineResponse20018CallingPlans]
        """
        return self._calling_plans

    @calling_plans.setter
    def calling_plans(self, calling_plans):
        """Sets the calling_plans of this InlineResponse20018.


        :param calling_plans: The calling_plans of this InlineResponse20018.  # noqa: E501
        :type: list[InlineResponse20018CallingPlans]
        """

        self._calling_plans = calling_plans

    @property
    def cost_center(self):
        """Gets the cost_center of this InlineResponse20018.  # noqa: E501

        The cost center the common area phone belongs to.  # noqa: E501

        :return: The cost_center of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this InlineResponse20018.

        The cost center the common area phone belongs to.  # noqa: E501

        :param cost_center: The cost_center of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def department(self):
        """Gets the department of this InlineResponse20018.  # noqa: E501

        The department the common area phone belongs to.  # noqa: E501

        :return: The department of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse20018.

        The department the common area phone belongs to.  # noqa: E501

        :param department: The department of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def device_type(self):
        """Gets the device_type of this InlineResponse20018.  # noqa: E501

        Type of device (manufacturer name + model name).  # noqa: E501

        :return: The device_type of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._device_type

    @device_type.setter
    def device_type(self, device_type):
        """Sets the device_type of this InlineResponse20018.

        Type of device (manufacturer name + model name).  # noqa: E501

        :param device_type: The device_type of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._device_type = device_type

    @property
    def emergency_address(self):
        """Gets the emergency_address of this InlineResponse20018.  # noqa: E501


        :return: The emergency_address of this InlineResponse20018.  # noqa: E501
        :rtype: InlineResponse20018EmergencyAddress
        """
        return self._emergency_address

    @emergency_address.setter
    def emergency_address(self, emergency_address):
        """Sets the emergency_address of this InlineResponse20018.


        :param emergency_address: The emergency_address of this InlineResponse20018.  # noqa: E501
        :type: InlineResponse20018EmergencyAddress
        """

        self._emergency_address = emergency_address

    @property
    def id(self):
        """Gets the id of this InlineResponse20018.  # noqa: E501

        Unique identifier of the common area phone.  # noqa: E501

        :return: The id of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20018.

        Unique identifier of the common area phone.  # noqa: E501

        :param id: The id of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mac_address(self):
        """Gets the mac_address of this InlineResponse20018.  # noqa: E501

         Mac address or serial number.  # noqa: E501

        :return: The mac_address of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this InlineResponse20018.

         Mac address or serial number.  # noqa: E501

        :param mac_address: The mac_address of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this InlineResponse20018.  # noqa: E501

        Display name of the common area phone.  # noqa: E501

        :return: The name of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20018.

        Display name of the common area phone.  # noqa: E501

        :param name: The name of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this InlineResponse20018.  # noqa: E501


        :return: The phone_numbers of this InlineResponse20018.  # noqa: E501
        :rtype: list[InlineResponse20018PhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this InlineResponse20018.


        :param phone_numbers: The phone_numbers of this InlineResponse20018.  # noqa: E501
        :type: list[InlineResponse20018PhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def policy(self):
        """Gets the policy of this InlineResponse20018.  # noqa: E501


        :return: The policy of this InlineResponse20018.  # noqa: E501
        :rtype: InlineResponse20018Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this InlineResponse20018.


        :param policy: The policy of this InlineResponse20018.  # noqa: E501
        :type: InlineResponse20018Policy
        """

        self._policy = policy

    @property
    def provision(self):
        """Gets the provision of this InlineResponse20018.  # noqa: E501


        :return: The provision of this InlineResponse20018.  # noqa: E501
        :rtype: InlineResponse20018Provision
        """
        return self._provision

    @provision.setter
    def provision(self, provision):
        """Sets the provision of this InlineResponse20018.


        :param provision: The provision of this InlineResponse20018.  # noqa: E501
        :type: InlineResponse20018Provision
        """

        self._provision = provision

    @property
    def provision_template(self):
        """Gets the provision_template of this InlineResponse20018.  # noqa: E501


        :return: The provision_template of this InlineResponse20018.  # noqa: E501
        :rtype: InlineResponse20018ProvisionTemplate
        """
        return self._provision_template

    @provision_template.setter
    def provision_template(self, provision_template):
        """Sets the provision_template of this InlineResponse20018.


        :param provision_template: The provision_template of this InlineResponse20018.  # noqa: E501
        :type: InlineResponse20018ProvisionTemplate
        """

        self._provision_template = provision_template

    @property
    def site(self):
        """Gets the site of this InlineResponse20018.  # noqa: E501


        :return: The site of this InlineResponse20018.  # noqa: E501
        :rtype: InlineResponse20017Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20018.


        :param site: The site of this InlineResponse20018.  # noqa: E501
        :type: InlineResponse20017Site
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this InlineResponse20018.  # noqa: E501

        Status of the common area phone. It can be either `online` or `offline`.  # noqa: E501

        :return: The status of this InlineResponse20018.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20018.

        Status of the common area phone. It can be either `online` or `offline`.  # noqa: E501

        :param status: The status of this InlineResponse20018.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def common_area_optimized(self):
        """Gets the common_area_optimized of this InlineResponse20018.  # noqa: E501

        Indicates whether the `Common Area Optimization` feature is enabled on PBX OP: `true` or `false`.  # noqa: E501

        :return: The common_area_optimized of this InlineResponse20018.  # noqa: E501
        :rtype: bool
        """
        return self._common_area_optimized

    @common_area_optimized.setter
    def common_area_optimized(self, common_area_optimized):
        """Sets the common_area_optimized of this InlineResponse20018.

        Indicates whether the `Common Area Optimization` feature is enabled on PBX OP: `true` or `false`.  # noqa: E501

        :param common_area_optimized: The common_area_optimized of this InlineResponse20018.  # noqa: E501
        :type: bool
        """

        self._common_area_optimized = common_area_optimized

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
