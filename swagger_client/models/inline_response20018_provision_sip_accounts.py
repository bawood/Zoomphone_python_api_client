# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20018ProvisionSipAccounts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'authorization_id': 'str',
        'outbound_proxy': 'str',
        'password': 'str',
        'secondary_outbound_proxy': 'str',
        'sip_domain': 'str',
        'user_name': 'str'
    }

    attribute_map = {
        'authorization_id': 'authorization_id',
        'outbound_proxy': 'outbound_proxy',
        'password': 'password',
        'secondary_outbound_proxy': 'secondary_outbound_proxy',
        'sip_domain': 'sip_domain',
        'user_name': 'user_name'
    }

    def __init__(self, authorization_id=None, outbound_proxy=None, password=None, secondary_outbound_proxy=None, sip_domain=None, user_name=None):  # noqa: E501
        """InlineResponse20018ProvisionSipAccounts - a model defined in Swagger"""  # noqa: E501
        self._authorization_id = None
        self._outbound_proxy = None
        self._password = None
        self._secondary_outbound_proxy = None
        self._sip_domain = None
        self._user_name = None
        self.discriminator = None
        if authorization_id is not None:
            self.authorization_id = authorization_id
        if outbound_proxy is not None:
            self.outbound_proxy = outbound_proxy
        if password is not None:
            self.password = password
        if secondary_outbound_proxy is not None:
            self.secondary_outbound_proxy = secondary_outbound_proxy
        if sip_domain is not None:
            self.sip_domain = sip_domain
        if user_name is not None:
            self.user_name = user_name

    @property
    def authorization_id(self):
        """Gets the authorization_id of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        Authorization ID of the SIP account provided in the provisioning process.  # noqa: E501

        :return: The authorization_id of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._authorization_id

    @authorization_id.setter
    def authorization_id(self, authorization_id):
        """Sets the authorization_id of this InlineResponse20018ProvisionSipAccounts.

        Authorization ID of the SIP account provided in the provisioning process.  # noqa: E501

        :param authorization_id: The authorization_id of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._authorization_id = authorization_id

    @property
    def outbound_proxy(self):
        """Gets the outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        Outbound proxy provided in the provisioning process.  # noqa: E501

        :return: The outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._outbound_proxy

    @outbound_proxy.setter
    def outbound_proxy(self, outbound_proxy):
        """Sets the outbound_proxy of this InlineResponse20018ProvisionSipAccounts.

        Outbound proxy provided in the provisioning process.  # noqa: E501

        :param outbound_proxy: The outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._outbound_proxy = outbound_proxy

    @property
    def password(self):
        """Gets the password of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        Password entered during the  provisioning process.   # noqa: E501

        :return: The password of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this InlineResponse20018ProvisionSipAccounts.

        Password entered during the  provisioning process.   # noqa: E501

        :param password: The password of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._password = password

    @property
    def secondary_outbound_proxy(self):
        """Gets the secondary_outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        The secondary outbound proxy provided in the provisioning process.  # noqa: E501

        :return: The secondary_outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._secondary_outbound_proxy

    @secondary_outbound_proxy.setter
    def secondary_outbound_proxy(self, secondary_outbound_proxy):
        """Sets the secondary_outbound_proxy of this InlineResponse20018ProvisionSipAccounts.

        The secondary outbound proxy provided in the provisioning process.  # noqa: E501

        :param secondary_outbound_proxy: The secondary_outbound_proxy of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._secondary_outbound_proxy = secondary_outbound_proxy

    @property
    def sip_domain(self):
        """Gets the sip_domain of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        SIP Domain provided in the provisioning process.      # noqa: E501

        :return: The sip_domain of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._sip_domain

    @sip_domain.setter
    def sip_domain(self, sip_domain):
        """Sets the sip_domain of this InlineResponse20018ProvisionSipAccounts.

        SIP Domain provided in the provisioning process.      # noqa: E501

        :param sip_domain: The sip_domain of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._sip_domain = sip_domain

    @property
    def user_name(self):
        """Gets the user_name of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501

        User name of the SIP account provided in the provisioning process.  # noqa: E501

        :return: The user_name of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :rtype: str
        """
        return self._user_name

    @user_name.setter
    def user_name(self, user_name):
        """Sets the user_name of this InlineResponse20018ProvisionSipAccounts.

        User name of the SIP account provided in the provisioning process.  # noqa: E501

        :param user_name: The user_name of this InlineResponse20018ProvisionSipAccounts.  # noqa: E501
        :type: str
        """

        self._user_name = user_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20018ProvisionSipAccounts, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20018ProvisionSipAccounts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
