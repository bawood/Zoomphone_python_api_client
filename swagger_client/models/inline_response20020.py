# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20020(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_code': 'str',
        'calling_plans': 'list[InlineResponse20020CallingPlans]',
        'cost_center': 'str',
        'country': 'InlineResponse20020Country',
        'department': 'str',
        'display_name': 'str',
        'emergency_address': 'InlineResponse20020EmergencyAddress',
        'id': 'str',
        'outbound_caller_ids': 'list[InlineResponse20020OutboundCallerIds]',
        'phone_numbers': 'list[InlineResponse20020PhoneNumbers]',
        'policy': 'InlineResponse20020Policy',
        'site': 'InlineResponse20020Site',
        'status': 'str'
    }

    attribute_map = {
        'area_code': 'area_code',
        'calling_plans': 'calling_plans',
        'cost_center': 'cost_center',
        'country': 'country',
        'department': 'department',
        'display_name': 'display_name',
        'emergency_address': 'emergency_address',
        'id': 'id',
        'outbound_caller_ids': 'outbound_caller_ids',
        'phone_numbers': 'phone_numbers',
        'policy': 'policy',
        'site': 'site',
        'status': 'status'
    }

    def __init__(self, area_code=None, calling_plans=None, cost_center=None, country=None, department=None, display_name=None, emergency_address=None, id=None, outbound_caller_ids=None, phone_numbers=None, policy=None, site=None, status=None):  # noqa: E501
        """InlineResponse20020 - a model defined in Swagger"""  # noqa: E501
        self._area_code = None
        self._calling_plans = None
        self._cost_center = None
        self._country = None
        self._department = None
        self._display_name = None
        self._emergency_address = None
        self._id = None
        self._outbound_caller_ids = None
        self._phone_numbers = None
        self._policy = None
        self._site = None
        self._status = None
        self.discriminator = None
        if area_code is not None:
            self.area_code = area_code
        if calling_plans is not None:
            self.calling_plans = calling_plans
        if cost_center is not None:
            self.cost_center = cost_center
        if country is not None:
            self.country = country
        if department is not None:
            self.department = department
        if display_name is not None:
            self.display_name = display_name
        if emergency_address is not None:
            self.emergency_address = emergency_address
        if id is not None:
            self.id = id
        if outbound_caller_ids is not None:
            self.outbound_caller_ids = outbound_caller_ids
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if policy is not None:
            self.policy = policy
        if site is not None:
            self.site = site
        if status is not None:
            self.status = status

    @property
    def area_code(self):
        """Gets the area_code of this InlineResponse20020.  # noqa: E501

        Area code of the common area.  # noqa: E501

        :return: The area_code of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this InlineResponse20020.

        Area code of the common area.  # noqa: E501

        :param area_code: The area_code of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._area_code = area_code

    @property
    def calling_plans(self):
        """Gets the calling_plans of this InlineResponse20020.  # noqa: E501


        :return: The calling_plans of this InlineResponse20020.  # noqa: E501
        :rtype: list[InlineResponse20020CallingPlans]
        """
        return self._calling_plans

    @calling_plans.setter
    def calling_plans(self, calling_plans):
        """Sets the calling_plans of this InlineResponse20020.


        :param calling_plans: The calling_plans of this InlineResponse20020.  # noqa: E501
        :type: list[InlineResponse20020CallingPlans]
        """

        self._calling_plans = calling_plans

    @property
    def cost_center(self):
        """Gets the cost_center of this InlineResponse20020.  # noqa: E501

        The cost center the common area belongs to.  # noqa: E501

        :return: The cost_center of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this InlineResponse20020.

        The cost center the common area belongs to.  # noqa: E501

        :param cost_center: The cost_center of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    @property
    def country(self):
        """Gets the country of this InlineResponse20020.  # noqa: E501


        :return: The country of this InlineResponse20020.  # noqa: E501
        :rtype: InlineResponse20020Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20020.


        :param country: The country of this InlineResponse20020.  # noqa: E501
        :type: InlineResponse20020Country
        """

        self._country = country

    @property
    def department(self):
        """Gets the department of this InlineResponse20020.  # noqa: E501

        The department the common area belongs to.  # noqa: E501

        :return: The department of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse20020.

        The department the common area belongs to.  # noqa: E501

        :param department: The department of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20020.  # noqa: E501

        Display name of the common area.  # noqa: E501

        :return: The display_name of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20020.

        Display name of the common area.  # noqa: E501

        :param display_name: The display_name of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def emergency_address(self):
        """Gets the emergency_address of this InlineResponse20020.  # noqa: E501


        :return: The emergency_address of this InlineResponse20020.  # noqa: E501
        :rtype: InlineResponse20020EmergencyAddress
        """
        return self._emergency_address

    @emergency_address.setter
    def emergency_address(self, emergency_address):
        """Sets the emergency_address of this InlineResponse20020.


        :param emergency_address: The emergency_address of this InlineResponse20020.  # noqa: E501
        :type: InlineResponse20020EmergencyAddress
        """

        self._emergency_address = emergency_address

    @property
    def id(self):
        """Gets the id of this InlineResponse20020.  # noqa: E501

        Common area ID or common area extension ID.  # noqa: E501

        :return: The id of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20020.

        Common area ID or common area extension ID.  # noqa: E501

        :param id: The id of this InlineResponse20020.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def outbound_caller_ids(self):
        """Gets the outbound_caller_ids of this InlineResponse20020.  # noqa: E501


        :return: The outbound_caller_ids of this InlineResponse20020.  # noqa: E501
        :rtype: list[InlineResponse20020OutboundCallerIds]
        """
        return self._outbound_caller_ids

    @outbound_caller_ids.setter
    def outbound_caller_ids(self, outbound_caller_ids):
        """Sets the outbound_caller_ids of this InlineResponse20020.


        :param outbound_caller_ids: The outbound_caller_ids of this InlineResponse20020.  # noqa: E501
        :type: list[InlineResponse20020OutboundCallerIds]
        """

        self._outbound_caller_ids = outbound_caller_ids

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this InlineResponse20020.  # noqa: E501


        :return: The phone_numbers of this InlineResponse20020.  # noqa: E501
        :rtype: list[InlineResponse20020PhoneNumbers]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this InlineResponse20020.


        :param phone_numbers: The phone_numbers of this InlineResponse20020.  # noqa: E501
        :type: list[InlineResponse20020PhoneNumbers]
        """

        self._phone_numbers = phone_numbers

    @property
    def policy(self):
        """Gets the policy of this InlineResponse20020.  # noqa: E501


        :return: The policy of this InlineResponse20020.  # noqa: E501
        :rtype: InlineResponse20020Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this InlineResponse20020.


        :param policy: The policy of this InlineResponse20020.  # noqa: E501
        :type: InlineResponse20020Policy
        """

        self._policy = policy

    @property
    def site(self):
        """Gets the site of this InlineResponse20020.  # noqa: E501


        :return: The site of this InlineResponse20020.  # noqa: E501
        :rtype: InlineResponse20020Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20020.


        :param site: The site of this InlineResponse20020.  # noqa: E501
        :type: InlineResponse20020Site
        """

        self._site = site

    @property
    def status(self):
        """Gets the status of this InlineResponse20020.  # noqa: E501

        Status of the common area. It can be either `online` or `offline`.  # noqa: E501

        :return: The status of this InlineResponse20020.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20020.

        Status of the common area. It can be either `online` or `offline`.  # noqa: E501

        :param status: The status of this InlineResponse20020.  # noqa: E501
        :type: str
        """
        allowed_values = ["online", "offline"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20020, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20020):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
