# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'voicemail_access_members': 'list[InlineResponse2003VoicemailAccessMembers]',
        'voicemail_transcription': 'InlineResponse2003VoicemailTranscription',
        'voicemail_notification_by_email': 'InlineResponse2003VoicemailNotificationByEmail',
        'sms': 'InlineResponse2003Sms'
    }

    attribute_map = {
        'voicemail_access_members': 'voicemail_access_members',
        'voicemail_transcription': 'voicemail_transcription',
        'voicemail_notification_by_email': 'voicemail_notification_by_email',
        'sms': 'sms'
    }

    def __init__(self, voicemail_access_members=None, voicemail_transcription=None, voicemail_notification_by_email=None, sms=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._voicemail_access_members = None
        self._voicemail_transcription = None
        self._voicemail_notification_by_email = None
        self._sms = None
        self.discriminator = None
        if voicemail_access_members is not None:
            self.voicemail_access_members = voicemail_access_members
        if voicemail_transcription is not None:
            self.voicemail_transcription = voicemail_transcription
        if voicemail_notification_by_email is not None:
            self.voicemail_notification_by_email = voicemail_notification_by_email
        if sms is not None:
            self.sms = sms

    @property
    def voicemail_access_members(self):
        """Gets the voicemail_access_members of this InlineResponse2003.  # noqa: E501

        Shared voicemail access member list.  # noqa: E501

        :return: The voicemail_access_members of this InlineResponse2003.  # noqa: E501
        :rtype: list[InlineResponse2003VoicemailAccessMembers]
        """
        return self._voicemail_access_members

    @voicemail_access_members.setter
    def voicemail_access_members(self, voicemail_access_members):
        """Sets the voicemail_access_members of this InlineResponse2003.

        Shared voicemail access member list.  # noqa: E501

        :param voicemail_access_members: The voicemail_access_members of this InlineResponse2003.  # noqa: E501
        :type: list[InlineResponse2003VoicemailAccessMembers]
        """

        self._voicemail_access_members = voicemail_access_members

    @property
    def voicemail_transcription(self):
        """Gets the voicemail_transcription of this InlineResponse2003.  # noqa: E501


        :return: The voicemail_transcription of this InlineResponse2003.  # noqa: E501
        :rtype: InlineResponse2003VoicemailTranscription
        """
        return self._voicemail_transcription

    @voicemail_transcription.setter
    def voicemail_transcription(self, voicemail_transcription):
        """Sets the voicemail_transcription of this InlineResponse2003.


        :param voicemail_transcription: The voicemail_transcription of this InlineResponse2003.  # noqa: E501
        :type: InlineResponse2003VoicemailTranscription
        """

        self._voicemail_transcription = voicemail_transcription

    @property
    def voicemail_notification_by_email(self):
        """Gets the voicemail_notification_by_email of this InlineResponse2003.  # noqa: E501


        :return: The voicemail_notification_by_email of this InlineResponse2003.  # noqa: E501
        :rtype: InlineResponse2003VoicemailNotificationByEmail
        """
        return self._voicemail_notification_by_email

    @voicemail_notification_by_email.setter
    def voicemail_notification_by_email(self, voicemail_notification_by_email):
        """Sets the voicemail_notification_by_email of this InlineResponse2003.


        :param voicemail_notification_by_email: The voicemail_notification_by_email of this InlineResponse2003.  # noqa: E501
        :type: InlineResponse2003VoicemailNotificationByEmail
        """

        self._voicemail_notification_by_email = voicemail_notification_by_email

    @property
    def sms(self):
        """Gets the sms of this InlineResponse2003.  # noqa: E501


        :return: The sms of this InlineResponse2003.  # noqa: E501
        :rtype: InlineResponse2003Sms
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this InlineResponse2003.


        :param sms: The sms of this InlineResponse2003.  # noqa: E501
        :type: InlineResponse2003Sms
        """

        self._sms = sms

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
