# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20030Settings1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_callers_check_voicemail': 'bool',
        'call_forwarding_settings': 'list[InlineResponse20030Settings1CallForwardingSettings]',
        'call_not_answer_action': 'int',
        'connect_to_operator': 'bool',
        'max_wait_time': 'int',
        'require_press_1_before_connecting': 'bool',
        'ring_mode': 'str',
        'routing': 'InlineResponse20030SettingsRouting',
        'busy_routing': 'InlineResponse20030SettingsRouting'
    }

    attribute_map = {
        'allow_callers_check_voicemail': 'allow_callers_check_voicemail',
        'call_forwarding_settings': 'call_forwarding_settings',
        'call_not_answer_action': 'call_not_answer_action',
        'connect_to_operator': 'connect_to_operator',
        'max_wait_time': 'max_wait_time',
        'require_press_1_before_connecting': 'require_press_1_before_connecting',
        'ring_mode': 'ring_mode',
        'routing': 'routing',
        'busy_routing': 'busy_routing'
    }

    def __init__(self, allow_callers_check_voicemail=None, call_forwarding_settings=None, call_not_answer_action=None, connect_to_operator=None, max_wait_time=None, require_press_1_before_connecting=None, ring_mode=None, routing=None, busy_routing=None):  # noqa: E501
        """InlineResponse20030Settings1 - a model defined in Swagger"""  # noqa: E501
        self._allow_callers_check_voicemail = None
        self._call_forwarding_settings = None
        self._call_not_answer_action = None
        self._connect_to_operator = None
        self._max_wait_time = None
        self._require_press_1_before_connecting = None
        self._ring_mode = None
        self._routing = None
        self._busy_routing = None
        self.discriminator = None
        if allow_callers_check_voicemail is not None:
            self.allow_callers_check_voicemail = allow_callers_check_voicemail
        if call_forwarding_settings is not None:
            self.call_forwarding_settings = call_forwarding_settings
        if call_not_answer_action is not None:
            self.call_not_answer_action = call_not_answer_action
        if connect_to_operator is not None:
            self.connect_to_operator = connect_to_operator
        if max_wait_time is not None:
            self.max_wait_time = max_wait_time
        if require_press_1_before_connecting is not None:
            self.require_press_1_before_connecting = require_press_1_before_connecting
        if ring_mode is not None:
            self.ring_mode = ring_mode
        if routing is not None:
            self.routing = routing
        if busy_routing is not None:
            self.busy_routing = busy_routing

    @property
    def allow_callers_check_voicemail(self):
        """Gets the allow_callers_check_voicemail of this InlineResponse20030Settings1.  # noqa: E501

        Whether to allow the callers to check voicemails over a phone. Required only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The allow_callers_check_voicemail of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: bool
        """
        return self._allow_callers_check_voicemail

    @allow_callers_check_voicemail.setter
    def allow_callers_check_voicemail(self, allow_callers_check_voicemail):
        """Sets the allow_callers_check_voicemail of this InlineResponse20030Settings1.

        Whether to allow the callers to check voicemails over a phone. Required only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :param allow_callers_check_voicemail: The allow_callers_check_voicemail of this InlineResponse20030Settings1.  # noqa: E501
        :type: bool
        """

        self._allow_callers_check_voicemail = allow_callers_check_voicemail

    @property
    def call_forwarding_settings(self):
        """Gets the call_forwarding_settings of this InlineResponse20030Settings1.  # noqa: E501

        The call forwarding settings. Returned only for the `call_forwarding` sub-setting.  # noqa: E501

        :return: The call_forwarding_settings of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: list[InlineResponse20030Settings1CallForwardingSettings]
        """
        return self._call_forwarding_settings

    @call_forwarding_settings.setter
    def call_forwarding_settings(self, call_forwarding_settings):
        """Sets the call_forwarding_settings of this InlineResponse20030Settings1.

        The call forwarding settings. Returned only for the `call_forwarding` sub-setting.  # noqa: E501

        :param call_forwarding_settings: The call_forwarding_settings of this InlineResponse20030Settings1.  # noqa: E501
        :type: list[InlineResponse20030Settings1CallForwardingSettings]
        """

        self._call_forwarding_settings = call_forwarding_settings

    @property
    def call_not_answer_action(self):
        """Gets the call_not_answer_action of this InlineResponse20030Settings1.  # noqa: E501

        The action to take when a call is not answered:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  * `13` - Forward to message.  * `14` - Forward to interactive voice response (IVR).   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :return: The call_not_answer_action of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: int
        """
        return self._call_not_answer_action

    @call_not_answer_action.setter
    def call_not_answer_action(self, call_not_answer_action):
        """Sets the call_not_answer_action of this InlineResponse20030Settings1.

        The action to take when a call is not answered:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  * `13` - Forward to message.  * `14` - Forward to interactive voice response (IVR).   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :param call_not_answer_action: The call_not_answer_action of this InlineResponse20030Settings1.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]  # noqa: E501
        if call_not_answer_action not in allowed_values:
            raise ValueError(
                "Invalid value for `call_not_answer_action` ({0}), must be one of {1}"  # noqa: E501
                .format(call_not_answer_action, allowed_values)
            )

        self._call_not_answer_action = call_not_answer_action

    @property
    def connect_to_operator(self):
        """Gets the connect_to_operator of this InlineResponse20030Settings1.  # noqa: E501

        Whether to allow callers to reach an operator. Returned only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The connect_to_operator of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: bool
        """
        return self._connect_to_operator

    @connect_to_operator.setter
    def connect_to_operator(self, connect_to_operator):
        """Sets the connect_to_operator of this InlineResponse20030Settings1.

        Whether to allow callers to reach an operator. Returned only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :param connect_to_operator: The connect_to_operator of this InlineResponse20030Settings1.  # noqa: E501
        :type: bool
        """

        self._connect_to_operator = connect_to_operator

    @property
    def max_wait_time(self):
        """Gets the max_wait_time of this InlineResponse20030Settings1.  # noqa: E501

        The max wait time, in seconds, for `simultaneous` ring mode or the ring duration for each device for `sequential` ring mode:  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :return: The max_wait_time of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: int
        """
        return self._max_wait_time

    @max_wait_time.setter
    def max_wait_time(self, max_wait_time):
        """Sets the max_wait_time of this InlineResponse20030Settings1.

        The max wait time, in seconds, for `simultaneous` ring mode or the ring duration for each device for `sequential` ring mode:  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :param max_wait_time: The max_wait_time of this InlineResponse20030Settings1.  # noqa: E501
        :type: int
        """
        allowed_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60]  # noqa: E501
        if max_wait_time not in allowed_values:
            raise ValueError(
                "Invalid value for `max_wait_time` ({0}), must be one of {1}"  # noqa: E501
                .format(max_wait_time, allowed_values)
            )

        self._max_wait_time = max_wait_time

    @property
    def require_press_1_before_connecting(self):
        """Gets the require_press_1_before_connecting of this InlineResponse20030Settings1.  # noqa: E501

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. This helps to ensure that missed calls do not reach to your personal voicemail. Returned only for the `call_forwarding` sub-setting.  # noqa: E501

        :return: The require_press_1_before_connecting of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: bool
        """
        return self._require_press_1_before_connecting

    @require_press_1_before_connecting.setter
    def require_press_1_before_connecting(self, require_press_1_before_connecting):
        """Sets the require_press_1_before_connecting of this InlineResponse20030Settings1.

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. This helps to ensure that missed calls do not reach to your personal voicemail. Returned only for the `call_forwarding` sub-setting.  # noqa: E501

        :param require_press_1_before_connecting: The require_press_1_before_connecting of this InlineResponse20030Settings1.  # noqa: E501
        :type: bool
        """

        self._require_press_1_before_connecting = require_press_1_before_connecting

    @property
    def ring_mode(self):
        """Gets the ring_mode of this InlineResponse20030Settings1.  # noqa: E501

        The call handling's ring mode setting:  * `simultaneous`  * `sequential`   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :return: The ring_mode of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: str
        """
        return self._ring_mode

    @ring_mode.setter
    def ring_mode(self, ring_mode):
        """Sets the ring_mode of this InlineResponse20030Settings1.

        The call handling's ring mode setting:  * `simultaneous`  * `sequential`   Returned only for the `call_handling` sub-setting.  # noqa: E501

        :param ring_mode: The ring_mode of this InlineResponse20030Settings1.  # noqa: E501
        :type: str
        """
        allowed_values = ["simultaneous", "sequential"]  # noqa: E501
        if ring_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ring_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(ring_mode, allowed_values)
            )

        self._ring_mode = ring_mode

    @property
    def routing(self):
        """Gets the routing of this InlineResponse20030Settings1.  # noqa: E501


        :return: The routing of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: InlineResponse20030SettingsRouting
        """
        return self._routing

    @routing.setter
    def routing(self, routing):
        """Sets the routing of this InlineResponse20030Settings1.


        :param routing: The routing of this InlineResponse20030Settings1.  # noqa: E501
        :type: InlineResponse20030SettingsRouting
        """

        self._routing = routing

    @property
    def busy_routing(self):
        """Gets the busy_routing of this InlineResponse20030Settings1.  # noqa: E501


        :return: The busy_routing of this InlineResponse20030Settings1.  # noqa: E501
        :rtype: InlineResponse20030SettingsRouting
        """
        return self._busy_routing

    @busy_routing.setter
    def busy_routing(self, busy_routing):
        """Sets the busy_routing of this InlineResponse20030Settings1.


        :param busy_routing: The busy_routing of this InlineResponse20030Settings1.  # noqa: E501
        :type: InlineResponse20030SettingsRouting
        """

        self._busy_routing = busy_routing

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20030Settings1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20030Settings1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
