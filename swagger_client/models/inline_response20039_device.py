# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039Device(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bssid': 'str',
        'id': 'str',
        'mac_address': 'str',
        'name': 'str',
        'private_ip': 'str',
        'public_ip': 'str'
    }

    attribute_map = {
        'bssid': 'bssid',
        'id': 'id',
        'mac_address': 'mac_address',
        'name': 'name',
        'private_ip': 'private_ip',
        'public_ip': 'public_ip'
    }

    def __init__(self, bssid=None, id=None, mac_address=None, name=None, private_ip=None, public_ip=None):  # noqa: E501
        """InlineResponse20039Device - a model defined in Swagger"""  # noqa: E501
        self._bssid = None
        self._id = None
        self._mac_address = None
        self._name = None
        self._private_ip = None
        self._public_ip = None
        self.discriminator = None
        if bssid is not None:
            self.bssid = bssid
        if id is not None:
            self.id = id
        if mac_address is not None:
            self.mac_address = mac_address
        if name is not None:
            self.name = name
        if private_ip is not None:
            self.private_ip = private_ip
        if public_ip is not None:
            self.public_ip = public_ip

    @property
    def bssid(self):
        """Gets the bssid of this InlineResponse20039Device.  # noqa: E501

        The device's BSSIDs (Basic Service Set Identifiers).  # noqa: E501

        :return: The bssid of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this InlineResponse20039Device.

        The device's BSSIDs (Basic Service Set Identifiers).  # noqa: E501

        :param bssid: The bssid of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._bssid = bssid

    @property
    def id(self):
        """Gets the id of this InlineResponse20039Device.  # noqa: E501

        The device ID.  # noqa: E501

        :return: The id of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20039Device.

        The device ID.  # noqa: E501

        :param id: The id of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def mac_address(self):
        """Gets the mac_address of this InlineResponse20039Device.  # noqa: E501

        The MAC address or serial number of the device.  # noqa: E501

        :return: The mac_address of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this InlineResponse20039Device.

        The MAC address or serial number of the device.  # noqa: E501

        :param mac_address: The mac_address of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._mac_address = mac_address

    @property
    def name(self):
        """Gets the name of this InlineResponse20039Device.  # noqa: E501

        The device name.  # noqa: E501

        :return: The name of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20039Device.

        The device name.  # noqa: E501

        :param name: The name of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def private_ip(self):
        """Gets the private_ip of this InlineResponse20039Device.  # noqa: E501

        The device's subnet or private IP address.  # noqa: E501

        :return: The private_ip of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this InlineResponse20039Device.

        The device's subnet or private IP address.  # noqa: E501

        :param private_ip: The private_ip of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this InlineResponse20039Device.  # noqa: E501

        The device's public IP address.  # noqa: E501

        :return: The public_ip of this InlineResponse20039Device.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this InlineResponse20039Device.

        The device's public IP address.  # noqa: E501

        :param public_ip: The public_ip of this InlineResponse20039Device.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039Device, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039Device):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
