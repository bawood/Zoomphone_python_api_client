# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20039LocationTracking(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignees': 'list[InlineResponse20039Assignees]',
        'city': 'str',
        'country': 'str',
        'device': 'InlineResponse20039Device',
        'emergency_address': 'str',
        'name': 'str',
        'network_switch': 'InlineResponse20039NetworkSwitch',
        'site': 'InlineResponse20039Site',
        'type': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'assignees': 'assignees',
        'city': 'city',
        'country': 'country',
        'device': 'device',
        'emergency_address': 'emergency_address',
        'name': 'name',
        'network_switch': 'network_switch',
        'site': 'site',
        'type': 'type',
        'zip': 'zip'
    }

    def __init__(self, assignees=None, city=None, country=None, device=None, emergency_address=None, name=None, network_switch=None, site=None, type=None, zip=None):  # noqa: E501
        """InlineResponse20039LocationTracking - a model defined in Swagger"""  # noqa: E501
        self._assignees = None
        self._city = None
        self._country = None
        self._device = None
        self._emergency_address = None
        self._name = None
        self._network_switch = None
        self._site = None
        self._type = None
        self._zip = None
        self.discriminator = None
        if assignees is not None:
            self.assignees = assignees
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if device is not None:
            self.device = device
        if emergency_address is not None:
            self.emergency_address = emergency_address
        if name is not None:
            self.name = name
        if network_switch is not None:
            self.network_switch = network_switch
        if site is not None:
            self.site = site
        if type is not None:
            self.type = type
        if zip is not None:
            self.zip = zip

    @property
    def assignees(self):
        """Gets the assignees of this InlineResponse20039LocationTracking.  # noqa: E501


        :return: The assignees of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: list[InlineResponse20039Assignees]
        """
        return self._assignees

    @assignees.setter
    def assignees(self, assignees):
        """Sets the assignees of this InlineResponse20039LocationTracking.


        :param assignees: The assignees of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: list[InlineResponse20039Assignees]
        """

        self._assignees = assignees

    @property
    def city(self):
        """Gets the city of this InlineResponse20039LocationTracking.  # noqa: E501

        The city of the location.  # noqa: E501

        :return: The city of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InlineResponse20039LocationTracking.

        The city of the location.  # noqa: E501

        :param city: The city of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this InlineResponse20039LocationTracking.  # noqa: E501

        The two-lettered country code (Aplha-2 code in ISO-3166 format) standard of the location.  # noqa: E501

        :return: The country of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20039LocationTracking.

        The two-lettered country code (Aplha-2 code in ISO-3166 format) standard of the location.  # noqa: E501

        :param country: The country of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def device(self):
        """Gets the device of this InlineResponse20039LocationTracking.  # noqa: E501


        :return: The device of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: InlineResponse20039Device
        """
        return self._device

    @device.setter
    def device(self, device):
        """Sets the device of this InlineResponse20039LocationTracking.


        :param device: The device of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: InlineResponse20039Device
        """

        self._device = device

    @property
    def emergency_address(self):
        """Gets the emergency_address of this InlineResponse20039LocationTracking.  # noqa: E501

        The emergency location's address.  # noqa: E501

        :return: The emergency_address of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._emergency_address

    @emergency_address.setter
    def emergency_address(self, emergency_address):
        """Sets the emergency_address of this InlineResponse20039LocationTracking.

        The emergency location's address.  # noqa: E501

        :param emergency_address: The emergency_address of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """

        self._emergency_address = emergency_address

    @property
    def name(self):
        """Gets the name of this InlineResponse20039LocationTracking.  # noqa: E501

        The location's name.  # noqa: E501

        :return: The name of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20039LocationTracking.

        The location's name.  # noqa: E501

        :param name: The name of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def network_switch(self):
        """Gets the network_switch of this InlineResponse20039LocationTracking.  # noqa: E501


        :return: The network_switch of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: InlineResponse20039NetworkSwitch
        """
        return self._network_switch

    @network_switch.setter
    def network_switch(self, network_switch):
        """Sets the network_switch of this InlineResponse20039LocationTracking.


        :param network_switch: The network_switch of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: InlineResponse20039NetworkSwitch
        """

        self._network_switch = network_switch

    @property
    def site(self):
        """Gets the site of this InlineResponse20039LocationTracking.  # noqa: E501


        :return: The site of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: InlineResponse20039Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20039LocationTracking.


        :param site: The site of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: InlineResponse20039Site
        """

        self._site = site

    @property
    def type(self):
        """Gets the type of this InlineResponse20039LocationTracking.  # noqa: E501

        The type of location  # noqa: E501

        :return: The type of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20039LocationTracking.

        The type of location  # noqa: E501

        :param type: The type of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """
        allowed_values = ["company", "personal", "unknown"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def zip(self):
        """Gets the zip of this InlineResponse20039LocationTracking.  # noqa: E501

        The zip code of the location.  # noqa: E501

        :return: The zip of this InlineResponse20039LocationTracking.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this InlineResponse20039LocationTracking.

        The zip code of the location.  # noqa: E501

        :param zip: The zip of this InlineResponse20039LocationTracking.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20039LocationTracking, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20039LocationTracking):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
