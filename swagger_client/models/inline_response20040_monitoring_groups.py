# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20040MonitoringGroups(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'monitor_members_count': 'int',
        'monitored_members_count': 'int',
        'monitoring_privileges': 'list[str]',
        'name': 'str',
        'prompt': 'bool',
        'site': 'InlineResponse20040Site',
        'type': 'int'
    }

    attribute_map = {
        'id': 'id',
        'monitor_members_count': 'monitor_members_count',
        'monitored_members_count': 'monitored_members_count',
        'monitoring_privileges': 'monitoring_privileges',
        'name': 'name',
        'prompt': 'prompt',
        'site': 'site',
        'type': 'type'
    }

    def __init__(self, id=None, monitor_members_count=None, monitored_members_count=None, monitoring_privileges=None, name=None, prompt=None, site=None, type=None):  # noqa: E501
        """InlineResponse20040MonitoringGroups - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._monitor_members_count = None
        self._monitored_members_count = None
        self._monitoring_privileges = None
        self._name = None
        self._prompt = None
        self._site = None
        self._type = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if monitor_members_count is not None:
            self.monitor_members_count = monitor_members_count
        if monitored_members_count is not None:
            self.monitored_members_count = monitored_members_count
        if monitoring_privileges is not None:
            self.monitoring_privileges = monitoring_privileges
        if name is not None:
            self.name = name
        if prompt is not None:
            self.prompt = prompt
        if site is not None:
            self.site = site
        if type is not None:
            self.type = type

    @property
    def id(self):
        """Gets the id of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Monitoring group ID.  # noqa: E501

        :return: The id of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20040MonitoringGroups.

        Monitoring group ID.  # noqa: E501

        :param id: The id of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def monitor_members_count(self):
        """Gets the monitor_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Number of monitors.  # noqa: E501

        :return: The monitor_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: int
        """
        return self._monitor_members_count

    @monitor_members_count.setter
    def monitor_members_count(self, monitor_members_count):
        """Sets the monitor_members_count of this InlineResponse20040MonitoringGroups.

        Number of monitors.  # noqa: E501

        :param monitor_members_count: The monitor_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: int
        """

        self._monitor_members_count = monitor_members_count

    @property
    def monitored_members_count(self):
        """Gets the monitored_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Number of monitored users.  # noqa: E501

        :return: The monitored_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: int
        """
        return self._monitored_members_count

    @monitored_members_count.setter
    def monitored_members_count(self, monitored_members_count):
        """Sets the monitored_members_count of this InlineResponse20040MonitoringGroups.

        Number of monitored users.  # noqa: E501

        :param monitored_members_count: The monitored_members_count of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: int
        """

        self._monitored_members_count = monitored_members_count

    @property
    def monitoring_privileges(self):
        """Gets the monitoring_privileges of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Set of monitoring group's privileges.  # noqa: E501

        :return: The monitoring_privileges of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitoring_privileges

    @monitoring_privileges.setter
    def monitoring_privileges(self, monitoring_privileges):
        """Sets the monitoring_privileges of this InlineResponse20040MonitoringGroups.

        Set of monitoring group's privileges.  # noqa: E501

        :param monitoring_privileges: The monitoring_privileges of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["listen", "whisper", "barge", "take_over"]  # noqa: E501
        if not set(monitoring_privileges).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `monitoring_privileges` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(monitoring_privileges) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._monitoring_privileges = monitoring_privileges

    @property
    def name(self):
        """Gets the name of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Monitoring instance name.  # noqa: E501

        :return: The name of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20040MonitoringGroups.

        Monitoring instance name.  # noqa: E501

        :param name: The name of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prompt(self):
        """Gets the prompt of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Whether Play a disclaimer prompt to the call participants  # noqa: E501

        :return: The prompt of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: bool
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this InlineResponse20040MonitoringGroups.

        Whether Play a disclaimer prompt to the call participants  # noqa: E501

        :param prompt: The prompt of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: bool
        """

        self._prompt = prompt

    @property
    def site(self):
        """Gets the site of this InlineResponse20040MonitoringGroups.  # noqa: E501


        :return: The site of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: InlineResponse20040Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20040MonitoringGroups.


        :param site: The site of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: InlineResponse20040Site
        """

        self._site = site

    @property
    def type(self):
        """Gets the type of this InlineResponse20040MonitoringGroups.  # noqa: E501

        Monitoring type. * `1` — Users & Common Areas. * `2` — Call Queues. * `3` — Shared Line Group.  # noqa: E501

        :return: The type of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20040MonitoringGroups.

        Monitoring type. * `1` — Users & Common Areas. * `2` — Call Queues. * `3` — Shared Line Group.  # noqa: E501

        :param type: The type of this InlineResponse20040MonitoringGroups.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20040MonitoringGroups, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20040MonitoringGroups):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
