# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20045Assignee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'extension_number': 'int',
        'id': 'str',
        'name': 'str',
        'type': 'str'
    }

    attribute_map = {
        'extension_number': 'extension_number',
        'id': 'id',
        'name': 'name',
        'type': 'type'
    }

    def __init__(self, extension_number=None, id=None, name=None, type=None):  # noqa: E501
        """InlineResponse20045Assignee - a model defined in Swagger"""  # noqa: E501
        self._extension_number = None
        self._id = None
        self._name = None
        self._type = None
        self.discriminator = None
        if extension_number is not None:
            self.extension_number = extension_number
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if type is not None:
            self.type = type

    @property
    def extension_number(self):
        """Gets the extension_number of this InlineResponse20045Assignee.  # noqa: E501

        Extension number of the Phone.  # noqa: E501

        :return: The extension_number of this InlineResponse20045Assignee.  # noqa: E501
        :rtype: int
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this InlineResponse20045Assignee.

        Extension number of the Phone.  # noqa: E501

        :param extension_number: The extension_number of this InlineResponse20045Assignee.  # noqa: E501
        :type: int
        """

        self._extension_number = extension_number

    @property
    def id(self):
        """Gets the id of this InlineResponse20045Assignee.  # noqa: E501

        Unique Identifier of the user to whom the number has been assigned.  # noqa: E501

        :return: The id of this InlineResponse20045Assignee.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20045Assignee.

        Unique Identifier of the user to whom the number has been assigned.  # noqa: E501

        :param id: The id of this InlineResponse20045Assignee.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20045Assignee.  # noqa: E501

        Name of the user to whom the number has been assigned.  # noqa: E501

        :return: The name of this InlineResponse20045Assignee.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20045Assignee.

        Name of the user to whom the number has been assigned.  # noqa: E501

        :param name: The name of this InlineResponse20045Assignee.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """Gets the type of this InlineResponse20045Assignee.  # noqa: E501

        Indicates who the phone number belongs to.<br> `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br>  `commonAreaPhone`: Phone number has been assigned to a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-common-area-phones)<br>. `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>  # noqa: E501

        :return: The type of this InlineResponse20045Assignee.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20045Assignee.

        Indicates who the phone number belongs to.<br> `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br>  `commonAreaPhone`: Phone number has been assigned to a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-common-area-phones)<br>. `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br>  # noqa: E501

        :param type: The type of this InlineResponse20045Assignee.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "callQueue", "autoReceptionist", "commonAreaPhone"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20045Assignee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20045Assignee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
