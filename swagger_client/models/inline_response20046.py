# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20046(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assignee': 'InlineResponse20046Assignee',
        'capability': 'list[str]',
        'carrier': 'InlineResponse20046Carrier',
        'display_name': 'str',
        'emergency_address': 'InlineResponse20046EmergencyAddress',
        'emergency_address_status': 'int',
        'emergency_address_update_time': 'str',
        'id': 'str',
        'location': 'str',
        'number': 'str',
        'number_type': 'str',
        'sip_group': 'InlineResponse20046SipGroup',
        'site': 'InlineResponse2007Site',
        'source': 'str',
        'status': 'str'
    }

    attribute_map = {
        'assignee': 'assignee',
        'capability': 'capability',
        'carrier': 'carrier',
        'display_name': 'display_name',
        'emergency_address': 'emergency_address',
        'emergency_address_status': 'emergency_address_status',
        'emergency_address_update_time': 'emergency_address_update_time',
        'id': 'id',
        'location': 'location',
        'number': 'number',
        'number_type': 'number_type',
        'sip_group': 'sip_group',
        'site': 'site',
        'source': 'source',
        'status': 'status'
    }

    def __init__(self, assignee=None, capability=None, carrier=None, display_name=None, emergency_address=None, emergency_address_status=None, emergency_address_update_time=None, id=None, location=None, number=None, number_type=None, sip_group=None, site=None, source=None, status=None):  # noqa: E501
        """InlineResponse20046 - a model defined in Swagger"""  # noqa: E501
        self._assignee = None
        self._capability = None
        self._carrier = None
        self._display_name = None
        self._emergency_address = None
        self._emergency_address_status = None
        self._emergency_address_update_time = None
        self._id = None
        self._location = None
        self._number = None
        self._number_type = None
        self._sip_group = None
        self._site = None
        self._source = None
        self._status = None
        self.discriminator = None
        if assignee is not None:
            self.assignee = assignee
        if capability is not None:
            self.capability = capability
        if carrier is not None:
            self.carrier = carrier
        if display_name is not None:
            self.display_name = display_name
        if emergency_address is not None:
            self.emergency_address = emergency_address
        if emergency_address_status is not None:
            self.emergency_address_status = emergency_address_status
        if emergency_address_update_time is not None:
            self.emergency_address_update_time = emergency_address_update_time
        if id is not None:
            self.id = id
        if location is not None:
            self.location = location
        if number is not None:
            self.number = number
        if number_type is not None:
            self.number_type = number_type
        if sip_group is not None:
            self.sip_group = sip_group
        if site is not None:
            self.site = site
        if source is not None:
            self.source = source
        if status is not None:
            self.status = status

    @property
    def assignee(self):
        """Gets the assignee of this InlineResponse20046.  # noqa: E501


        :return: The assignee of this InlineResponse20046.  # noqa: E501
        :rtype: InlineResponse20046Assignee
        """
        return self._assignee

    @assignee.setter
    def assignee(self, assignee):
        """Sets the assignee of this InlineResponse20046.


        :param assignee: The assignee of this InlineResponse20046.  # noqa: E501
        :type: InlineResponse20046Assignee
        """

        self._assignee = assignee

    @property
    def capability(self):
        """Gets the capability of this InlineResponse20046.  # noqa: E501

        The capability for the phone number, whether it can take incoming calls, make outgoing calls, or both. Values include `incoming`, `outgoing`, or both of these values.  # noqa: E501

        :return: The capability of this InlineResponse20046.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this InlineResponse20046.

        The capability for the phone number, whether it can take incoming calls, make outgoing calls, or both. Values include `incoming`, `outgoing`, or both of these values.  # noqa: E501

        :param capability: The capability of this InlineResponse20046.  # noqa: E501
        :type: list[str]
        """

        self._capability = capability

    @property
    def carrier(self):
        """Gets the carrier of this InlineResponse20046.  # noqa: E501


        :return: The carrier of this InlineResponse20046.  # noqa: E501
        :rtype: InlineResponse20046Carrier
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this InlineResponse20046.


        :param carrier: The carrier of this InlineResponse20046.  # noqa: E501
        :type: InlineResponse20046Carrier
        """

        self._carrier = carrier

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20046.  # noqa: E501

        The display name for the phone number.  # noqa: E501

        :return: The display_name of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20046.

        The display name for the phone number.  # noqa: E501

        :param display_name: The display_name of this InlineResponse20046.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def emergency_address(self):
        """Gets the emergency_address of this InlineResponse20046.  # noqa: E501


        :return: The emergency_address of this InlineResponse20046.  # noqa: E501
        :rtype: InlineResponse20046EmergencyAddress
        """
        return self._emergency_address

    @emergency_address.setter
    def emergency_address(self, emergency_address):
        """Sets the emergency_address of this InlineResponse20046.


        :param emergency_address: The emergency_address of this InlineResponse20046.  # noqa: E501
        :type: InlineResponse20046EmergencyAddress
        """

        self._emergency_address = emergency_address

    @property
    def emergency_address_status(self):
        """Gets the emergency_address_status of this InlineResponse20046.  # noqa: E501

        Displayed when the number is `byoc` number. The emergency address status. 1-carrier update required, 2-confirmed  # noqa: E501

        :return: The emergency_address_status of this InlineResponse20046.  # noqa: E501
        :rtype: int
        """
        return self._emergency_address_status

    @emergency_address_status.setter
    def emergency_address_status(self, emergency_address_status):
        """Sets the emergency_address_status of this InlineResponse20046.

        Displayed when the number is `byoc` number. The emergency address status. 1-carrier update required, 2-confirmed  # noqa: E501

        :param emergency_address_status: The emergency_address_status of this InlineResponse20046.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if emergency_address_status not in allowed_values:
            raise ValueError(
                "Invalid value for `emergency_address_status` ({0}), must be one of {1}"  # noqa: E501
                .format(emergency_address_status, allowed_values)
            )

        self._emergency_address_status = emergency_address_status

    @property
    def emergency_address_update_time(self):
        """Gets the emergency_address_update_time of this InlineResponse20046.  # noqa: E501

        Displayed when the number is `byoc` number. The emergency address info update time(format: 'yyyy-MM-ddThh:dd:ssZ').  # noqa: E501

        :return: The emergency_address_update_time of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._emergency_address_update_time

    @emergency_address_update_time.setter
    def emergency_address_update_time(self, emergency_address_update_time):
        """Sets the emergency_address_update_time of this InlineResponse20046.

        Displayed when the number is `byoc` number. The emergency address info update time(format: 'yyyy-MM-ddThh:dd:ssZ').  # noqa: E501

        :param emergency_address_update_time: The emergency_address_update_time of this InlineResponse20046.  # noqa: E501
        :type: str
        """

        self._emergency_address_update_time = emergency_address_update_time

    @property
    def id(self):
        """Gets the id of this InlineResponse20046.  # noqa: E501

        Unique Identifier of the Phone Number.  # noqa: E501

        :return: The id of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20046.

        Unique Identifier of the Phone Number.  # noqa: E501

        :param id: The id of this InlineResponse20046.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def location(self):
        """Gets the location of this InlineResponse20046.  # noqa: E501

        Location (city, state and country) where the Phone number is assigned.  # noqa: E501

        :return: The location of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this InlineResponse20046.

        Location (city, state and country) where the Phone number is assigned.  # noqa: E501

        :param location: The location of this InlineResponse20046.  # noqa: E501
        :type: str
        """

        self._location = location

    @property
    def number(self):
        """Gets the number of this InlineResponse20046.  # noqa: E501

        Phone number in E164 format.  # noqa: E501

        :return: The number of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this InlineResponse20046.

        Phone number in E164 format.  # noqa: E501

        :param number: The number of this InlineResponse20046.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def number_type(self):
        """Gets the number_type of this InlineResponse20046.  # noqa: E501

        The type of number. Values can be one of the following:<br> `toll`, `tollfree`  # noqa: E501

        :return: The number_type of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._number_type

    @number_type.setter
    def number_type(self, number_type):
        """Sets the number_type of this InlineResponse20046.

        The type of number. Values can be one of the following:<br> `toll`, `tollfree`  # noqa: E501

        :param number_type: The number_type of this InlineResponse20046.  # noqa: E501
        :type: str
        """
        allowed_values = ["toll", "tollfree"]  # noqa: E501
        if number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(number_type, allowed_values)
            )

        self._number_type = number_type

    @property
    def sip_group(self):
        """Gets the sip_group of this InlineResponse20046.  # noqa: E501


        :return: The sip_group of this InlineResponse20046.  # noqa: E501
        :rtype: InlineResponse20046SipGroup
        """
        return self._sip_group

    @sip_group.setter
    def sip_group(self, sip_group):
        """Sets the sip_group of this InlineResponse20046.


        :param sip_group: The sip_group of this InlineResponse20046.  # noqa: E501
        :type: InlineResponse20046SipGroup
        """

        self._sip_group = sip_group

    @property
    def site(self):
        """Gets the site of this InlineResponse20046.  # noqa: E501


        :return: The site of this InlineResponse20046.  # noqa: E501
        :rtype: InlineResponse2007Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20046.


        :param site: The site of this InlineResponse20046.  # noqa: E501
        :type: InlineResponse2007Site
        """

        self._site = site

    @property
    def source(self):
        """Gets the source of this InlineResponse20046.  # noqa: E501

        Source of phone number.  # noqa: E501

        :return: The source of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this InlineResponse20046.

        Source of phone number.  # noqa: E501

        :param source: The source of this InlineResponse20046.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "external"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def status(self):
        """Gets the status of this InlineResponse20046.  # noqa: E501

        Status of the number.  # noqa: E501

        :return: The status of this InlineResponse20046.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20046.

        Status of the number.  # noqa: E501

        :param status: The status of this InlineResponse20046.  # noqa: E501
        :type: str
        """
        allowed_values = ["pending", "available"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20046, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20046):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
