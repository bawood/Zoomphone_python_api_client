# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20046Assignee(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'audio_prompt_language': 'str',
        'display_number': 'str',
        'extension_number': 'int',
        'greeting': 'InlineResponse20046AssigneeGreeting',
        'id': 'str',
        'label': 'str',
        'meeting_id': 'str',
        'name': 'str',
        'on_hold_music': 'InlineResponse20046AssigneeOnHoldMusic',
        'type': 'str'
    }

    attribute_map = {
        'audio_prompt_language': 'audio_prompt_language',
        'display_number': 'display_number',
        'extension_number': 'extension_number',
        'greeting': 'greeting',
        'id': 'id',
        'label': 'label',
        'meeting_id': 'meeting_id',
        'name': 'name',
        'on_hold_music': 'on_hold_music',
        'type': 'type'
    }

    def __init__(self, audio_prompt_language=None, display_number=None, extension_number=None, greeting=None, id=None, label=None, meeting_id=None, name=None, on_hold_music=None, type=None):  # noqa: E501
        """InlineResponse20046Assignee - a model defined in Swagger"""  # noqa: E501
        self._audio_prompt_language = None
        self._display_number = None
        self._extension_number = None
        self._greeting = None
        self._id = None
        self._label = None
        self._meeting_id = None
        self._name = None
        self._on_hold_music = None
        self._type = None
        self.discriminator = None
        if audio_prompt_language is not None:
            self.audio_prompt_language = audio_prompt_language
        if display_number is not None:
            self.display_number = display_number
        if extension_number is not None:
            self.extension_number = extension_number
        if greeting is not None:
            self.greeting = greeting
        if id is not None:
            self.id = id
        if label is not None:
            self.label = label
        if meeting_id is not None:
            self.meeting_id = meeting_id
        if name is not None:
            self.name = name
        if on_hold_music is not None:
            self.on_hold_music = on_hold_music
        if type is not None:
            self.type = type

    @property
    def audio_prompt_language(self):
        """Gets the audio_prompt_language of this InlineResponse20046Assignee.  # noqa: E501


        :return: The audio_prompt_language of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._audio_prompt_language

    @audio_prompt_language.setter
    def audio_prompt_language(self, audio_prompt_language):
        """Sets the audio_prompt_language of this InlineResponse20046Assignee.


        :param audio_prompt_language: The audio_prompt_language of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._audio_prompt_language = audio_prompt_language

    @property
    def display_number(self):
        """Gets the display_number of this InlineResponse20046Assignee.  # noqa: E501

        Used for meeting service. Define how the number will be formatted and displayed in meeting invitations and emails.  # noqa: E501

        :return: The display_number of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._display_number

    @display_number.setter
    def display_number(self, display_number):
        """Sets the display_number of this InlineResponse20046Assignee.

        Used for meeting service. Define how the number will be formatted and displayed in meeting invitations and emails.  # noqa: E501

        :param display_number: The display_number of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._display_number = display_number

    @property
    def extension_number(self):
        """Gets the extension_number of this InlineResponse20046Assignee.  # noqa: E501

        Extension number of the Phone.  # noqa: E501

        :return: The extension_number of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: int
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this InlineResponse20046Assignee.

        Extension number of the Phone.  # noqa: E501

        :param extension_number: The extension_number of this InlineResponse20046Assignee.  # noqa: E501
        :type: int
        """

        self._extension_number = extension_number

    @property
    def greeting(self):
        """Gets the greeting of this InlineResponse20046Assignee.  # noqa: E501


        :return: The greeting of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: InlineResponse20046AssigneeGreeting
        """
        return self._greeting

    @greeting.setter
    def greeting(self, greeting):
        """Sets the greeting of this InlineResponse20046Assignee.


        :param greeting: The greeting of this InlineResponse20046Assignee.  # noqa: E501
        :type: InlineResponse20046AssigneeGreeting
        """

        self._greeting = greeting

    @property
    def id(self):
        """Gets the id of this InlineResponse20046Assignee.  # noqa: E501

        ID of the user to whom the number and the following are assigned: emergency number pool (if the account has multiple sites enabled, the ID is `siteId`, else `accountId`) and company location   # noqa: E501

        :return: The id of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20046Assignee.

        ID of the user to whom the number and the following are assigned: emergency number pool (if the account has multiple sites enabled, the ID is `siteId`, else `accountId`) and company location   # noqa: E501

        :param id: The id of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def label(self):
        """Gets the label of this InlineResponse20046Assignee.  # noqa: E501

        Optional, used for meeting service. This label will be appended to the number in parentheses, and will appear in meeting invitations and the zoom client. Formatting rules: Maximum 32 characters Do not use digits Do not use characters \"(\" \")\" \",\" \";\" or \":\"  # noqa: E501

        :return: The label of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._label

    @label.setter
    def label(self, label):
        """Sets the label of this InlineResponse20046Assignee.

        Optional, used for meeting service. This label will be appended to the number in parentheses, and will appear in meeting invitations and the zoom client. Formatting rules: Maximum 32 characters Do not use digits Do not use characters \"(\" \")\" \",\" \";\" or \":\"  # noqa: E501

        :param label: The label of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._label = label

    @property
    def meeting_id(self):
        """Gets the meeting_id of this InlineResponse20046Assignee.  # noqa: E501

        Meeting ID used for meeting service.  # noqa: E501

        :return: The meeting_id of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._meeting_id

    @meeting_id.setter
    def meeting_id(self, meeting_id):
        """Sets the meeting_id of this InlineResponse20046Assignee.

        Meeting ID used for meeting service.  # noqa: E501

        :param meeting_id: The meeting_id of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._meeting_id = meeting_id

    @property
    def name(self):
        """Gets the name of this InlineResponse20046Assignee.  # noqa: E501

        Name of the user to whom the number, emergency number pool and company location are assigned.  # noqa: E501

        :return: The name of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20046Assignee.

        Name of the user to whom the number, emergency number pool and company location are assigned.  # noqa: E501

        :param name: The name of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def on_hold_music(self):
        """Gets the on_hold_music of this InlineResponse20046Assignee.  # noqa: E501


        :return: The on_hold_music of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: InlineResponse20046AssigneeOnHoldMusic
        """
        return self._on_hold_music

    @on_hold_music.setter
    def on_hold_music(self, on_hold_music):
        """Sets the on_hold_music of this InlineResponse20046Assignee.


        :param on_hold_music: The on_hold_music of this InlineResponse20046Assignee.  # noqa: E501
        :type: InlineResponse20046AssigneeOnHoldMusic
        """

        self._on_hold_music = on_hold_music

    @property
    def type(self):
        """Gets the type of this InlineResponse20046Assignee.  # noqa: E501

        Indicates who the phone number belongs to.<br> `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-common-area-phones).<br> `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br> `emergencyNumberPool` `companyLocation` `meetingService`  # noqa: E501

        :return: The type of this InlineResponse20046Assignee.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20046Assignee.

        Indicates who the phone number belongs to.<br> `user`: Number has been assigned to an existing phone user allowing them to receive calls through their extension number or direct phone number.<br> `callQueue`: Phone number has been assigned to a [call queue](https://support.zoom.us/hc/en-us/articles/360021524831-Managing-Call-Queues).<br> `commonAreaPhone`: Phone number has been assigned to a [common area phone](https://support.zoom.us/hc/en-us/articles/360028516231-Managing-common-area-phones).<br> `autoReceptionist`: Phone number has been assigned to an [auto receptionist](https://support.zoom.us/hc/en-us/articles/360021121312-Managing-Auto-Receptionists-and-Integrated-Voice-Response-IVR-).<br> `emergencyNumberPool` `companyLocation` `meetingService`  # noqa: E501

        :param type: The type of this InlineResponse20046Assignee.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "callQueue", "autoReceptionist", "commonAreaPhone", "emergencyNumberPool", "companyLocation", "meetingService"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20046Assignee, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20046Assignee):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
