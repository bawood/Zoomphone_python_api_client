# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2004KeyActions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'int',
        'key': 'str',
        'target': 'InlineResponse2004Target',
        'voicemail_greeting': 'InlineResponse2004VoicemailGreeting'
    }

    attribute_map = {
        'action': 'action',
        'key': 'key',
        'target': 'target',
        'voicemail_greeting': 'voicemail_greeting'
    }

    def __init__(self, action=None, key=None, target=None, voicemail_greeting=None):  # noqa: E501
        """InlineResponse2004KeyActions - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._key = None
        self._target = None
        self._voicemail_greeting = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if key is not None:
            self.key = key
        if target is not None:
            self.target = target
        if voicemail_greeting is not None:
            self.voicemail_greeting = voicemail_greeting

    @property
    def action(self):
        """Gets the action of this InlineResponse2004KeyActions.  # noqa: E501

        The action after clicking the key.<br> For key `0`-`9`<br> `100` Leave voicemail to the current extension<br> `200` Leave voicemail to the user<br> `300` Leave voicemail to the auto receptionist<br> `400` Leave voicemail to the  call queue<br> `500` Leave voicemail to the shared line group<br> `2` Forward to the user<br> `3` Forward to Zoom Room<br> `4` Forward to the common area<br> `5` Forward to Cisco/Polycom Room<br> `6` Forward to the auto receptionist<br> `7` Forward to the call queue<br> `8` Forward to the shared line group<br> `9` Forward to external contacts<br> `10` Forward to a phone number<br> `15` Forward to the contact center<br> `16` Forward to the meeting service<br> `17` Forward to the meeting service number<br> `-1` Disabled  For key * or #<br> `21` Repeat menu greeting<br> `22` Return to the root menu<br> `23` Return to the previous menu<br> `-1` Disabled  # noqa: E501

        :return: The action of this InlineResponse2004KeyActions.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this InlineResponse2004KeyActions.

        The action after clicking the key.<br> For key `0`-`9`<br> `100` Leave voicemail to the current extension<br> `200` Leave voicemail to the user<br> `300` Leave voicemail to the auto receptionist<br> `400` Leave voicemail to the  call queue<br> `500` Leave voicemail to the shared line group<br> `2` Forward to the user<br> `3` Forward to Zoom Room<br> `4` Forward to the common area<br> `5` Forward to Cisco/Polycom Room<br> `6` Forward to the auto receptionist<br> `7` Forward to the call queue<br> `8` Forward to the shared line group<br> `9` Forward to external contacts<br> `10` Forward to a phone number<br> `15` Forward to the contact center<br> `16` Forward to the meeting service<br> `17` Forward to the meeting service number<br> `-1` Disabled  For key * or #<br> `21` Repeat menu greeting<br> `22` Return to the root menu<br> `23` Return to the previous menu<br> `-1` Disabled  # noqa: E501

        :param action: The action of this InlineResponse2004KeyActions.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def key(self):
        """Gets the key of this InlineResponse2004KeyActions.  # noqa: E501

        The key. The following values are supported: numeric('0'-'9'), *, #.  # noqa: E501

        :return: The key of this InlineResponse2004KeyActions.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this InlineResponse2004KeyActions.

        The key. The following values are supported: numeric('0'-'9'), *, #.  # noqa: E501

        :param key: The key of this InlineResponse2004KeyActions.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def target(self):
        """Gets the target of this InlineResponse2004KeyActions.  # noqa: E501


        :return: The target of this InlineResponse2004KeyActions.  # noqa: E501
        :rtype: InlineResponse2004Target
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this InlineResponse2004KeyActions.


        :param target: The target of this InlineResponse2004KeyActions.  # noqa: E501
        :type: InlineResponse2004Target
        """

        self._target = target

    @property
    def voicemail_greeting(self):
        """Gets the voicemail_greeting of this InlineResponse2004KeyActions.  # noqa: E501


        :return: The voicemail_greeting of this InlineResponse2004KeyActions.  # noqa: E501
        :rtype: InlineResponse2004VoicemailGreeting
        """
        return self._voicemail_greeting

    @voicemail_greeting.setter
    def voicemail_greeting(self, voicemail_greeting):
        """Sets the voicemail_greeting of this InlineResponse2004KeyActions.


        :param voicemail_greeting: The voicemail_greeting of this InlineResponse2004KeyActions.  # noqa: E501
        :type: InlineResponse2004VoicemailGreeting
        """

        self._voicemail_greeting = voicemail_greeting

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2004KeyActions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2004KeyActions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
