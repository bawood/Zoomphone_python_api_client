# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20052(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'contact_emails': 'str',
        'contact_number': 'str',
        'isp': 'str',
        'numbers': 'list[str]',
        'order_id': 'str',
        'original_billing_info': 'InlineResponse20052OriginalBillingInfo',
        'printed_name': 'str',
        'replacing_numbers': 'list[InlineResponse20051ReplacingNumbers]',
        'status': 'str',
        'submission_date_time': 'str'
    }

    attribute_map = {
        'contact_emails': 'contact_emails',
        'contact_number': 'contact_number',
        'isp': 'isp',
        'numbers': 'numbers',
        'order_id': 'order_id',
        'original_billing_info': 'original_billing_info',
        'printed_name': 'printed_name',
        'replacing_numbers': 'replacing_numbers',
        'status': 'status',
        'submission_date_time': 'submission_date_time'
    }

    def __init__(self, contact_emails=None, contact_number=None, isp=None, numbers=None, order_id=None, original_billing_info=None, printed_name=None, replacing_numbers=None, status=None, submission_date_time=None):  # noqa: E501
        """InlineResponse20052 - a model defined in Swagger"""  # noqa: E501
        self._contact_emails = None
        self._contact_number = None
        self._isp = None
        self._numbers = None
        self._order_id = None
        self._original_billing_info = None
        self._printed_name = None
        self._replacing_numbers = None
        self._status = None
        self._submission_date_time = None
        self.discriminator = None
        if contact_emails is not None:
            self.contact_emails = contact_emails
        if contact_number is not None:
            self.contact_number = contact_number
        if isp is not None:
            self.isp = isp
        if numbers is not None:
            self.numbers = numbers
        if order_id is not None:
            self.order_id = order_id
        if original_billing_info is not None:
            self.original_billing_info = original_billing_info
        if printed_name is not None:
            self.printed_name = printed_name
        if replacing_numbers is not None:
            self.replacing_numbers = replacing_numbers
        if status is not None:
            self.status = status
        if submission_date_time is not None:
            self.submission_date_time = submission_date_time

    @property
    def contact_emails(self):
        """Gets the contact_emails of this InlineResponse20052.  # noqa: E501

        Contact emails of transferring numbers.  # noqa: E501

        :return: The contact_emails of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._contact_emails

    @contact_emails.setter
    def contact_emails(self, contact_emails):
        """Sets the contact_emails of this InlineResponse20052.

        Contact emails of transferring numbers.  # noqa: E501

        :param contact_emails: The contact_emails of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._contact_emails = contact_emails

    @property
    def contact_number(self):
        """Gets the contact_number of this InlineResponse20052.  # noqa: E501

        Contact numbers for transferring numbers.  # noqa: E501

        :return: The contact_number of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._contact_number

    @contact_number.setter
    def contact_number(self, contact_number):
        """Sets the contact_number of this InlineResponse20052.

        Contact numbers for transferring numbers.  # noqa: E501

        :param contact_number: The contact_number of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._contact_number = contact_number

    @property
    def isp(self):
        """Gets the isp of this InlineResponse20052.  # noqa: E501

        Ported numbers' ISP.  # noqa: E501

        :return: The isp of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._isp

    @isp.setter
    def isp(self, isp):
        """Sets the isp of this InlineResponse20052.

        Ported numbers' ISP.  # noqa: E501

        :param isp: The isp of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._isp = isp

    @property
    def numbers(self):
        """Gets the numbers of this InlineResponse20052.  # noqa: E501

        Ported numbers.  # noqa: E501

        :return: The numbers of this InlineResponse20052.  # noqa: E501
        :rtype: list[str]
        """
        return self._numbers

    @numbers.setter
    def numbers(self, numbers):
        """Sets the numbers of this InlineResponse20052.

        Ported numbers.  # noqa: E501

        :param numbers: The numbers of this InlineResponse20052.  # noqa: E501
        :type: list[str]
        """

        self._numbers = numbers

    @property
    def order_id(self):
        """Gets the order_id of this InlineResponse20052.  # noqa: E501

        Ported numbers' order ID.  # noqa: E501

        :return: The order_id of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._order_id

    @order_id.setter
    def order_id(self, order_id):
        """Sets the order_id of this InlineResponse20052.

        Ported numbers' order ID.  # noqa: E501

        :param order_id: The order_id of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._order_id = order_id

    @property
    def original_billing_info(self):
        """Gets the original_billing_info of this InlineResponse20052.  # noqa: E501


        :return: The original_billing_info of this InlineResponse20052.  # noqa: E501
        :rtype: InlineResponse20052OriginalBillingInfo
        """
        return self._original_billing_info

    @original_billing_info.setter
    def original_billing_info(self, original_billing_info):
        """Sets the original_billing_info of this InlineResponse20052.


        :param original_billing_info: The original_billing_info of this InlineResponse20052.  # noqa: E501
        :type: InlineResponse20052OriginalBillingInfo
        """

        self._original_billing_info = original_billing_info

    @property
    def printed_name(self):
        """Gets the printed_name of this InlineResponse20052.  # noqa: E501

        Printed names on transferring numbers.  # noqa: E501

        :return: The printed_name of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._printed_name

    @printed_name.setter
    def printed_name(self, printed_name):
        """Sets the printed_name of this InlineResponse20052.

        Printed names on transferring numbers.  # noqa: E501

        :param printed_name: The printed_name of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._printed_name = printed_name

    @property
    def replacing_numbers(self):
        """Gets the replacing_numbers of this InlineResponse20052.  # noqa: E501

        The ported numbers' replacement numbers.  # noqa: E501

        :return: The replacing_numbers of this InlineResponse20052.  # noqa: E501
        :rtype: list[InlineResponse20051ReplacingNumbers]
        """
        return self._replacing_numbers

    @replacing_numbers.setter
    def replacing_numbers(self, replacing_numbers):
        """Sets the replacing_numbers of this InlineResponse20052.

        The ported numbers' replacement numbers.  # noqa: E501

        :param replacing_numbers: The replacing_numbers of this InlineResponse20052.  # noqa: E501
        :type: list[InlineResponse20051ReplacingNumbers]
        """

        self._replacing_numbers = replacing_numbers

    @property
    def status(self):
        """Gets the status of this InlineResponse20052.  # noqa: E501

        Ported numbers' status.  # noqa: E501

        :return: The status of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20052.

        Ported numbers' status.  # noqa: E501

        :param status: The status of this InlineResponse20052.  # noqa: E501
        :type: str
        """
        allowed_values = ["Not_Submitted", "Waiting", "Processing", "Successfully", "Rejected", "Canceled", "FOC"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def submission_date_time(self):
        """Gets the submission_date_time of this InlineResponse20052.  # noqa: E501

        The time ported numbers were submitted (format: 'yyyy-MM-ddThh:dd:ssZ').  # noqa: E501

        :return: The submission_date_time of this InlineResponse20052.  # noqa: E501
        :rtype: str
        """
        return self._submission_date_time

    @submission_date_time.setter
    def submission_date_time(self, submission_date_time):
        """Sets the submission_date_time of this InlineResponse20052.

        The time ported numbers were submitted (format: 'yyyy-MM-ddThh:dd:ssZ').  # noqa: E501

        :param submission_date_time: The submission_date_time of this InlineResponse20052.  # noqa: E501
        :type: str
        """

        self._submission_date_time = submission_date_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20052, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20052):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
