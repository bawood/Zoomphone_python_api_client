# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20052OriginalBillingInfoAddress(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'city': 'str',
        'country': 'str',
        'house_number': 'str',
        'state_code': 'str',
        'street_name': 'str',
        'zip': 'str'
    }

    attribute_map = {
        'city': 'city',
        'country': 'country',
        'house_number': 'house_number',
        'state_code': 'state_code',
        'street_name': 'street_name',
        'zip': 'zip'
    }

    def __init__(self, city=None, country=None, house_number=None, state_code=None, street_name=None, zip=None):  # noqa: E501
        """InlineResponse20052OriginalBillingInfoAddress - a model defined in Swagger"""  # noqa: E501
        self._city = None
        self._country = None
        self._house_number = None
        self._state_code = None
        self._street_name = None
        self._zip = None
        self.discriminator = None
        if city is not None:
            self.city = city
        if country is not None:
            self.country = country
        if house_number is not None:
            self.house_number = house_number
        if state_code is not None:
            self.state_code = state_code
        if street_name is not None:
            self.street_name = street_name
        if zip is not None:
            self.zip = zip

    @property
    def city(self):
        """Gets the city of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The city of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this InlineResponse20052OriginalBillingInfoAddress.


        :param city: The city of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def country(self):
        """Gets the country of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The country of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20052OriginalBillingInfoAddress.


        :param country: The country of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._country = country

    @property
    def house_number(self):
        """Gets the house_number of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The house_number of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._house_number

    @house_number.setter
    def house_number(self, house_number):
        """Sets the house_number of this InlineResponse20052OriginalBillingInfoAddress.


        :param house_number: The house_number of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._house_number = house_number

    @property
    def state_code(self):
        """Gets the state_code of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The state_code of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._state_code

    @state_code.setter
    def state_code(self, state_code):
        """Sets the state_code of this InlineResponse20052OriginalBillingInfoAddress.


        :param state_code: The state_code of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._state_code = state_code

    @property
    def street_name(self):
        """Gets the street_name of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The street_name of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._street_name

    @street_name.setter
    def street_name(self, street_name):
        """Sets the street_name of this InlineResponse20052OriginalBillingInfoAddress.


        :param street_name: The street_name of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._street_name = street_name

    @property
    def zip(self):
        """Gets the zip of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501


        :return: The zip of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :rtype: str
        """
        return self._zip

    @zip.setter
    def zip(self, zip):
        """Sets the zip of this InlineResponse20052OriginalBillingInfoAddress.


        :param zip: The zip of this InlineResponse20052OriginalBillingInfoAddress.  # noqa: E501
        :type: str
        """

        self._zip = zip

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20052OriginalBillingInfoAddress, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20052OriginalBillingInfoAddress):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
