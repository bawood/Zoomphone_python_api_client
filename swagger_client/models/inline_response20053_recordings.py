# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20053Recordings(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_id': 'str',
        'call_log_id': 'str',
        'callee_name': 'str',
        'callee_number': 'str',
        'callee_number_type': 'int',
        'caller_name': 'str',
        'caller_number': 'str',
        'caller_number_type': 'int',
        'outgoing_by': 'InlineResponse2009OutgoingBy',
        'accepted_by': 'InlineResponse20053AcceptedBy',
        'date_time': 'datetime',
        'direction': 'str',
        'download_url': 'str',
        'duration': 'int',
        'end_time': 'datetime',
        'id': 'str',
        'owner': 'InlineResponse20053Owner',
        'recording_type': 'str',
        'site': 'InlineResponse20053Site',
        'transcript_download_url': 'str'
    }

    attribute_map = {
        'call_id': 'call_id',
        'call_log_id': 'call_log_id',
        'callee_name': 'callee_name',
        'callee_number': 'callee_number',
        'callee_number_type': 'callee_number_type',
        'caller_name': 'caller_name',
        'caller_number': 'caller_number',
        'caller_number_type': 'caller_number_type',
        'outgoing_by': 'outgoing_by',
        'accepted_by': 'accepted_by',
        'date_time': 'date_time',
        'direction': 'direction',
        'download_url': 'download_url',
        'duration': 'duration',
        'end_time': 'end_time',
        'id': 'id',
        'owner': 'owner',
        'recording_type': 'recording_type',
        'site': 'site',
        'transcript_download_url': 'transcript_download_url'
    }

    def __init__(self, call_id=None, call_log_id=None, callee_name=None, callee_number=None, callee_number_type=None, caller_name=None, caller_number=None, caller_number_type=None, outgoing_by=None, accepted_by=None, date_time=None, direction=None, download_url=None, duration=None, end_time=None, id=None, owner=None, recording_type=None, site=None, transcript_download_url=None):  # noqa: E501
        """InlineResponse20053Recordings - a model defined in Swagger"""  # noqa: E501
        self._call_id = None
        self._call_log_id = None
        self._callee_name = None
        self._callee_number = None
        self._callee_number_type = None
        self._caller_name = None
        self._caller_number = None
        self._caller_number_type = None
        self._outgoing_by = None
        self._accepted_by = None
        self._date_time = None
        self._direction = None
        self._download_url = None
        self._duration = None
        self._end_time = None
        self._id = None
        self._owner = None
        self._recording_type = None
        self._site = None
        self._transcript_download_url = None
        self.discriminator = None
        if call_id is not None:
            self.call_id = call_id
        if call_log_id is not None:
            self.call_log_id = call_log_id
        if callee_name is not None:
            self.callee_name = callee_name
        if callee_number is not None:
            self.callee_number = callee_number
        if callee_number_type is not None:
            self.callee_number_type = callee_number_type
        if caller_name is not None:
            self.caller_name = caller_name
        if caller_number is not None:
            self.caller_number = caller_number
        if caller_number_type is not None:
            self.caller_number_type = caller_number_type
        if outgoing_by is not None:
            self.outgoing_by = outgoing_by
        if accepted_by is not None:
            self.accepted_by = accepted_by
        if date_time is not None:
            self.date_time = date_time
        if direction is not None:
            self.direction = direction
        if download_url is not None:
            self.download_url = download_url
        if duration is not None:
            self.duration = duration
        if end_time is not None:
            self.end_time = end_time
        if id is not None:
            self.id = id
        if owner is not None:
            self.owner = owner
        if recording_type is not None:
            self.recording_type = recording_type
        if site is not None:
            self.site = site
        if transcript_download_url is not None:
            self.transcript_download_url = transcript_download_url

    @property
    def call_id(self):
        """Gets the call_id of this InlineResponse20053Recordings.  # noqa: E501

        The phone call's unique ID.  # noqa: E501

        :return: The call_id of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this InlineResponse20053Recordings.

        The phone call's unique ID.  # noqa: E501

        :param call_id: The call_id of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._call_id = call_id

    @property
    def call_log_id(self):
        """Gets the call_log_id of this InlineResponse20053Recordings.  # noqa: E501

        The phone call log's unique ID.  # noqa: E501

        :return: The call_log_id of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._call_log_id

    @call_log_id.setter
    def call_log_id(self, call_log_id):
        """Sets the call_log_id of this InlineResponse20053Recordings.

        The phone call log's unique ID.  # noqa: E501

        :param call_log_id: The call_log_id of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._call_log_id = call_log_id

    @property
    def callee_name(self):
        """Gets the callee_name of this InlineResponse20053Recordings.  # noqa: E501

        The contact name of the callee.  # noqa: E501

        :return: The callee_name of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._callee_name

    @callee_name.setter
    def callee_name(self, callee_name):
        """Sets the callee_name of this InlineResponse20053Recordings.

        The contact name of the callee.  # noqa: E501

        :param callee_name: The callee_name of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._callee_name = callee_name

    @property
    def callee_number(self):
        """Gets the callee_number of this InlineResponse20053Recordings.  # noqa: E501

        The phone number of the callee. Could be an e164 number or an extension. Extension number is a combination of the site number and a short extension.  # noqa: E501

        :return: The callee_number of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._callee_number

    @callee_number.setter
    def callee_number(self, callee_number):
        """Sets the callee_number of this InlineResponse20053Recordings.

        The phone number of the callee. Could be an e164 number or an extension. Extension number is a combination of the site number and a short extension.  # noqa: E501

        :param callee_number: The callee_number of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._callee_number = callee_number

    @property
    def callee_number_type(self):
        """Gets the callee_number_type of this InlineResponse20053Recordings.  # noqa: E501

        The callee's number type:  * `1` — Internal number.  * `2` — External number. * `3` — Customized emergency number.  # noqa: E501

        :return: The callee_number_type of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: int
        """
        return self._callee_number_type

    @callee_number_type.setter
    def callee_number_type(self, callee_number_type):
        """Sets the callee_number_type of this InlineResponse20053Recordings.

        The callee's number type:  * `1` — Internal number.  * `2` — External number. * `3` — Customized emergency number.  # noqa: E501

        :param callee_number_type: The callee_number_type of this InlineResponse20053Recordings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if callee_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `callee_number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(callee_number_type, allowed_values)
            )

        self._callee_number_type = callee_number_type

    @property
    def caller_name(self):
        """Gets the caller_name of this InlineResponse20053Recordings.  # noqa: E501

        The contact name of the caller.  # noqa: E501

        :return: The caller_name of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this InlineResponse20053Recordings.

        The contact name of the caller.  # noqa: E501

        :param caller_name: The caller_name of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._caller_name = caller_name

    @property
    def caller_number(self):
        """Gets the caller_number of this InlineResponse20053Recordings.  # noqa: E501

        The phone number associated with the caller. Could be an e164 number or an extension. Extension number is a combination of the site number and the short extension.  # noqa: E501

        :return: The caller_number of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._caller_number

    @caller_number.setter
    def caller_number(self, caller_number):
        """Sets the caller_number of this InlineResponse20053Recordings.

        The phone number associated with the caller. Could be an e164 number or an extension. Extension number is a combination of the site number and the short extension.  # noqa: E501

        :param caller_number: The caller_number of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._caller_number = caller_number

    @property
    def caller_number_type(self):
        """Gets the caller_number_type of this InlineResponse20053Recordings.  # noqa: E501

        The caller's number type:  * `1` — Internal  number.  * `2` — External number.  # noqa: E501

        :return: The caller_number_type of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: int
        """
        return self._caller_number_type

    @caller_number_type.setter
    def caller_number_type(self, caller_number_type):
        """Sets the caller_number_type of this InlineResponse20053Recordings.

        The caller's number type:  * `1` — Internal  number.  * `2` — External number.  # noqa: E501

        :param caller_number_type: The caller_number_type of this InlineResponse20053Recordings.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if caller_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(caller_number_type, allowed_values)
            )

        self._caller_number_type = caller_number_type

    @property
    def outgoing_by(self):
        """Gets the outgoing_by of this InlineResponse20053Recordings.  # noqa: E501


        :return: The outgoing_by of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: InlineResponse2009OutgoingBy
        """
        return self._outgoing_by

    @outgoing_by.setter
    def outgoing_by(self, outgoing_by):
        """Sets the outgoing_by of this InlineResponse20053Recordings.


        :param outgoing_by: The outgoing_by of this InlineResponse20053Recordings.  # noqa: E501
        :type: InlineResponse2009OutgoingBy
        """

        self._outgoing_by = outgoing_by

    @property
    def accepted_by(self):
        """Gets the accepted_by of this InlineResponse20053Recordings.  # noqa: E501


        :return: The accepted_by of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: InlineResponse20053AcceptedBy
        """
        return self._accepted_by

    @accepted_by.setter
    def accepted_by(self, accepted_by):
        """Sets the accepted_by of this InlineResponse20053Recordings.


        :param accepted_by: The accepted_by of this InlineResponse20053Recordings.  # noqa: E501
        :type: InlineResponse20053AcceptedBy
        """

        self._accepted_by = accepted_by

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse20053Recordings.  # noqa: E501

        The date and time when the recording was received.  # noqa: E501

        :return: The date_time of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: datetime
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse20053Recordings.

        The date and time when the recording was received.  # noqa: E501

        :param date_time: The date_time of this InlineResponse20053Recordings.  # noqa: E501
        :type: datetime
        """

        self._date_time = date_time

    @property
    def direction(self):
        """Gets the direction of this InlineResponse20053Recordings.  # noqa: E501

        The direction of the call. Values: `inbound` or `outbound`.  # noqa: E501

        :return: The direction of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this InlineResponse20053Recordings.

        The direction of the call. Values: `inbound` or `outbound`.  # noqa: E501

        :param direction: The direction of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def download_url(self):
        """Gets the download_url of this InlineResponse20053Recordings.  # noqa: E501

        The download URL for the recording.  # noqa: E501

        :return: The download_url of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """Sets the download_url of this InlineResponse20053Recordings.

        The download URL for the recording.  # noqa: E501

        :param download_url: The download_url of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._download_url = download_url

    @property
    def duration(self):
        """Gets the duration of this InlineResponse20053Recordings.  # noqa: E501

        The call recording's duration, in seconds.  # noqa: E501

        :return: The duration of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse20053Recordings.

        The call recording's duration, in seconds.  # noqa: E501

        :param duration: The duration of this InlineResponse20053Recordings.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def end_time(self):
        """Gets the end_time of this InlineResponse20053Recordings.  # noqa: E501

        The recording's end time.  # noqa: E501

        :return: The end_time of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: datetime
        """
        return self._end_time

    @end_time.setter
    def end_time(self, end_time):
        """Sets the end_time of this InlineResponse20053Recordings.

        The recording's end time.  # noqa: E501

        :param end_time: The end_time of this InlineResponse20053Recordings.  # noqa: E501
        :type: datetime
        """

        self._end_time = end_time

    @property
    def id(self):
        """Gets the id of this InlineResponse20053Recordings.  # noqa: E501

        The unique identifier of the recording.  # noqa: E501

        :return: The id of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20053Recordings.

        The unique identifier of the recording.  # noqa: E501

        :param id: The id of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def owner(self):
        """Gets the owner of this InlineResponse20053Recordings.  # noqa: E501


        :return: The owner of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: InlineResponse20053Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this InlineResponse20053Recordings.


        :param owner: The owner of this InlineResponse20053Recordings.  # noqa: E501
        :type: InlineResponse20053Owner
        """

        self._owner = owner

    @property
    def recording_type(self):
        """Gets the recording_type of this InlineResponse20053Recordings.  # noqa: E501

        The recording type. The allowed values are `OnDemand` or `Automatic`.  # noqa: E501

        :return: The recording_type of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._recording_type

    @recording_type.setter
    def recording_type(self, recording_type):
        """Sets the recording_type of this InlineResponse20053Recordings.

        The recording type. The allowed values are `OnDemand` or `Automatic`.  # noqa: E501

        :param recording_type: The recording_type of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._recording_type = recording_type

    @property
    def site(self):
        """Gets the site of this InlineResponse20053Recordings.  # noqa: E501


        :return: The site of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: InlineResponse20053Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse20053Recordings.


        :param site: The site of this InlineResponse20053Recordings.  # noqa: E501
        :type: InlineResponse20053Site
        """

        self._site = site

    @property
    def transcript_download_url(self):
        """Gets the transcript_download_url of this InlineResponse20053Recordings.  # noqa: E501

        The download URL for the recording transcript.  # noqa: E501

        :return: The transcript_download_url of this InlineResponse20053Recordings.  # noqa: E501
        :rtype: str
        """
        return self._transcript_download_url

    @transcript_download_url.setter
    def transcript_download_url(self, transcript_download_url):
        """Sets the transcript_download_url of this InlineResponse20053Recordings.

        The download URL for the recording transcript.  # noqa: E501

        :param transcript_download_url: The transcript_download_url of this InlineResponse20053Recordings.  # noqa: E501
        :type: str
        """

        self._transcript_download_url = transcript_download_url

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20053Recordings, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20053Recordings):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
