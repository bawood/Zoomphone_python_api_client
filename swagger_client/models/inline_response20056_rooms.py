# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20056Rooms(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'display_name': 'str',
        'location_id': 'str',
        'location_info': 'str',
        'department': 'str',
        'cost_center': 'str'
    }

    attribute_map = {
        'id': 'id',
        'display_name': 'display_name',
        'location_id': 'location_id',
        'location_info': 'location_info',
        'department': 'department',
        'cost_center': 'cost_center'
    }

    def __init__(self, id=None, display_name=None, location_id=None, location_info=None, department=None, cost_center=None):  # noqa: E501
        """InlineResponse20056Rooms - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._display_name = None
        self._location_id = None
        self._location_info = None
        self._department = None
        self._cost_center = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if display_name is not None:
            self.display_name = display_name
        if location_id is not None:
            self.location_id = location_id
        if location_info is not None:
            self.location_info = location_info
        if department is not None:
            self.department = department
        if cost_center is not None:
            self.cost_center = cost_center

    @property
    def id(self):
        """Gets the id of this InlineResponse20056Rooms.  # noqa: E501

        The Zoom Room ID.  # noqa: E501

        :return: The id of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20056Rooms.

        The Zoom Room ID.  # noqa: E501

        :param id: The id of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def display_name(self):
        """Gets the display_name of this InlineResponse20056Rooms.  # noqa: E501

        Name of the Zoom Room.  # noqa: E501

        :return: The display_name of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this InlineResponse20056Rooms.

        Name of the Zoom Room.  # noqa: E501

        :param display_name: The display_name of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def location_id(self):
        """Gets the location_id of this InlineResponse20056Rooms.  # noqa: E501

        The Zoom Room location ID.  # noqa: E501

        :return: The location_id of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this InlineResponse20056Rooms.

        The Zoom Room location ID.  # noqa: E501

        :param location_id: The location_id of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    @property
    def location_info(self):
        """Gets the location_info of this InlineResponse20056Rooms.  # noqa: E501

        The Zoom Room location information.  # noqa: E501

        :return: The location_info of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._location_info

    @location_info.setter
    def location_info(self, location_info):
        """Sets the location_info of this InlineResponse20056Rooms.

        The Zoom Room location information.  # noqa: E501

        :param location_info: The location_info of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._location_info = location_info

    @property
    def department(self):
        """Gets the department of this InlineResponse20056Rooms.  # noqa: E501

        The department the Zoom Room belongs to.  # noqa: E501

        :return: The department of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse20056Rooms.

        The department the Zoom Room belongs to.  # noqa: E501

        :param department: The department of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def cost_center(self):
        """Gets the cost_center of this InlineResponse20056Rooms.  # noqa: E501

        The cost center the Zoom Room belongs to.  # noqa: E501

        :return: The cost_center of this InlineResponse20056Rooms.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this InlineResponse20056Rooms.

        The cost center the Zoom Room belongs to.  # noqa: E501

        :param cost_center: The cost_center of this InlineResponse20056Rooms.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20056Rooms, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20056Rooms):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
