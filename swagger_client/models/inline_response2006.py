# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2006(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block_type': 'str',
        'comment': 'str',
        'id': 'str',
        'match_type': 'str',
        'phone_number': 'str',
        'status': 'str'
    }

    attribute_map = {
        'block_type': 'block_type',
        'comment': 'comment',
        'id': 'id',
        'match_type': 'match_type',
        'phone_number': 'phone_number',
        'status': 'status'
    }

    def __init__(self, block_type=None, comment=None, id=None, match_type=None, phone_number=None, status=None):  # noqa: E501
        """InlineResponse2006 - a model defined in Swagger"""  # noqa: E501
        self._block_type = None
        self._comment = None
        self._id = None
        self._match_type = None
        self._phone_number = None
        self._status = None
        self.discriminator = None
        if block_type is not None:
            self.block_type = block_type
        if comment is not None:
            self.comment = comment
        if id is not None:
            self.id = id
        if match_type is not None:
            self.match_type = match_type
        if phone_number is not None:
            self.phone_number = phone_number
        if status is not None:
            self.status = status

    @property
    def block_type(self):
        """Gets the block_type of this InlineResponse2006.  # noqa: E501

        Block type.  * `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.  * `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.  # noqa: E501

        :return: The block_type of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._block_type

    @block_type.setter
    def block_type(self, block_type):
        """Sets the block_type of this InlineResponse2006.

        Block type.  * `inbound`: The blocked number or numbers with the specifie prefix are prevented from calling in to phone users.  * `outbound`: The phone users  are prevented from calling the blocked number or numbers with the specified prefix.  # noqa: E501

        :param block_type: The block_type of this InlineResponse2006.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound", "threat"]  # noqa: E501
        if block_type not in allowed_values:
            raise ValueError(
                "Invalid value for `block_type` ({0}), must be one of {1}"  # noqa: E501
                .format(block_type, allowed_values)
            )

        self._block_type = block_type

    @property
    def comment(self):
        """Gets the comment of this InlineResponse2006.  # noqa: E501

        Provide a comment to help you identify the blocked number or prefix.  # noqa: E501

        :return: The comment of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._comment

    @comment.setter
    def comment(self, comment):
        """Sets the comment of this InlineResponse2006.

        Provide a comment to help you identify the blocked number or prefix.  # noqa: E501

        :param comment: The comment of this InlineResponse2006.  # noqa: E501
        :type: str
        """

        self._comment = comment

    @property
    def id(self):
        """Gets the id of this InlineResponse2006.  # noqa: E501

        Unique identifier of the blocked list.  # noqa: E501

        :return: The id of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2006.

        Unique identifier of the blocked list.  # noqa: E501

        :param id: The id of this InlineResponse2006.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def match_type(self):
        """Gets the match_type of this InlineResponse2006.  # noqa: E501

        Indicates the match type for the blocked list. The values can be one of the following:  * `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.  * `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.  # noqa: E501

        :return: The match_type of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._match_type

    @match_type.setter
    def match_type(self, match_type):
        """Sets the match_type of this InlineResponse2006.

        Indicates the match type for the blocked list. The values can be one of the following:  * `phoneNumber`: Indicates that only a specific phone number that is shown in the `phone_number` field is blocked.  * `prefix`: Indicates that all numbers starting with prefix that is shown in the `phone_number` field are blocked.  # noqa: E501

        :param match_type: The match_type of this InlineResponse2006.  # noqa: E501
        :type: str
        """
        allowed_values = ["phoneNumber", "prefix"]  # noqa: E501
        if match_type not in allowed_values:
            raise ValueError(
                "Invalid value for `match_type` ({0}), must be one of {1}"  # noqa: E501
                .format(match_type, allowed_values)
            )

        self._match_type = match_type

    @property
    def phone_number(self):
        """Gets the phone_number of this InlineResponse2006.  # noqa: E501

        The phone number or the prefix number that is blocked based on the `match_type`. Displayed in E164 format.  # noqa: E501

        :return: The phone_number of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this InlineResponse2006.

        The phone number or the prefix number that is blocked based on the `match_type`. Displayed in E164 format.  # noqa: E501

        :param phone_number: The phone_number of this InlineResponse2006.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def status(self):
        """Gets the status of this InlineResponse2006.  # noqa: E501

        Indicates whether the blocking is active or inactive.  *n`active`: The blocked list is active.  * `inactive`: The blocked list is inactive.  # noqa: E501

        :return: The status of this InlineResponse2006.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse2006.

        Indicates whether the blocking is active or inactive.  *n`active`: The blocked list is active.  * `inactive`: The blocked list is inactive.  # noqa: E501

        :param status: The status of this InlineResponse2006.  # noqa: E501
        :type: str
        """
        allowed_values = ["active", "inactive"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2006, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2006):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
