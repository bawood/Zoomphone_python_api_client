# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'id': 'str',
        'name': 'str',
        'policy': 'InlineResponse20061Policy',
        'profile': 'InlineResponse20061Profile',
        'type': 'str',
        'user_settings': 'InlineResponse20061UserSettings'
    }

    attribute_map = {
        'description': 'description',
        'id': 'id',
        'name': 'name',
        'policy': 'policy',
        'profile': 'profile',
        'type': 'type',
        'user_settings': 'user_settings'
    }

    def __init__(self, description=None, id=None, name=None, policy=None, profile=None, type=None, user_settings=None):  # noqa: E501
        """InlineResponse20061 - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._id = None
        self._name = None
        self._policy = None
        self._profile = None
        self._type = None
        self._user_settings = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if policy is not None:
            self.policy = policy
        if profile is not None:
            self.profile = profile
        if type is not None:
            self.type = type
        if user_settings is not None:
            self.user_settings = user_settings

    @property
    def description(self):
        """Gets the description of this InlineResponse20061.  # noqa: E501

        The description of the template.  # noqa: E501

        :return: The description of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this InlineResponse20061.

        The description of the template.  # noqa: E501

        :param description: The description of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def id(self):
        """Gets the id of this InlineResponse20061.  # noqa: E501

        This field specifies the template ID.  # noqa: E501

        :return: The id of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061.

        This field specifies the template ID.  # noqa: E501

        :param id: The id of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20061.  # noqa: E501

        This field specifies the name of the template.  # noqa: E501

        :return: The name of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20061.

        This field specifies the name of the template.  # noqa: E501

        :param name: The name of this InlineResponse20061.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def policy(self):
        """Gets the policy of this InlineResponse20061.  # noqa: E501


        :return: The policy of this InlineResponse20061.  # noqa: E501
        :rtype: InlineResponse20061Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this InlineResponse20061.


        :param policy: The policy of this InlineResponse20061.  # noqa: E501
        :type: InlineResponse20061Policy
        """

        self._policy = policy

    @property
    def profile(self):
        """Gets the profile of this InlineResponse20061.  # noqa: E501


        :return: The profile of this InlineResponse20061.  # noqa: E501
        :rtype: InlineResponse20061Profile
        """
        return self._profile

    @profile.setter
    def profile(self, profile):
        """Sets the profile of this InlineResponse20061.


        :param profile: The profile of this InlineResponse20061.  # noqa: E501
        :type: InlineResponse20061Profile
        """

        self._profile = profile

    @property
    def type(self):
        """Gets the type of this InlineResponse20061.  # noqa: E501

        The type of template being queried. Values: `user`, `group`, `auto receptionist` `common area`,`zr`, `interop`.  # noqa: E501

        :return: The type of this InlineResponse20061.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20061.

        The type of template being queried. Values: `user`, `group`, `auto receptionist` `common area`,`zr`, `interop`.  # noqa: E501

        :param type: The type of this InlineResponse20061.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "group", "autoReceptionist", "commonArea", "zr", "interop"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def user_settings(self):
        """Gets the user_settings of this InlineResponse20061.  # noqa: E501


        :return: The user_settings of this InlineResponse20061.  # noqa: E501
        :rtype: InlineResponse20061UserSettings
        """
        return self._user_settings

    @user_settings.setter
    def user_settings(self, user_settings):
        """Sets the user_settings of this InlineResponse20061.


        :param user_settings: The user_settings of this InlineResponse20061.  # noqa: E501
        :type: InlineResponse20061UserSettings
        """

        self._user_settings = user_settings

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
