# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061UserSettingsCallHandlingCloseHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'close_hour_action': 'int',
        'connect_to_operator': 'InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator',
        'busy_action': 'int',
        'busy_connect_operator': 'InlineResponse20061UserSettingsCallHandlingCloseHoursBusyConnectOperator',
        'max_wait_time': 'str'
    }

    attribute_map = {
        'close_hour_action': 'close_hour_action',
        'connect_to_operator': 'connect_to_operator',
        'busy_action': 'busy_action',
        'busy_connect_operator': 'busy_connect_operator',
        'max_wait_time': 'max_wait_time'
    }

    def __init__(self, close_hour_action=None, connect_to_operator=None, busy_action=None, busy_connect_operator=None, max_wait_time=None):  # noqa: E501
        """InlineResponse20061UserSettingsCallHandlingCloseHours - a model defined in Swagger"""  # noqa: E501
        self._close_hour_action = None
        self._connect_to_operator = None
        self._busy_action = None
        self._busy_connect_operator = None
        self._max_wait_time = None
        self.discriminator = None
        if close_hour_action is not None:
            self.close_hour_action = close_hour_action
        if connect_to_operator is not None:
            self.connect_to_operator = connect_to_operator
        if busy_action is not None:
            self.busy_action = busy_action
        if busy_connect_operator is not None:
            self.busy_connect_operator = busy_connect_operator
        if max_wait_time is not None:
            self.max_wait_time = max_wait_time

    @property
    def close_hour_action(self):
        """Gets the close_hour_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501

        The action to take when a call is not answered:<br> 0-Forward to a voicemail; <br> 1-Play a message, then disconnect; <br> 9-Disconnect; <br> 11-Forward to an external number; <br> 26-Forward to External Contacts; <br> 50-Forward to another extension   # noqa: E501

        :return: The close_hour_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :rtype: int
        """
        return self._close_hour_action

    @close_hour_action.setter
    def close_hour_action(self, close_hour_action):
        """Sets the close_hour_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.

        The action to take when a call is not answered:<br> 0-Forward to a voicemail; <br> 1-Play a message, then disconnect; <br> 9-Disconnect; <br> 11-Forward to an external number; <br> 26-Forward to External Contacts; <br> 50-Forward to another extension   # noqa: E501

        :param close_hour_action: The close_hour_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 9, 11, 26, 50]  # noqa: E501
        if close_hour_action not in allowed_values:
            raise ValueError(
                "Invalid value for `close_hour_action` ({0}), must be one of {1}"  # noqa: E501
                .format(close_hour_action, allowed_values)
            )

        self._close_hour_action = close_hour_action

    @property
    def connect_to_operator(self):
        """Gets the connect_to_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501


        :return: The connect_to_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :rtype: InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator
        """
        return self._connect_to_operator

    @connect_to_operator.setter
    def connect_to_operator(self, connect_to_operator):
        """Sets the connect_to_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.


        :param connect_to_operator: The connect_to_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :type: InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator
        """

        self._connect_to_operator = connect_to_operator

    @property
    def busy_action(self):
        """Gets the busy_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501

        The action to take when the user is busy on another call:<br> 0-Forward to a voicemail;<br> 1-Play a message, then disconnect; <br> 11-Forward to an external number; <br> 12-Call waiting; <br> 13-Play a busy signal; <br> 26-Forward to External Contacts; <br> 50-Forward to another extension .  # noqa: E501

        :return: The busy_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :rtype: int
        """
        return self._busy_action

    @busy_action.setter
    def busy_action(self, busy_action):
        """Sets the busy_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.

        The action to take when the user is busy on another call:<br> 0-Forward to a voicemail;<br> 1-Play a message, then disconnect; <br> 11-Forward to an external number; <br> 12-Call waiting; <br> 13-Play a busy signal; <br> 26-Forward to External Contacts; <br> 50-Forward to another extension .  # noqa: E501

        :param busy_action: The busy_action of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 11, 12, 13, 26, 50]  # noqa: E501
        if busy_action not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_action` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_action, allowed_values)
            )

        self._busy_action = busy_action

    @property
    def busy_connect_operator(self):
        """Gets the busy_connect_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501


        :return: The busy_connect_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :rtype: InlineResponse20061UserSettingsCallHandlingCloseHoursBusyConnectOperator
        """
        return self._busy_connect_operator

    @busy_connect_operator.setter
    def busy_connect_operator(self, busy_connect_operator):
        """Sets the busy_connect_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.


        :param busy_connect_operator: The busy_connect_operator of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :type: InlineResponse20061UserSettingsCallHandlingCloseHoursBusyConnectOperator
        """

        self._busy_connect_operator = busy_connect_operator

    @property
    def max_wait_time(self):
        """Gets the max_wait_time of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501

        The maximum wait time in seconds. Values:<br> 10,15,20,25,30,35,40,45,50,55,60.  # noqa: E501

        :return: The max_wait_time of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :rtype: str
        """
        return self._max_wait_time

    @max_wait_time.setter
    def max_wait_time(self, max_wait_time):
        """Sets the max_wait_time of this InlineResponse20061UserSettingsCallHandlingCloseHours.

        The maximum wait time in seconds. Values:<br> 10,15,20,25,30,35,40,45,50,55,60.  # noqa: E501

        :param max_wait_time: The max_wait_time of this InlineResponse20061UserSettingsCallHandlingCloseHours.  # noqa: E501
        :type: str
        """
        allowed_values = ["10", "15", "20", "25", "30", "35", "40", "45", "50", "55", "60"]  # noqa: E501
        if max_wait_time not in allowed_values:
            raise ValueError(
                "Invalid value for `max_wait_time` ({0}), must be one of {1}"  # noqa: E501
                .format(max_wait_time, allowed_values)
            )

        self._max_wait_time = max_wait_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061UserSettingsCallHandlingCloseHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061UserSettingsCallHandlingCloseHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
