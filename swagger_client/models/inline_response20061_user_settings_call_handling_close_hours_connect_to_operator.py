# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'id': 'str',
        'type': 'str',
        'external_number': 'InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber',
        'play_callee_voicemail_greeting': 'bool',
        'require_press_1_before_connecting': 'bool',
        'allow_caller_check_voicemail': 'bool'
    }

    attribute_map = {
        'enable': 'enable',
        'id': 'id',
        'type': 'type',
        'external_number': 'external_number',
        'play_callee_voicemail_greeting': 'play_callee_voicemail_greeting',
        'require_press_1_before_connecting': 'require_press_1_before_connecting',
        'allow_caller_check_voicemail': 'allow_caller_check_voicemail'
    }

    def __init__(self, enable=None, id=None, type=None, external_number=None, play_callee_voicemail_greeting=None, require_press_1_before_connecting=None, allow_caller_check_voicemail=None):  # noqa: E501
        """InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._id = None
        self._type = None
        self._external_number = None
        self._play_callee_voicemail_greeting = None
        self._require_press_1_before_connecting = None
        self._allow_caller_check_voicemail = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if external_number is not None:
            self.external_number = external_number
        if play_callee_voicemail_greeting is not None:
            self.play_callee_voicemail_greeting = play_callee_voicemail_greeting
        if require_press_1_before_connecting is not None:
            self.require_press_1_before_connecting = require_press_1_before_connecting
        if allow_caller_check_voicemail is not None:
            self.allow_caller_check_voicemail = allow_caller_check_voicemail

    @property
    def enable(self):
        """Gets the enable of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501


        :return: The enable of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.


        :param enable: The enable of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def id(self):
        """Gets the id of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501

        The phone extension ID of the user, zoomRoom, commonAreaPhone, autoReceptionist, callQueue, or sharedLineGroup.  # noqa: E501

        :return: The id of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.

        The phone extension ID of the user, zoomRoom, commonAreaPhone, autoReceptionist, callQueue, or sharedLineGroup.  # noqa: E501

        :param id: The id of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501

        Values:  1-user,  2-callQueue,   3-autoReceptionist,  4-commonAreaPhone,  5-zoomRoom,   7-sharedLineGroup  # noqa: E501

        :return: The type of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.

        Values:  1-user,  2-callQueue,   3-autoReceptionist,  4-commonAreaPhone,  5-zoomRoom,   7-sharedLineGroup  # noqa: E501

        :param type: The type of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: str
        """
        allowed_values = ["user", "zoomRoom", "commonAreaPhone", "autoReceptionist", "callQueue", "sharedLineGroup"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def external_number(self):
        """Gets the external_number of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501


        :return: The external_number of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber
        """
        return self._external_number

    @external_number.setter
    def external_number(self, external_number):
        """Sets the external_number of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.


        :param external_number: The external_number of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperatorExternalNumber
        """

        self._external_number = external_number

    @property
    def play_callee_voicemail_greeting(self):
        """Gets the play_callee_voicemail_greeting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501

        Whether to play the callee's voicemail greeting when the caller reaches the end of forwarding sequence. Make available only when the `close_hour_action` is `0` or `50`.  # noqa: E501

        :return: The play_callee_voicemail_greeting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: bool
        """
        return self._play_callee_voicemail_greeting

    @play_callee_voicemail_greeting.setter
    def play_callee_voicemail_greeting(self, play_callee_voicemail_greeting):
        """Sets the play_callee_voicemail_greeting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.

        Whether to play the callee's voicemail greeting when the caller reaches the end of forwarding sequence. Make available only when the `close_hour_action` is `0` or `50`.  # noqa: E501

        :param play_callee_voicemail_greeting: The play_callee_voicemail_greeting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: bool
        """

        self._play_callee_voicemail_greeting = play_callee_voicemail_greeting

    @property
    def require_press_1_before_connecting(self):
        """Gets the require_press_1_before_connecting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501

        Whether to require pressing 1 before connecting the call. Make available only when the `close_hour_action` is `11` or '26'.  # noqa: E501

        :return: The require_press_1_before_connecting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: bool
        """
        return self._require_press_1_before_connecting

    @require_press_1_before_connecting.setter
    def require_press_1_before_connecting(self, require_press_1_before_connecting):
        """Sets the require_press_1_before_connecting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.

        Whether to require pressing 1 before connecting the call. Make available only when the `close_hour_action` is `11` or '26'.  # noqa: E501

        :param require_press_1_before_connecting: The require_press_1_before_connecting of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: bool
        """

        self._require_press_1_before_connecting = require_press_1_before_connecting

    @property
    def allow_caller_check_voicemail(self):
        """Gets the allow_caller_check_voicemail of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501

        Whether to allow callers to check their voicemail. Make available only when the `close_hour_action` is `0`.  # noqa: E501

        :return: The allow_caller_check_voicemail of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :rtype: bool
        """
        return self._allow_caller_check_voicemail

    @allow_caller_check_voicemail.setter
    def allow_caller_check_voicemail(self, allow_caller_check_voicemail):
        """Sets the allow_caller_check_voicemail of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.

        Whether to allow callers to check their voicemail. Make available only when the `close_hour_action` is `0`.  # noqa: E501

        :param allow_caller_check_voicemail: The allow_caller_check_voicemail of this InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator.  # noqa: E501
        :type: bool
        """

        self._allow_caller_check_voicemail = allow_caller_check_voicemail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20061UserSettingsCallHandlingCloseHoursConnectToOperator):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
