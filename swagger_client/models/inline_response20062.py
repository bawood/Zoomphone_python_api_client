# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20062(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'byoc': 'InlineResponse20062Byoc',
        'country': 'InlineResponse20062Country',
        'multiple_sites': 'InlineResponse20062MultipleSites',
        'show_device_ip_for_call_log': 'InlineResponse20062ShowDeviceIpForCallLog',
        'billing_account': 'InlineResponse20062BillingAccount'
    }

    attribute_map = {
        'byoc': 'byoc',
        'country': 'country',
        'multiple_sites': 'multiple_sites',
        'show_device_ip_for_call_log': 'show_device_ip_for_call_log',
        'billing_account': 'billing_account'
    }

    def __init__(self, byoc=None, country=None, multiple_sites=None, show_device_ip_for_call_log=None, billing_account=None):  # noqa: E501
        """InlineResponse20062 - a model defined in Swagger"""  # noqa: E501
        self._byoc = None
        self._country = None
        self._multiple_sites = None
        self._show_device_ip_for_call_log = None
        self._billing_account = None
        self.discriminator = None
        if byoc is not None:
            self.byoc = byoc
        if country is not None:
            self.country = country
        if multiple_sites is not None:
            self.multiple_sites = multiple_sites
        if show_device_ip_for_call_log is not None:
            self.show_device_ip_for_call_log = show_device_ip_for_call_log
        if billing_account is not None:
            self.billing_account = billing_account

    @property
    def byoc(self):
        """Gets the byoc of this InlineResponse20062.  # noqa: E501


        :return: The byoc of this InlineResponse20062.  # noqa: E501
        :rtype: InlineResponse20062Byoc
        """
        return self._byoc

    @byoc.setter
    def byoc(self, byoc):
        """Sets the byoc of this InlineResponse20062.


        :param byoc: The byoc of this InlineResponse20062.  # noqa: E501
        :type: InlineResponse20062Byoc
        """

        self._byoc = byoc

    @property
    def country(self):
        """Gets the country of this InlineResponse20062.  # noqa: E501


        :return: The country of this InlineResponse20062.  # noqa: E501
        :rtype: InlineResponse20062Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20062.


        :param country: The country of this InlineResponse20062.  # noqa: E501
        :type: InlineResponse20062Country
        """

        self._country = country

    @property
    def multiple_sites(self):
        """Gets the multiple_sites of this InlineResponse20062.  # noqa: E501


        :return: The multiple_sites of this InlineResponse20062.  # noqa: E501
        :rtype: InlineResponse20062MultipleSites
        """
        return self._multiple_sites

    @multiple_sites.setter
    def multiple_sites(self, multiple_sites):
        """Sets the multiple_sites of this InlineResponse20062.


        :param multiple_sites: The multiple_sites of this InlineResponse20062.  # noqa: E501
        :type: InlineResponse20062MultipleSites
        """

        self._multiple_sites = multiple_sites

    @property
    def show_device_ip_for_call_log(self):
        """Gets the show_device_ip_for_call_log of this InlineResponse20062.  # noqa: E501


        :return: The show_device_ip_for_call_log of this InlineResponse20062.  # noqa: E501
        :rtype: InlineResponse20062ShowDeviceIpForCallLog
        """
        return self._show_device_ip_for_call_log

    @show_device_ip_for_call_log.setter
    def show_device_ip_for_call_log(self, show_device_ip_for_call_log):
        """Sets the show_device_ip_for_call_log of this InlineResponse20062.


        :param show_device_ip_for_call_log: The show_device_ip_for_call_log of this InlineResponse20062.  # noqa: E501
        :type: InlineResponse20062ShowDeviceIpForCallLog
        """

        self._show_device_ip_for_call_log = show_device_ip_for_call_log

    @property
    def billing_account(self):
        """Gets the billing_account of this InlineResponse20062.  # noqa: E501


        :return: The billing_account of this InlineResponse20062.  # noqa: E501
        :rtype: InlineResponse20062BillingAccount
        """
        return self._billing_account

    @billing_account.setter
    def billing_account(self, billing_account):
        """Sets the billing_account of this InlineResponse20062.


        :param billing_account: The billing_account of this InlineResponse20062.  # noqa: E501
        :type: InlineResponse20062BillingAccount
        """

        self._billing_account = billing_account

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20062, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20062):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
