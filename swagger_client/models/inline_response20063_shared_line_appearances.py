# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20063SharedLineAppearances(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'executive': 'InlineResponse20063Executive',
        'assistants': 'list[InlineResponse20063Assistants]',
        'privileges': 'list[str]'
    }

    attribute_map = {
        'executive': 'executive',
        'assistants': 'assistants',
        'privileges': 'privileges'
    }

    def __init__(self, executive=None, assistants=None, privileges=None):  # noqa: E501
        """InlineResponse20063SharedLineAppearances - a model defined in Swagger"""  # noqa: E501
        self._executive = None
        self._assistants = None
        self._privileges = None
        self.discriminator = None
        if executive is not None:
            self.executive = executive
        if assistants is not None:
            self.assistants = assistants
        if privileges is not None:
            self.privileges = privileges

    @property
    def executive(self):
        """Gets the executive of this InlineResponse20063SharedLineAppearances.  # noqa: E501


        :return: The executive of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :rtype: InlineResponse20063Executive
        """
        return self._executive

    @executive.setter
    def executive(self, executive):
        """Sets the executive of this InlineResponse20063SharedLineAppearances.


        :param executive: The executive of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :type: InlineResponse20063Executive
        """

        self._executive = executive

    @property
    def assistants(self):
        """Gets the assistants of this InlineResponse20063SharedLineAppearances.  # noqa: E501


        :return: The assistants of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :rtype: list[InlineResponse20063Assistants]
        """
        return self._assistants

    @assistants.setter
    def assistants(self, assistants):
        """Sets the assistants of this InlineResponse20063SharedLineAppearances.


        :param assistants: The assistants of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :type: list[InlineResponse20063Assistants]
        """

        self._assistants = assistants

    @property
    def privileges(self):
        """Gets the privileges of this InlineResponse20063SharedLineAppearances.  # noqa: E501


        :return: The privileges of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :rtype: list[str]
        """
        return self._privileges

    @privileges.setter
    def privileges(self, privileges):
        """Sets the privileges of this InlineResponse20063SharedLineAppearances.


        :param privileges: The privileges of this InlineResponse20063SharedLineAppearances.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["place_calls", "answer_calls", "pickup_hold_calls"]  # noqa: E501
        if not set(privileges).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `privileges` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(privileges) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._privileges = privileges

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20063SharedLineAppearances, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20063SharedLineAppearances):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
