# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20067ByocSipTrunk(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'carrier': 'str',
        'carrier_account': 'str',
        'id': 'str',
        'name': 'str',
        'region': 'str',
        'sbc_label': 'str'
    }

    attribute_map = {
        'carrier': 'carrier',
        'carrier_account': 'carrier_account',
        'id': 'id',
        'name': 'name',
        'region': 'region',
        'sbc_label': 'sbc_label'
    }

    def __init__(self, carrier=None, carrier_account=None, id=None, name=None, region=None, sbc_label=None):  # noqa: E501
        """InlineResponse20067ByocSipTrunk - a model defined in Swagger"""  # noqa: E501
        self._carrier = None
        self._carrier_account = None
        self._id = None
        self._name = None
        self._region = None
        self._sbc_label = None
        self.discriminator = None
        if carrier is not None:
            self.carrier = carrier
        if carrier_account is not None:
            self.carrier_account = carrier_account
        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if region is not None:
            self.region = region
        if sbc_label is not None:
            self.sbc_label = sbc_label

    @property
    def carrier(self):
        """Gets the carrier of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        Name of the carrier.  # noqa: E501

        :return: The carrier of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._carrier

    @carrier.setter
    def carrier(self, carrier):
        """Sets the carrier of this InlineResponse20067ByocSipTrunk.

        Name of the carrier.  # noqa: E501

        :param carrier: The carrier of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._carrier = carrier

    @property
    def carrier_account(self):
        """Gets the carrier_account of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        The account associated to the carrier.  # noqa: E501

        :return: The carrier_account of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._carrier_account

    @carrier_account.setter
    def carrier_account(self, carrier_account):
        """Sets the carrier_account of this InlineResponse20067ByocSipTrunk.

        The account associated to the carrier.  # noqa: E501

        :param carrier_account: The carrier_account of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._carrier_account = carrier_account

    @property
    def id(self):
        """Gets the id of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        The unique SIP Trunk ID.  # noqa: E501

        :return: The id of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20067ByocSipTrunk.

        The unique SIP Trunk ID.  # noqa: E501

        :param id: The id of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        The display name of the SIP Trunk.  # noqa: E501

        :return: The name of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20067ByocSipTrunk.

        The display name of the SIP Trunk.  # noqa: E501

        :param name: The name of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def region(self):
        """Gets the region of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        The region of the carrier.  # noqa: E501

        :return: The region of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this InlineResponse20067ByocSipTrunk.

        The region of the carrier.  # noqa: E501

        :param region: The region of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._region = region

    @property
    def sbc_label(self):
        """Gets the sbc_label of this InlineResponse20067ByocSipTrunk.  # noqa: E501

        The Session Border Controller (SBC) routing label.  # noqa: E501

        :return: The sbc_label of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :rtype: str
        """
        return self._sbc_label

    @sbc_label.setter
    def sbc_label(self, sbc_label):
        """Sets the sbc_label of this InlineResponse20067ByocSipTrunk.

        The Session Border Controller (SBC) routing label.  # noqa: E501

        :param sbc_label: The sbc_label of this InlineResponse20067ByocSipTrunk.  # noqa: E501
        :type: str
        """

        self._sbc_label = sbc_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20067ByocSipTrunk, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20067ByocSipTrunk):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
