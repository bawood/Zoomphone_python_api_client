# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20069(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'country': 'InlineResponse20069Country',
        'id': 'str',
        'main_auto_receptionist': 'InlineResponse20069MainAutoReceptionist',
        'name': 'str',
        'short_extension': 'InlineResponse20069ShortExtension',
        'site_code': 'int',
        'policy': 'InlineResponse20069Policy',
        'sip_zone': 'InlineResponse20069SipZone',
        'caller_id_name': 'str'
    }

    attribute_map = {
        'country': 'country',
        'id': 'id',
        'main_auto_receptionist': 'main_auto_receptionist',
        'name': 'name',
        'short_extension': 'short_extension',
        'site_code': 'site_code',
        'policy': 'policy',
        'sip_zone': 'sip_zone',
        'caller_id_name': 'caller_id_name'
    }

    def __init__(self, country=None, id=None, main_auto_receptionist=None, name=None, short_extension=None, site_code=None, policy=None, sip_zone=None, caller_id_name=None):  # noqa: E501
        """InlineResponse20069 - a model defined in Swagger"""  # noqa: E501
        self._country = None
        self._id = None
        self._main_auto_receptionist = None
        self._name = None
        self._short_extension = None
        self._site_code = None
        self._policy = None
        self._sip_zone = None
        self._caller_id_name = None
        self.discriminator = None
        if country is not None:
            self.country = country
        if id is not None:
            self.id = id
        if main_auto_receptionist is not None:
            self.main_auto_receptionist = main_auto_receptionist
        if name is not None:
            self.name = name
        if short_extension is not None:
            self.short_extension = short_extension
        if site_code is not None:
            self.site_code = site_code
        if policy is not None:
            self.policy = policy
        if sip_zone is not None:
            self.sip_zone = sip_zone
        if caller_id_name is not None:
            self.caller_id_name = caller_id_name

    @property
    def country(self):
        """Gets the country of this InlineResponse20069.  # noqa: E501


        :return: The country of this InlineResponse20069.  # noqa: E501
        :rtype: InlineResponse20069Country
        """
        return self._country

    @country.setter
    def country(self, country):
        """Sets the country of this InlineResponse20069.


        :param country: The country of this InlineResponse20069.  # noqa: E501
        :type: InlineResponse20069Country
        """

        self._country = country

    @property
    def id(self):
        """Gets the id of this InlineResponse20069.  # noqa: E501

        The site ID is the unique identifier of the site.  # noqa: E501

        :return: The id of this InlineResponse20069.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20069.

        The site ID is the unique identifier of the site.  # noqa: E501

        :param id: The id of this InlineResponse20069.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def main_auto_receptionist(self):
        """Gets the main_auto_receptionist of this InlineResponse20069.  # noqa: E501


        :return: The main_auto_receptionist of this InlineResponse20069.  # noqa: E501
        :rtype: InlineResponse20069MainAutoReceptionist
        """
        return self._main_auto_receptionist

    @main_auto_receptionist.setter
    def main_auto_receptionist(self, main_auto_receptionist):
        """Sets the main_auto_receptionist of this InlineResponse20069.


        :param main_auto_receptionist: The main_auto_receptionist of this InlineResponse20069.  # noqa: E501
        :type: InlineResponse20069MainAutoReceptionist
        """

        self._main_auto_receptionist = main_auto_receptionist

    @property
    def name(self):
        """Gets the name of this InlineResponse20069.  # noqa: E501

        The name of the site.  # noqa: E501

        :return: The name of this InlineResponse20069.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20069.

        The name of the site.  # noqa: E501

        :param name: The name of this InlineResponse20069.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def short_extension(self):
        """Gets the short_extension of this InlineResponse20069.  # noqa: E501


        :return: The short_extension of this InlineResponse20069.  # noqa: E501
        :rtype: InlineResponse20069ShortExtension
        """
        return self._short_extension

    @short_extension.setter
    def short_extension(self, short_extension):
        """Sets the short_extension of this InlineResponse20069.


        :param short_extension: The short_extension of this InlineResponse20069.  # noqa: E501
        :type: InlineResponse20069ShortExtension
        """

        self._short_extension = short_extension

    @property
    def site_code(self):
        """Gets the site_code of this InlineResponse20069.  # noqa: E501

        The [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b)  # noqa: E501

        :return: The site_code of this InlineResponse20069.  # noqa: E501
        :rtype: int
        """
        return self._site_code

    @site_code.setter
    def site_code(self, site_code):
        """Sets the site_code of this InlineResponse20069.

        The [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b)  # noqa: E501

        :param site_code: The site_code of this InlineResponse20069.  # noqa: E501
        :type: int
        """

        self._site_code = site_code

    @property
    def policy(self):
        """Gets the policy of this InlineResponse20069.  # noqa: E501


        :return: The policy of this InlineResponse20069.  # noqa: E501
        :rtype: InlineResponse20069Policy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this InlineResponse20069.


        :param policy: The policy of this InlineResponse20069.  # noqa: E501
        :type: InlineResponse20069Policy
        """

        self._policy = policy

    @property
    def sip_zone(self):
        """Gets the sip_zone of this InlineResponse20069.  # noqa: E501


        :return: The sip_zone of this InlineResponse20069.  # noqa: E501
        :rtype: InlineResponse20069SipZone
        """
        return self._sip_zone

    @sip_zone.setter
    def sip_zone(self, sip_zone):
        """Sets the sip_zone of this InlineResponse20069.


        :param sip_zone: The sip_zone of this InlineResponse20069.  # noqa: E501
        :type: InlineResponse20069SipZone
        """

        self._sip_zone = sip_zone

    @property
    def caller_id_name(self):
        """Gets the caller_id_name of this InlineResponse20069.  # noqa: E501

        When an outbound call is placed using a number as the caller ID, the caller ID name and the number display to the called party. The caller ID name can be up to 15 characters.  # noqa: E501

        :return: The caller_id_name of this InlineResponse20069.  # noqa: E501
        :rtype: str
        """
        return self._caller_id_name

    @caller_id_name.setter
    def caller_id_name(self, caller_id_name):
        """Sets the caller_id_name of this InlineResponse20069.

        When an outbound call is placed using a number as the caller ID, the caller ID name and the number display to the called party. The caller ID name can be up to 15 characters.  # noqa: E501

        :param caller_id_name: The caller_id_name of this InlineResponse20069.  # noqa: E501
        :type: str
        """

        self._caller_id_name = caller_id_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20069, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20069):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
