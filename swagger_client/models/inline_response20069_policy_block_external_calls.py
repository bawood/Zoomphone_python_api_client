# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20069PolicyBlockExternalCalls(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'locked': 'bool',
        'locked_by': 'str',
        'modified': 'bool',
        'block_business_hours': 'bool',
        'block_closed_hours': 'bool',
        'block_holiday_hours': 'bool',
        'block_call_action': 'int',
        'block_call_change_type': 'int',
        'e2e_encryption': 'PhonesitessiteIdPolicyBlockExternalCallsE2eEncryption'
    }

    attribute_map = {
        'enable': 'enable',
        'locked': 'locked',
        'locked_by': 'locked_by',
        'modified': 'modified',
        'block_business_hours': 'block_business_hours',
        'block_closed_hours': 'block_closed_hours',
        'block_holiday_hours': 'block_holiday_hours',
        'block_call_action': 'block_call_action',
        'block_call_change_type': 'block_call_change_type',
        'e2e_encryption': 'e2e_encryption'
    }

    def __init__(self, enable=None, locked=None, locked_by=None, modified=None, block_business_hours=None, block_closed_hours=None, block_holiday_hours=None, block_call_action=None, block_call_change_type=None, e2e_encryption=None):  # noqa: E501
        """InlineResponse20069PolicyBlockExternalCalls - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._locked = None
        self._locked_by = None
        self._modified = None
        self._block_business_hours = None
        self._block_closed_hours = None
        self._block_holiday_hours = None
        self._block_call_action = None
        self._block_call_change_type = None
        self._e2e_encryption = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if locked is not None:
            self.locked = locked
        if locked_by is not None:
            self.locked_by = locked_by
        if modified is not None:
            self.modified = modified
        if block_business_hours is not None:
            self.block_business_hours = block_business_hours
        if block_closed_hours is not None:
            self.block_closed_hours = block_closed_hours
        if block_holiday_hours is not None:
            self.block_holiday_hours = block_holiday_hours
        if block_call_action is not None:
            self.block_call_action = block_call_action
        if block_call_change_type is not None:
            self.block_call_change_type = block_call_change_type
        if e2e_encryption is not None:
            self.e2e_encryption = e2e_encryption

    @property
    def enable(self):
        """Gets the enable of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501


        :return: The enable of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this InlineResponse20069PolicyBlockExternalCalls.


        :param enable: The enable of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def locked(self):
        """Gets the locked of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501

        Whether the senior administrator allows users to modify the current settings.  # noqa: E501

        :return: The locked of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._locked

    @locked.setter
    def locked(self, locked):
        """Sets the locked of this InlineResponse20069PolicyBlockExternalCalls.

        Whether the senior administrator allows users to modify the current settings.  # noqa: E501

        :param locked: The locked of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._locked = locked

    @property
    def locked_by(self):
        """Gets the locked_by of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501

        Which level of administrator prohibits modifying the current settings.  # noqa: E501

        :return: The locked_by of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: str
        """
        return self._locked_by

    @locked_by.setter
    def locked_by(self, locked_by):
        """Sets the locked_by of this InlineResponse20069PolicyBlockExternalCalls.

        Which level of administrator prohibits modifying the current settings.  # noqa: E501

        :param locked_by: The locked_by of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: str
        """
        allowed_values = ["invalid", "account", "site"]  # noqa: E501
        if locked_by not in allowed_values:
            raise ValueError(
                "Invalid value for `locked_by` ({0}), must be one of {1}"  # noqa: E501
                .format(locked_by, allowed_values)
            )

        self._locked_by = locked_by

    @property
    def modified(self):
        """Gets the modified of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501

        Whether the current settings have been modified. If modified, they can be reset(displayed when using old or new policy framework).  # noqa: E501

        :return: The modified of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._modified

    @modified.setter
    def modified(self, modified):
        """Sets the modified of this InlineResponse20069PolicyBlockExternalCalls.

        Whether the current settings have been modified. If modified, they can be reset(displayed when using old or new policy framework).  # noqa: E501

        :param modified: The modified of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._modified = modified

    @property
    def block_business_hours(self):
        """Gets the block_business_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501


        :return: The block_business_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._block_business_hours

    @block_business_hours.setter
    def block_business_hours(self, block_business_hours):
        """Sets the block_business_hours of this InlineResponse20069PolicyBlockExternalCalls.


        :param block_business_hours: The block_business_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._block_business_hours = block_business_hours

    @property
    def block_closed_hours(self):
        """Gets the block_closed_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501


        :return: The block_closed_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._block_closed_hours

    @block_closed_hours.setter
    def block_closed_hours(self, block_closed_hours):
        """Sets the block_closed_hours of this InlineResponse20069PolicyBlockExternalCalls.


        :param block_closed_hours: The block_closed_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._block_closed_hours = block_closed_hours

    @property
    def block_holiday_hours(self):
        """Gets the block_holiday_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501


        :return: The block_holiday_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: bool
        """
        return self._block_holiday_hours

    @block_holiday_hours.setter
    def block_holiday_hours(self, block_holiday_hours):
        """Sets the block_holiday_hours of this InlineResponse20069PolicyBlockExternalCalls.


        :param block_holiday_hours: The block_holiday_hours of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: bool
        """

        self._block_holiday_hours = block_holiday_hours

    @property
    def block_call_action(self):
        """Gets the block_call_action of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501

        The action when a call is blocked. `9` - Disconnect, `0`- Forward to voicemail/videomail.  # noqa: E501

        :return: The block_call_action of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: int
        """
        return self._block_call_action

    @block_call_action.setter
    def block_call_action(self, block_call_action):
        """Sets the block_call_action of this InlineResponse20069PolicyBlockExternalCalls.

        The action when a call is blocked. `9` - Disconnect, `0`- Forward to voicemail/videomail.  # noqa: E501

        :param block_call_action: The block_call_action of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 9]  # noqa: E501
        if block_call_action not in allowed_values:
            raise ValueError(
                "Invalid value for `block_call_action` ({0}), must be one of {1}"  # noqa: E501
                .format(block_call_action, allowed_values)
            )

        self._block_call_action = block_call_action

    @property
    def block_call_change_type(self):
        """Gets the block_call_change_type of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501

        Used only in the old policy framework. Apply changes to a new extensions or all extensions. `1` - All extension, `0` - New extensions.  # noqa: E501

        :return: The block_call_change_type of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: int
        """
        return self._block_call_change_type

    @block_call_change_type.setter
    def block_call_change_type(self, block_call_change_type):
        """Sets the block_call_change_type of this InlineResponse20069PolicyBlockExternalCalls.

        Used only in the old policy framework. Apply changes to a new extensions or all extensions. `1` - All extension, `0` - New extensions.  # noqa: E501

        :param block_call_change_type: The block_call_change_type of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1]  # noqa: E501
        if block_call_change_type not in allowed_values:
            raise ValueError(
                "Invalid value for `block_call_change_type` ({0}), must be one of {1}"  # noqa: E501
                .format(block_call_change_type, allowed_values)
            )

        self._block_call_change_type = block_call_change_type

    @property
    def e2e_encryption(self):
        """Gets the e2e_encryption of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501


        :return: The e2e_encryption of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :rtype: PhonesitessiteIdPolicyBlockExternalCallsE2eEncryption
        """
        return self._e2e_encryption

    @e2e_encryption.setter
    def e2e_encryption(self, e2e_encryption):
        """Sets the e2e_encryption of this InlineResponse20069PolicyBlockExternalCalls.


        :param e2e_encryption: The e2e_encryption of this InlineResponse20069PolicyBlockExternalCalls.  # noqa: E501
        :type: PhonesitessiteIdPolicyBlockExternalCallsE2eEncryption
        """

        self._e2e_encryption = e2e_encryption

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20069PolicyBlockExternalCalls, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20069PolicyBlockExternalCalls):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
