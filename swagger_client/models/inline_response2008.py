# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_id': 'str',
        'call_type': 'str',
        'callee_country_code': 'str',
        'callee_country_iso_code': 'str',
        'callee_did_number': 'str',
        'callee_name': 'str',
        'callee_number': 'str',
        'callee_number_type': 'int',
        'callee_number_source': 'str',
        'caller_country_code': 'str',
        'caller_country_iso_code': 'str',
        'caller_did_number': 'str',
        'caller_name': 'str',
        'caller_number': 'str',
        'caller_number_type': 'int',
        'caller_number_source': 'str',
        'caller_billing_reference_id': 'str',
        'date_time': 'str',
        'device_private_ip': 'str',
        'device_public_ip': 'str',
        'direction': 'str',
        'duration': 'int',
        'has_recording': 'bool',
        'has_voicemail': 'bool',
        'id': 'str',
        'log_details': 'list[InlineResponse2008LogDetails]',
        'path': 'str',
        'result': 'str',
        'department': 'str',
        'cost_center': 'str'
    }

    attribute_map = {
        'call_id': 'call_id',
        'call_type': 'call_type',
        'callee_country_code': 'callee_country_code',
        'callee_country_iso_code': 'callee_country_iso_code',
        'callee_did_number': 'callee_did_number',
        'callee_name': 'callee_name',
        'callee_number': 'callee_number',
        'callee_number_type': 'callee_number_type',
        'callee_number_source': 'callee_number_source',
        'caller_country_code': 'caller_country_code',
        'caller_country_iso_code': 'caller_country_iso_code',
        'caller_did_number': 'caller_did_number',
        'caller_name': 'caller_name',
        'caller_number': 'caller_number',
        'caller_number_type': 'caller_number_type',
        'caller_number_source': 'caller_number_source',
        'caller_billing_reference_id': 'caller_billing_reference_id',
        'date_time': 'date_time',
        'device_private_ip': 'device_private_ip',
        'device_public_ip': 'device_public_ip',
        'direction': 'direction',
        'duration': 'duration',
        'has_recording': 'has_recording',
        'has_voicemail': 'has_voicemail',
        'id': 'id',
        'log_details': 'log_details',
        'path': 'path',
        'result': 'result',
        'department': 'department',
        'cost_center': 'cost_center'
    }

    def __init__(self, call_id=None, call_type=None, callee_country_code=None, callee_country_iso_code=None, callee_did_number=None, callee_name=None, callee_number=None, callee_number_type=None, callee_number_source=None, caller_country_code=None, caller_country_iso_code=None, caller_did_number=None, caller_name=None, caller_number=None, caller_number_type=None, caller_number_source=None, caller_billing_reference_id=None, date_time=None, device_private_ip=None, device_public_ip=None, direction=None, duration=None, has_recording=None, has_voicemail=None, id=None, log_details=None, path=None, result=None, department=None, cost_center=None):  # noqa: E501
        """InlineResponse2008 - a model defined in Swagger"""  # noqa: E501
        self._call_id = None
        self._call_type = None
        self._callee_country_code = None
        self._callee_country_iso_code = None
        self._callee_did_number = None
        self._callee_name = None
        self._callee_number = None
        self._callee_number_type = None
        self._callee_number_source = None
        self._caller_country_code = None
        self._caller_country_iso_code = None
        self._caller_did_number = None
        self._caller_name = None
        self._caller_number = None
        self._caller_number_type = None
        self._caller_number_source = None
        self._caller_billing_reference_id = None
        self._date_time = None
        self._device_private_ip = None
        self._device_public_ip = None
        self._direction = None
        self._duration = None
        self._has_recording = None
        self._has_voicemail = None
        self._id = None
        self._log_details = None
        self._path = None
        self._result = None
        self._department = None
        self._cost_center = None
        self.discriminator = None
        if call_id is not None:
            self.call_id = call_id
        if call_type is not None:
            self.call_type = call_type
        if callee_country_code is not None:
            self.callee_country_code = callee_country_code
        if callee_country_iso_code is not None:
            self.callee_country_iso_code = callee_country_iso_code
        if callee_did_number is not None:
            self.callee_did_number = callee_did_number
        if callee_name is not None:
            self.callee_name = callee_name
        if callee_number is not None:
            self.callee_number = callee_number
        if callee_number_type is not None:
            self.callee_number_type = callee_number_type
        if callee_number_source is not None:
            self.callee_number_source = callee_number_source
        if caller_country_code is not None:
            self.caller_country_code = caller_country_code
        if caller_country_iso_code is not None:
            self.caller_country_iso_code = caller_country_iso_code
        if caller_did_number is not None:
            self.caller_did_number = caller_did_number
        if caller_name is not None:
            self.caller_name = caller_name
        if caller_number is not None:
            self.caller_number = caller_number
        if caller_number_type is not None:
            self.caller_number_type = caller_number_type
        if caller_number_source is not None:
            self.caller_number_source = caller_number_source
        if caller_billing_reference_id is not None:
            self.caller_billing_reference_id = caller_billing_reference_id
        if date_time is not None:
            self.date_time = date_time
        if device_private_ip is not None:
            self.device_private_ip = device_private_ip
        if device_public_ip is not None:
            self.device_public_ip = device_public_ip
        if direction is not None:
            self.direction = direction
        if duration is not None:
            self.duration = duration
        if has_recording is not None:
            self.has_recording = has_recording
        if has_voicemail is not None:
            self.has_voicemail = has_voicemail
        if id is not None:
            self.id = id
        if log_details is not None:
            self.log_details = log_details
        if path is not None:
            self.path = path
        if result is not None:
            self.result = result
        if department is not None:
            self.department = department
        if cost_center is not None:
            self.cost_center = cost_center

    @property
    def call_id(self):
        """Gets the call_id of this InlineResponse2008.  # noqa: E501

        Unique identifier of the phone call.  # noqa: E501

        :return: The call_id of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this InlineResponse2008.

        Unique identifier of the phone call.  # noqa: E501

        :param call_id: The call_id of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._call_id = call_id

    @property
    def call_type(self):
        """Gets the call_type of this InlineResponse2008.  # noqa: E501

        The type of call:  * `voip` (Voice over IP) * `pstn` (Public Switched Telephone Network) * `tollfree` * `international` * `contactCenter`  # noqa: E501

        :return: The call_type of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._call_type

    @call_type.setter
    def call_type(self, call_type):
        """Sets the call_type of this InlineResponse2008.

        The type of call:  * `voip` (Voice over IP) * `pstn` (Public Switched Telephone Network) * `tollfree` * `international` * `contactCenter`  # noqa: E501

        :param call_type: The call_type of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        allowed_values = ["voip", "pstn", "tollfree", "international", "contactCenter"]  # noqa: E501
        if call_type not in allowed_values:
            raise ValueError(
                "Invalid value for `call_type` ({0}), must be one of {1}"  # noqa: E501
                .format(call_type, allowed_values)
            )

        self._call_type = call_type

    @property
    def callee_country_code(self):
        """Gets the callee_country_code of this InlineResponse2008.  # noqa: E501

        Country calling code.  # noqa: E501

        :return: The callee_country_code of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_country_code

    @callee_country_code.setter
    def callee_country_code(self, callee_country_code):
        """Sets the callee_country_code of this InlineResponse2008.

        Country calling code.  # noqa: E501

        :param callee_country_code: The callee_country_code of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._callee_country_code = callee_country_code

    @property
    def callee_country_iso_code(self):
        """Gets the callee_country_iso_code of this InlineResponse2008.  # noqa: E501

        ISO alpha2 country code.  # noqa: E501

        :return: The callee_country_iso_code of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_country_iso_code

    @callee_country_iso_code.setter
    def callee_country_iso_code(self, callee_country_iso_code):
        """Sets the callee_country_iso_code of this InlineResponse2008.

        ISO alpha2 country code.  # noqa: E501

        :param callee_country_iso_code: The callee_country_iso_code of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._callee_country_iso_code = callee_country_iso_code

    @property
    def callee_did_number(self):
        """Gets the callee_did_number of this InlineResponse2008.  # noqa: E501

        Callee's DID (direct inward dial) number in e164 format.  # noqa: E501

        :return: The callee_did_number of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_did_number

    @callee_did_number.setter
    def callee_did_number(self, callee_did_number):
        """Sets the callee_did_number of this InlineResponse2008.

        Callee's DID (direct inward dial) number in e164 format.  # noqa: E501

        :param callee_did_number: The callee_did_number of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._callee_did_number = callee_did_number

    @property
    def callee_name(self):
        """Gets the callee_name of this InlineResponse2008.  # noqa: E501

        Contact name of callee.  # noqa: E501

        :return: The callee_name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_name

    @callee_name.setter
    def callee_name(self, callee_name):
        """Sets the callee_name of this InlineResponse2008.

        Contact name of callee.  # noqa: E501

        :param callee_name: The callee_name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._callee_name = callee_name

    @property
    def callee_number(self):
        """Gets the callee_number of this InlineResponse2008.  # noqa: E501

        Number of callee.  # noqa: E501

        :return: The callee_number of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_number

    @callee_number.setter
    def callee_number(self, callee_number):
        """Sets the callee_number of this InlineResponse2008.

        Number of callee.  # noqa: E501

        :param callee_number: The callee_number of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._callee_number = callee_number

    @property
    def callee_number_type(self):
        """Gets the callee_number_type of this InlineResponse2008.  # noqa: E501

        The callee's number type: * `1` — Extension number. * `2` — Phone number. * `3` — Customized emergency number.  # noqa: E501

        :return: The callee_number_type of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._callee_number_type

    @callee_number_type.setter
    def callee_number_type(self, callee_number_type):
        """Sets the callee_number_type of this InlineResponse2008.

        The callee's number type: * `1` — Extension number. * `2` — Phone number. * `3` — Customized emergency number.  # noqa: E501

        :param callee_number_type: The callee_number_type of this InlineResponse2008.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if callee_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `callee_number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(callee_number_type, allowed_values)
            )

        self._callee_number_type = callee_number_type

    @property
    def callee_number_source(self):
        """Gets the callee_number_source of this InlineResponse2008.  # noqa: E501

        Indicates where the phone number comes from: * `internal` — ZP native. * `external` — BYOC or Provider Exchange. * `byop` — Premise peering. Not available when `callee_number_type = 1`.  # noqa: E501

        :return: The callee_number_source of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._callee_number_source

    @callee_number_source.setter
    def callee_number_source(self, callee_number_source):
        """Sets the callee_number_source of this InlineResponse2008.

        Indicates where the phone number comes from: * `internal` — ZP native. * `external` — BYOC or Provider Exchange. * `byop` — Premise peering. Not available when `callee_number_type = 1`.  # noqa: E501

        :param callee_number_source: The callee_number_source of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "external", "byop"]  # noqa: E501
        if callee_number_source not in allowed_values:
            raise ValueError(
                "Invalid value for `callee_number_source` ({0}), must be one of {1}"  # noqa: E501
                .format(callee_number_source, allowed_values)
            )

        self._callee_number_source = callee_number_source

    @property
    def caller_country_code(self):
        """Gets the caller_country_code of this InlineResponse2008.  # noqa: E501

        Country calling code.  # noqa: E501

        :return: The caller_country_code of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_country_code

    @caller_country_code.setter
    def caller_country_code(self, caller_country_code):
        """Sets the caller_country_code of this InlineResponse2008.

        Country calling code.  # noqa: E501

        :param caller_country_code: The caller_country_code of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_country_code = caller_country_code

    @property
    def caller_country_iso_code(self):
        """Gets the caller_country_iso_code of this InlineResponse2008.  # noqa: E501

        ISO alpha2 country code.  # noqa: E501

        :return: The caller_country_iso_code of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_country_iso_code

    @caller_country_iso_code.setter
    def caller_country_iso_code(self, caller_country_iso_code):
        """Sets the caller_country_iso_code of this InlineResponse2008.

        ISO alpha2 country code.  # noqa: E501

        :param caller_country_iso_code: The caller_country_iso_code of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_country_iso_code = caller_country_iso_code

    @property
    def caller_did_number(self):
        """Gets the caller_did_number of this InlineResponse2008.  # noqa: E501

        Caller's DID (direct inward dial) number in e164 format.  # noqa: E501

        :return: The caller_did_number of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_did_number

    @caller_did_number.setter
    def caller_did_number(self, caller_did_number):
        """Sets the caller_did_number of this InlineResponse2008.

        Caller's DID (direct inward dial) number in e164 format.  # noqa: E501

        :param caller_did_number: The caller_did_number of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_did_number = caller_did_number

    @property
    def caller_name(self):
        """Gets the caller_name of this InlineResponse2008.  # noqa: E501

        Contact name of caller.  # noqa: E501

        :return: The caller_name of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_name

    @caller_name.setter
    def caller_name(self, caller_name):
        """Sets the caller_name of this InlineResponse2008.

        Contact name of caller.  # noqa: E501

        :param caller_name: The caller_name of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_name = caller_name

    @property
    def caller_number(self):
        """Gets the caller_number of this InlineResponse2008.  # noqa: E501

        Number of caller.  # noqa: E501

        :return: The caller_number of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_number

    @caller_number.setter
    def caller_number(self, caller_number):
        """Sets the caller_number of this InlineResponse2008.

        Number of caller.  # noqa: E501

        :param caller_number: The caller_number of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_number = caller_number

    @property
    def caller_number_type(self):
        """Gets the caller_number_type of this InlineResponse2008.  # noqa: E501

        The caller's number type:  * `1` — Extension number.  * `2` — Phone number.  # noqa: E501

        :return: The caller_number_type of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._caller_number_type

    @caller_number_type.setter
    def caller_number_type(self, caller_number_type):
        """Sets the caller_number_type of this InlineResponse2008.

        The caller's number type:  * `1` — Extension number.  * `2` — Phone number.  # noqa: E501

        :param caller_number_type: The caller_number_type of this InlineResponse2008.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if caller_number_type not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_number_type` ({0}), must be one of {1}"  # noqa: E501
                .format(caller_number_type, allowed_values)
            )

        self._caller_number_type = caller_number_type

    @property
    def caller_number_source(self):
        """Gets the caller_number_source of this InlineResponse2008.  # noqa: E501

        Indicates where the phone number comes from: * `internal` — ZP native. * `external` — BYOC or Provider Exchange. * `byop` — Premise peering. Not available when `caller_number_type = 1`.  # noqa: E501

        :return: The caller_number_source of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_number_source

    @caller_number_source.setter
    def caller_number_source(self, caller_number_source):
        """Sets the caller_number_source of this InlineResponse2008.

        Indicates where the phone number comes from: * `internal` — ZP native. * `external` — BYOC or Provider Exchange. * `byop` — Premise peering. Not available when `caller_number_type = 1`.  # noqa: E501

        :param caller_number_source: The caller_number_source of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        allowed_values = ["internal", "external", "byop"]  # noqa: E501
        if caller_number_source not in allowed_values:
            raise ValueError(
                "Invalid value for `caller_number_source` ({0}), must be one of {1}"  # noqa: E501
                .format(caller_number_source, allowed_values)
            )

        self._caller_number_source = caller_number_source

    @property
    def caller_billing_reference_id(self):
        """Gets the caller_billing_reference_id of this InlineResponse2008.  # noqa: E501

        Billing reference ID (for peering phone numbers).  # noqa: E501

        :return: The caller_billing_reference_id of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._caller_billing_reference_id

    @caller_billing_reference_id.setter
    def caller_billing_reference_id(self, caller_billing_reference_id):
        """Sets the caller_billing_reference_id of this InlineResponse2008.

        Billing reference ID (for peering phone numbers).  # noqa: E501

        :param caller_billing_reference_id: The caller_billing_reference_id of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._caller_billing_reference_id = caller_billing_reference_id

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse2008.  # noqa: E501

        Start time of the call.  # noqa: E501

        :return: The date_time of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse2008.

        Start time of the call.  # noqa: E501

        :param date_time: The date_time of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def device_private_ip(self):
        """Gets the device_private_ip of this InlineResponse2008.  # noqa: E501

        Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :return: The device_private_ip of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._device_private_ip

    @device_private_ip.setter
    def device_private_ip(self, device_private_ip):
        """Sets the device_private_ip of this InlineResponse2008.

        Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :param device_private_ip: The device_private_ip of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._device_private_ip = device_private_ip

    @property
    def device_public_ip(self):
        """Gets the device_public_ip of this InlineResponse2008.  # noqa: E501

        Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :return: The device_public_ip of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._device_public_ip

    @device_public_ip.setter
    def device_public_ip(self, device_public_ip):
        """Sets the device_public_ip of this InlineResponse2008.

        Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :param device_public_ip: The device_public_ip of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._device_public_ip = device_public_ip

    @property
    def direction(self):
        """Gets the direction of this InlineResponse2008.  # noqa: E501

        Direction of the call: `inbound` | `outbound`  # noqa: E501

        :return: The direction of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this InlineResponse2008.

        Direction of the call: `inbound` | `outbound`  # noqa: E501

        :param direction: The direction of this InlineResponse2008.  # noqa: E501
        :type: str
        """
        allowed_values = ["inbound", "outbound"]  # noqa: E501
        if direction not in allowed_values:
            raise ValueError(
                "Invalid value for `direction` ({0}), must be one of {1}"  # noqa: E501
                .format(direction, allowed_values)
            )

        self._direction = direction

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2008.  # noqa: E501

        Duration of the call in seconds.  # noqa: E501

        :return: The duration of this InlineResponse2008.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2008.

        Duration of the call in seconds.  # noqa: E501

        :param duration: The duration of this InlineResponse2008.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def has_recording(self):
        """Gets the has_recording of this InlineResponse2008.  # noqa: E501

        Whether the call has a recording. See [announcement](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#deprecation-of-the-has_voicemail-and-has_recording-responses-in-phone-api) from July, 2021.  # noqa: E501

        :return: The has_recording of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._has_recording

    @has_recording.setter
    def has_recording(self, has_recording):
        """Sets the has_recording of this InlineResponse2008.

        Whether the call has a recording. See [announcement](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#deprecation-of-the-has_voicemail-and-has_recording-responses-in-phone-api) from July, 2021.  # noqa: E501

        :param has_recording: The has_recording of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._has_recording = has_recording

    @property
    def has_voicemail(self):
        """Gets the has_voicemail of this InlineResponse2008.  # noqa: E501

        Whether the call has a voicemail. See [announcement](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#deprecation-of-the-has_voicemail-and-has_recording-responses-in-phone-api) from July, 2021.  # noqa: E501

        :return: The has_voicemail of this InlineResponse2008.  # noqa: E501
        :rtype: bool
        """
        return self._has_voicemail

    @has_voicemail.setter
    def has_voicemail(self, has_voicemail):
        """Sets the has_voicemail of this InlineResponse2008.

        Whether the call has a voicemail. See [announcement](https://marketplace.zoom.us/docs/guides/stay-up-to-date/announcements#deprecation-of-the-has_voicemail-and-has_recording-responses-in-phone-api) from July, 2021.  # noqa: E501

        :param has_voicemail: The has_voicemail of this InlineResponse2008.  # noqa: E501
        :type: bool
        """

        self._has_voicemail = has_voicemail

    @property
    def id(self):
        """Gets the id of this InlineResponse2008.  # noqa: E501

        The call log ID.  # noqa: E501

        :return: The id of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2008.

        The call log ID.  # noqa: E501

        :param id: The id of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def log_details(self):
        """Gets the log_details of this InlineResponse2008.  # noqa: E501

        The call segment details.  # noqa: E501

        :return: The log_details of this InlineResponse2008.  # noqa: E501
        :rtype: list[InlineResponse2008LogDetails]
        """
        return self._log_details

    @log_details.setter
    def log_details(self, log_details):
        """Sets the log_details of this InlineResponse2008.

        The call segment details.  # noqa: E501

        :param log_details: The log_details of this InlineResponse2008.  # noqa: E501
        :type: list[InlineResponse2008LogDetails]
        """

        self._log_details = log_details

    @property
    def path(self):
        """Gets the path of this InlineResponse2008.  # noqa: E501

        Path of the call.  # noqa: E501

        :return: The path of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this InlineResponse2008.

        Path of the call.  # noqa: E501

        :param path: The path of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def result(self):
        """Gets the result of this InlineResponse2008.  # noqa: E501

        Result of the call: `Missed` | `Voicemail` | `Call connected` | `Rejected` | `Blocked`| `Busy`| `Wrong Number`| `No Answer`| `International Disabled`| `Internal Error`| `Call failed` | `Restricted Number`| `Call Cancel` | `Message`| `Answered by Other Member` | `Call Cancelled` | `Park` | `Parked` | `Blocked by non-GAL` |  `Blocked by info-Barriers` | `Recording Failure`| `Recorded`| `Auto Recorded`.  # noqa: E501

        :return: The result of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse2008.

        Result of the call: `Missed` | `Voicemail` | `Call connected` | `Rejected` | `Blocked`| `Busy`| `Wrong Number`| `No Answer`| `International Disabled`| `Internal Error`| `Call failed` | `Restricted Number`| `Call Cancel` | `Message`| `Answered by Other Member` | `Call Cancelled` | `Park` | `Parked` | `Blocked by non-GAL` |  `Blocked by info-Barriers` | `Recording Failure`| `Recorded`| `Auto Recorded`.  # noqa: E501

        :param result: The result of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def department(self):
        """Gets the department of this InlineResponse2008.  # noqa: E501

        Name of the user's department.  # noqa: E501

        :return: The department of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._department

    @department.setter
    def department(self, department):
        """Sets the department of this InlineResponse2008.

        Name of the user's department.  # noqa: E501

        :param department: The department of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._department = department

    @property
    def cost_center(self):
        """Gets the cost_center of this InlineResponse2008.  # noqa: E501

        The cost center name to which a user belongs.  # noqa: E501

        :return: The cost_center of this InlineResponse2008.  # noqa: E501
        :rtype: str
        """
        return self._cost_center

    @cost_center.setter
    def cost_center(self, cost_center):
        """Sets the cost_center of this InlineResponse2008.

        The cost center name to which a user belongs.  # noqa: E501

        :param cost_center: The cost_center of this InlineResponse2008.  # noqa: E501
        :type: str
        """

        self._cost_center = cost_center

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
