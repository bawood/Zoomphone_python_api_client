# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20083Transcription(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'content': 'str',
        'status': 'int',
        'engine': 'str'
    }

    attribute_map = {
        'content': 'content',
        'status': 'status',
        'engine': 'engine'
    }

    def __init__(self, content=None, status=None, engine=None):  # noqa: E501
        """InlineResponse20083Transcription - a model defined in Swagger"""  # noqa: E501
        self._content = None
        self._status = None
        self._engine = None
        self.discriminator = None
        if content is not None:
            self.content = content
        if status is not None:
            self.status = status
        if engine is not None:
            self.engine = engine

    @property
    def content(self):
        """Gets the content of this InlineResponse20083Transcription.  # noqa: E501

        The content of the voicemail transcript  # noqa: E501

        :return: The content of this InlineResponse20083Transcription.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this InlineResponse20083Transcription.

        The content of the voicemail transcript  # noqa: E501

        :param content: The content of this InlineResponse20083Transcription.  # noqa: E501
        :type: str
        """

        self._content = content

    @property
    def status(self):
        """Gets the status of this InlineResponse20083Transcription.  # noqa: E501

        The status of the voicemail transcript: * `0` — Transcript is not available. * `1` — Transcript is processing. * `2` — Transcript processed successfully. * `4` — Transcript is disabled. * `5` — Transcript is enabled. * `9` — Transcript web error. * `11` — Transcript download error. * `12` — Transcript upload error. * `13` — Transcript web database error. * `14` — Transcript BYOS (Bring Your Own Storage) upload error. * `409` — Transcript duplicate processing request error. * `415` — Transcript unsupported media error. * `422` — Transcript cannot be processed. * `500` — Transcript server error. * `601` — Transcript AISense after retry error. * `602` — Transcript AISense upload file error. * `603` — Transcript AISense download file error. * `999` — Transcript AISense error.   # noqa: E501

        :return: The status of this InlineResponse20083Transcription.  # noqa: E501
        :rtype: int
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this InlineResponse20083Transcription.

        The status of the voicemail transcript: * `0` — Transcript is not available. * `1` — Transcript is processing. * `2` — Transcript processed successfully. * `4` — Transcript is disabled. * `5` — Transcript is enabled. * `9` — Transcript web error. * `11` — Transcript download error. * `12` — Transcript upload error. * `13` — Transcript web database error. * `14` — Transcript BYOS (Bring Your Own Storage) upload error. * `409` — Transcript duplicate processing request error. * `415` — Transcript unsupported media error. * `422` — Transcript cannot be processed. * `500` — Transcript server error. * `601` — Transcript AISense after retry error. * `602` — Transcript AISense upload file error. * `603` — Transcript AISense download file error. * `999` — Transcript AISense error.   # noqa: E501

        :param status: The status of this InlineResponse20083Transcription.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2, 4, 5, 9, 11, 12, 13, 14, 409, 415, 422, 500, 601, 602, 603, 999]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def engine(self):
        """Gets the engine of this InlineResponse20083Transcription.  # noqa: E501

        This field indicates the company that provides the transcription engine technology.  # noqa: E501

        :return: The engine of this InlineResponse20083Transcription.  # noqa: E501
        :rtype: str
        """
        return self._engine

    @engine.setter
    def engine(self, engine):
        """Sets the engine of this InlineResponse20083Transcription.

        This field indicates the company that provides the transcription engine technology.  # noqa: E501

        :param engine: The engine of this InlineResponse20083Transcription.  # noqa: E501
        :type: str
        """

        self._engine = engine

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20083Transcription, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20083Transcription):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
