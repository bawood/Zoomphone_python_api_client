# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20086DeskPhone(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'devices': 'list[InlineResponse20086DeskPhoneDevices]',
        'keys_positions': 'InlineResponse20086DeskPhoneKeysPositions',
        'phone_screen_lock': 'bool',
        'pin_code': 'str'
    }

    attribute_map = {
        'devices': 'devices',
        'keys_positions': 'keys_positions',
        'phone_screen_lock': 'phone_screen_lock',
        'pin_code': 'pin_code'
    }

    def __init__(self, devices=None, keys_positions=None, phone_screen_lock=None, pin_code=None):  # noqa: E501
        """InlineResponse20086DeskPhone - a model defined in Swagger"""  # noqa: E501
        self._devices = None
        self._keys_positions = None
        self._phone_screen_lock = None
        self._pin_code = None
        self.discriminator = None
        if devices is not None:
            self.devices = devices
        if keys_positions is not None:
            self.keys_positions = keys_positions
        if phone_screen_lock is not None:
            self.phone_screen_lock = phone_screen_lock
        if pin_code is not None:
            self.pin_code = pin_code

    @property
    def devices(self):
        """Gets the devices of this InlineResponse20086DeskPhone.  # noqa: E501

        The information about the desk phones.  # noqa: E501

        :return: The devices of this InlineResponse20086DeskPhone.  # noqa: E501
        :rtype: list[InlineResponse20086DeskPhoneDevices]
        """
        return self._devices

    @devices.setter
    def devices(self, devices):
        """Sets the devices of this InlineResponse20086DeskPhone.

        The information about the desk phones.  # noqa: E501

        :param devices: The devices of this InlineResponse20086DeskPhone.  # noqa: E501
        :type: list[InlineResponse20086DeskPhoneDevices]
        """

        self._devices = devices

    @property
    def keys_positions(self):
        """Gets the keys_positions of this InlineResponse20086DeskPhone.  # noqa: E501


        :return: The keys_positions of this InlineResponse20086DeskPhone.  # noqa: E501
        :rtype: InlineResponse20086DeskPhoneKeysPositions
        """
        return self._keys_positions

    @keys_positions.setter
    def keys_positions(self, keys_positions):
        """Sets the keys_positions of this InlineResponse20086DeskPhone.


        :param keys_positions: The keys_positions of this InlineResponse20086DeskPhone.  # noqa: E501
        :type: InlineResponse20086DeskPhoneKeysPositions
        """

        self._keys_positions = keys_positions

    @property
    def phone_screen_lock(self):
        """Gets the phone_screen_lock of this InlineResponse20086DeskPhone.  # noqa: E501

        After enabling this option, you can lock your desk phone screen. PIN Code is required to unlock your phone. This feature is not supported on some devices. See [Supported Device Types](https://support.zoom.us/hc/en-us/articles/360029698771) for more information.  # noqa: E501

        :return: The phone_screen_lock of this InlineResponse20086DeskPhone.  # noqa: E501
        :rtype: bool
        """
        return self._phone_screen_lock

    @phone_screen_lock.setter
    def phone_screen_lock(self, phone_screen_lock):
        """Sets the phone_screen_lock of this InlineResponse20086DeskPhone.

        After enabling this option, you can lock your desk phone screen. PIN Code is required to unlock your phone. This feature is not supported on some devices. See [Supported Device Types](https://support.zoom.us/hc/en-us/articles/360029698771) for more information.  # noqa: E501

        :param phone_screen_lock: The phone_screen_lock of this InlineResponse20086DeskPhone.  # noqa: E501
        :type: bool
        """

        self._phone_screen_lock = phone_screen_lock

    @property
    def pin_code(self):
        """Gets the pin_code of this InlineResponse20086DeskPhone.  # noqa: E501

        The PIN code to be used to access voicemail, hot desking, and unlocking desk phones.  # noqa: E501

        :return: The pin_code of this InlineResponse20086DeskPhone.  # noqa: E501
        :rtype: str
        """
        return self._pin_code

    @pin_code.setter
    def pin_code(self, pin_code):
        """Sets the pin_code of this InlineResponse20086DeskPhone.

        The PIN code to be used to access voicemail, hot desking, and unlocking desk phones.  # noqa: E501

        :param pin_code: The pin_code of this InlineResponse20086DeskPhone.  # noqa: E501
        :type: str
        """

        self._pin_code = pin_code

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20086DeskPhone, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20086DeskPhone):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
