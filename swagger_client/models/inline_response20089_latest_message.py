# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20089LatestMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'attachments': 'list[InlineResponse20089LatestMessageAttachments]',
        'date_time': 'str',
        'direction': 'str',
        'message': 'str',
        'message_id': 'str',
        'message_type': 'int',
        'sender': 'InlineResponse20089LatestMessageSender',
        'to_members': 'list[InlineResponse20089LatestMessageToMembers]'
    }

    attribute_map = {
        'attachments': 'attachments',
        'date_time': 'date_time',
        'direction': 'direction',
        'message': 'message',
        'message_id': 'message_id',
        'message_type': 'message_type',
        'sender': 'sender',
        'to_members': 'to_members'
    }

    def __init__(self, attachments=None, date_time=None, direction=None, message=None, message_id=None, message_type=None, sender=None, to_members=None):  # noqa: E501
        """InlineResponse20089LatestMessage - a model defined in Swagger"""  # noqa: E501
        self._attachments = None
        self._date_time = None
        self._direction = None
        self._message = None
        self._message_id = None
        self._message_type = None
        self._sender = None
        self._to_members = None
        self.discriminator = None
        if attachments is not None:
            self.attachments = attachments
        if date_time is not None:
            self.date_time = date_time
        if direction is not None:
            self.direction = direction
        if message is not None:
            self.message = message
        if message_id is not None:
            self.message_id = message_id
        if message_type is not None:
            self.message_type = message_type
        if sender is not None:
            self.sender = sender
        if to_members is not None:
            self.to_members = to_members

    @property
    def attachments(self):
        """Gets the attachments of this InlineResponse20089LatestMessage.  # noqa: E501


        :return: The attachments of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: list[InlineResponse20089LatestMessageAttachments]
        """
        return self._attachments

    @attachments.setter
    def attachments(self, attachments):
        """Sets the attachments of this InlineResponse20089LatestMessage.


        :param attachments: The attachments of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: list[InlineResponse20089LatestMessageAttachments]
        """

        self._attachments = attachments

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse20089LatestMessage.  # noqa: E501

        The UTC time the message was created.  # noqa: E501

        :return: The date_time of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse20089LatestMessage.

        The UTC time the message was created.  # noqa: E501

        :param date_time: The date_time of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def direction(self):
        """Gets the direction of this InlineResponse20089LatestMessage.  # noqa: E501

        `In`(SMS received) or `Out`(SMS sent)  # noqa: E501

        :return: The direction of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: str
        """
        return self._direction

    @direction.setter
    def direction(self, direction):
        """Sets the direction of this InlineResponse20089LatestMessage.

        `In`(SMS received) or `Out`(SMS sent)  # noqa: E501

        :param direction: The direction of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: str
        """

        self._direction = direction

    @property
    def message(self):
        """Gets the message of this InlineResponse20089LatestMessage.  # noqa: E501

        The content of the SMS.  # noqa: E501

        :return: The message of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this InlineResponse20089LatestMessage.

        The content of the SMS.  # noqa: E501

        :param message: The message of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def message_id(self):
        """Gets the message_id of this InlineResponse20089LatestMessage.  # noqa: E501

        The message ID.  # noqa: E501

        :return: The message_id of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: str
        """
        return self._message_id

    @message_id.setter
    def message_id(self, message_id):
        """Sets the message_id of this InlineResponse20089LatestMessage.

        The message ID.  # noqa: E501

        :param message_id: The message_id of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: str
        """

        self._message_id = message_id

    @property
    def message_type(self):
        """Gets the message_type of this InlineResponse20089LatestMessage.  # noqa: E501

        The message type:<br> 1 - SMS<br> 2 - MMS<br> 3 - GROUP_SMS<br> 4 - GROUP_MMS<br> 5 - SMS_INTER<br> 6 - MSG_ON_NET  # noqa: E501

        :return: The message_type of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: int
        """
        return self._message_type

    @message_type.setter
    def message_type(self, message_type):
        """Sets the message_type of this InlineResponse20089LatestMessage.

        The message type:<br> 1 - SMS<br> 2 - MMS<br> 3 - GROUP_SMS<br> 4 - GROUP_MMS<br> 5 - SMS_INTER<br> 6 - MSG_ON_NET  # noqa: E501

        :param message_type: The message_type of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6]  # noqa: E501
        if message_type not in allowed_values:
            raise ValueError(
                "Invalid value for `message_type` ({0}), must be one of {1}"  # noqa: E501
                .format(message_type, allowed_values)
            )

        self._message_type = message_type

    @property
    def sender(self):
        """Gets the sender of this InlineResponse20089LatestMessage.  # noqa: E501


        :return: The sender of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: InlineResponse20089LatestMessageSender
        """
        return self._sender

    @sender.setter
    def sender(self, sender):
        """Sets the sender of this InlineResponse20089LatestMessage.


        :param sender: The sender of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: InlineResponse20089LatestMessageSender
        """

        self._sender = sender

    @property
    def to_members(self):
        """Gets the to_members of this InlineResponse20089LatestMessage.  # noqa: E501


        :return: The to_members of this InlineResponse20089LatestMessage.  # noqa: E501
        :rtype: list[InlineResponse20089LatestMessageToMembers]
        """
        return self._to_members

    @to_members.setter
    def to_members(self, to_members):
        """Sets the to_members of this InlineResponse20089LatestMessage.


        :param to_members: The to_members of this InlineResponse20089LatestMessage.  # noqa: E501
        :type: list[InlineResponse20089LatestMessageToMembers]
        """

        self._to_members = to_members

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20089LatestMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20089LatestMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
