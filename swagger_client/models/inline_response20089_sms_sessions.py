# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse20089SmsSessions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'last_access_time': 'str',
        'latest_message': 'InlineResponse20089LatestMessage',
        'participants': 'list[InlineResponse20089Participants]',
        'session_id': 'str',
        'unread_message_count': 'int'
    }

    attribute_map = {
        'last_access_time': 'last_access_time',
        'latest_message': 'latest_message',
        'participants': 'participants',
        'session_id': 'session_id',
        'unread_message_count': 'unread_message_count'
    }

    def __init__(self, last_access_time=None, latest_message=None, participants=None, session_id=None, unread_message_count=None):  # noqa: E501
        """InlineResponse20089SmsSessions - a model defined in Swagger"""  # noqa: E501
        self._last_access_time = None
        self._latest_message = None
        self._participants = None
        self._session_id = None
        self._unread_message_count = None
        self.discriminator = None
        if last_access_time is not None:
            self.last_access_time = last_access_time
        if latest_message is not None:
            self.latest_message = latest_message
        if participants is not None:
            self.participants = participants
        if session_id is not None:
            self.session_id = session_id
        if unread_message_count is not None:
            self.unread_message_count = unread_message_count

    @property
    def last_access_time(self):
        """Gets the last_access_time of this InlineResponse20089SmsSessions.  # noqa: E501

        The last send or receive time in UTC.  # noqa: E501

        :return: The last_access_time of this InlineResponse20089SmsSessions.  # noqa: E501
        :rtype: str
        """
        return self._last_access_time

    @last_access_time.setter
    def last_access_time(self, last_access_time):
        """Sets the last_access_time of this InlineResponse20089SmsSessions.

        The last send or receive time in UTC.  # noqa: E501

        :param last_access_time: The last_access_time of this InlineResponse20089SmsSessions.  # noqa: E501
        :type: str
        """

        self._last_access_time = last_access_time

    @property
    def latest_message(self):
        """Gets the latest_message of this InlineResponse20089SmsSessions.  # noqa: E501


        :return: The latest_message of this InlineResponse20089SmsSessions.  # noqa: E501
        :rtype: InlineResponse20089LatestMessage
        """
        return self._latest_message

    @latest_message.setter
    def latest_message(self, latest_message):
        """Sets the latest_message of this InlineResponse20089SmsSessions.


        :param latest_message: The latest_message of this InlineResponse20089SmsSessions.  # noqa: E501
        :type: InlineResponse20089LatestMessage
        """

        self._latest_message = latest_message

    @property
    def participants(self):
        """Gets the participants of this InlineResponse20089SmsSessions.  # noqa: E501

        SMS senders and receivers.  # noqa: E501

        :return: The participants of this InlineResponse20089SmsSessions.  # noqa: E501
        :rtype: list[InlineResponse20089Participants]
        """
        return self._participants

    @participants.setter
    def participants(self, participants):
        """Sets the participants of this InlineResponse20089SmsSessions.

        SMS senders and receivers.  # noqa: E501

        :param participants: The participants of this InlineResponse20089SmsSessions.  # noqa: E501
        :type: list[InlineResponse20089Participants]
        """

        self._participants = participants

    @property
    def session_id(self):
        """Gets the session_id of this InlineResponse20089SmsSessions.  # noqa: E501

        The SMS session ID.  # noqa: E501

        :return: The session_id of this InlineResponse20089SmsSessions.  # noqa: E501
        :rtype: str
        """
        return self._session_id

    @session_id.setter
    def session_id(self, session_id):
        """Sets the session_id of this InlineResponse20089SmsSessions.

        The SMS session ID.  # noqa: E501

        :param session_id: The session_id of this InlineResponse20089SmsSessions.  # noqa: E501
        :type: str
        """

        self._session_id = session_id

    @property
    def unread_message_count(self):
        """Gets the unread_message_count of this InlineResponse20089SmsSessions.  # noqa: E501

        The number of unread messages.  # noqa: E501

        :return: The unread_message_count of this InlineResponse20089SmsSessions.  # noqa: E501
        :rtype: int
        """
        return self._unread_message_count

    @unread_message_count.setter
    def unread_message_count(self, unread_message_count):
        """Sets the unread_message_count of this InlineResponse20089SmsSessions.

        The number of unread messages.  # noqa: E501

        :param unread_message_count: The unread_message_count of this InlineResponse20089SmsSessions.  # noqa: E501
        :type: int
        """

        self._unread_message_count = unread_message_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse20089SmsSessions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20089SmsSessions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
