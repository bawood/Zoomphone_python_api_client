# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2008LogDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'date_time': 'str',
        'hold_time': 'int',
        'device_private_ip': 'str',
        'device_public_ip': 'str',
        'duration': 'int',
        'forward_to': 'InlineResponse2008ForwardTo',
        'id': 'str',
        'path': 'str',
        'result': 'str',
        'site': 'InlineResponse2008Site'
    }

    attribute_map = {
        'date_time': 'date_time',
        'hold_time': 'hold_time',
        'device_private_ip': 'device_private_ip',
        'device_public_ip': 'device_public_ip',
        'duration': 'duration',
        'forward_to': 'forward_to',
        'id': 'id',
        'path': 'path',
        'result': 'result',
        'site': 'site'
    }

    def __init__(self, date_time=None, hold_time=None, device_private_ip=None, device_public_ip=None, duration=None, forward_to=None, id=None, path=None, result=None, site=None):  # noqa: E501
        """InlineResponse2008LogDetails - a model defined in Swagger"""  # noqa: E501
        self._date_time = None
        self._hold_time = None
        self._device_private_ip = None
        self._device_public_ip = None
        self._duration = None
        self._forward_to = None
        self._id = None
        self._path = None
        self._result = None
        self._site = None
        self.discriminator = None
        if date_time is not None:
            self.date_time = date_time
        if hold_time is not None:
            self.hold_time = hold_time
        if device_private_ip is not None:
            self.device_private_ip = device_private_ip
        if device_public_ip is not None:
            self.device_public_ip = device_public_ip
        if duration is not None:
            self.duration = duration
        if forward_to is not None:
            self.forward_to = forward_to
        if id is not None:
            self.id = id
        if path is not None:
            self.path = path
        if result is not None:
            self.result = result
        if site is not None:
            self.site = site

    @property
    def date_time(self):
        """Gets the date_time of this InlineResponse2008LogDetails.  # noqa: E501

        Start time of the call.  # noqa: E501

        :return: The date_time of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._date_time

    @date_time.setter
    def date_time(self, date_time):
        """Sets the date_time of this InlineResponse2008LogDetails.

        Start time of the call.  # noqa: E501

        :param date_time: The date_time of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._date_time = date_time

    @property
    def hold_time(self):
        """Gets the hold_time of this InlineResponse2008LogDetails.  # noqa: E501

        Hold time during a call in seconds.  # noqa: E501

        :return: The hold_time of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: int
        """
        return self._hold_time

    @hold_time.setter
    def hold_time(self, hold_time):
        """Sets the hold_time of this InlineResponse2008LogDetails.

        Hold time during a call in seconds.  # noqa: E501

        :param hold_time: The hold_time of this InlineResponse2008LogDetails.  # noqa: E501
        :type: int
        """

        self._hold_time = hold_time

    @property
    def device_private_ip(self):
        """Gets the device_private_ip of this InlineResponse2008LogDetails.  # noqa: E501

        Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :return: The device_private_ip of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._device_private_ip

    @device_private_ip.setter
    def device_private_ip(self, device_private_ip):
        """Sets the device_private_ip of this InlineResponse2008LogDetails.

        Display the device's private IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :param device_private_ip: The device_private_ip of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._device_private_ip = device_private_ip

    @property
    def device_public_ip(self):
        """Gets the device_public_ip of this InlineResponse2008LogDetails.  # noqa: E501

        Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :return: The device_public_ip of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._device_public_ip

    @device_public_ip.setter
    def device_public_ip(self, device_public_ip):
        """Sets the device_public_ip of this InlineResponse2008LogDetails.

        Display the device's public IP address if the account has the `show_device_ip_for_call_log` parameter set to `enabled`.  # noqa: E501

        :param device_public_ip: The device_public_ip of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._device_public_ip = device_public_ip

    @property
    def duration(self):
        """Gets the duration of this InlineResponse2008LogDetails.  # noqa: E501

        Duration of the call in seconds.  # noqa: E501

        :return: The duration of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this InlineResponse2008LogDetails.

        Duration of the call in seconds.  # noqa: E501

        :param duration: The duration of this InlineResponse2008LogDetails.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def forward_to(self):
        """Gets the forward_to of this InlineResponse2008LogDetails.  # noqa: E501


        :return: The forward_to of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: InlineResponse2008ForwardTo
        """
        return self._forward_to

    @forward_to.setter
    def forward_to(self, forward_to):
        """Sets the forward_to of this InlineResponse2008LogDetails.


        :param forward_to: The forward_to of this InlineResponse2008LogDetails.  # noqa: E501
        :type: InlineResponse2008ForwardTo
        """

        self._forward_to = forward_to

    @property
    def id(self):
        """Gets the id of this InlineResponse2008LogDetails.  # noqa: E501

        Call log ID.  # noqa: E501

        :return: The id of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse2008LogDetails.

        Call log ID.  # noqa: E501

        :param id: The id of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def path(self):
        """Gets the path of this InlineResponse2008LogDetails.  # noqa: E501

        Path of the call.  # noqa: E501

        :return: The path of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this InlineResponse2008LogDetails.

        Path of the call.  # noqa: E501

        :param path: The path of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def result(self):
        """Gets the result of this InlineResponse2008LogDetails.  # noqa: E501

        Result of the call: `Missed` | `Voicemail`| `Call connected`|`Rejected`| `Blocked`| `Busy`|`Wrong Number`| `No Answer`| `International Disabled`|`Internal Error`| `Call failed`| `Restricted Number`|`Call Cancel`| `Message`| `Answered by Other Member`|`Call Cancelled`| `Park`| `Parked`| `Blocked by non-GAL`| `Blocked by info-Barriers`|`Recording Failure`| `Recorded`| `Auto Recorded`.  # noqa: E501

        :return: The result of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this InlineResponse2008LogDetails.

        Result of the call: `Missed` | `Voicemail`| `Call connected`|`Rejected`| `Blocked`| `Busy`|`Wrong Number`| `No Answer`| `International Disabled`|`Internal Error`| `Call failed`| `Restricted Number`|`Call Cancel`| `Message`| `Answered by Other Member`|`Call Cancelled`| `Park`| `Parked`| `Blocked by non-GAL`| `Blocked by info-Barriers`|`Recording Failure`| `Recorded`| `Auto Recorded`.  # noqa: E501

        :param result: The result of this InlineResponse2008LogDetails.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def site(self):
        """Gets the site of this InlineResponse2008LogDetails.  # noqa: E501


        :return: The site of this InlineResponse2008LogDetails.  # noqa: E501
        :rtype: InlineResponse2008Site
        """
        return self._site

    @site.setter
    def site(self, site):
        """Sets the site of this InlineResponse2008LogDetails.


        :param site: The site of this InlineResponse2008LogDetails.  # noqa: E501
        :type: InlineResponse2008Site
        """

        self._site = site

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2008LogDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2008LogDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
