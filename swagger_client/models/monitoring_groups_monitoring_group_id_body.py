# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MonitoringGroupsMonitoringGroupIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'monitoring_privileges': 'list[str]',
        'name': 'str',
        'prompt': 'bool',
        'site_id': 'str'
    }

    attribute_map = {
        'monitoring_privileges': 'monitoring_privileges',
        'name': 'name',
        'prompt': 'prompt',
        'site_id': 'site_id'
    }

    def __init__(self, monitoring_privileges=None, name=None, prompt=None, site_id=None):  # noqa: E501
        """MonitoringGroupsMonitoringGroupIdBody - a model defined in Swagger"""  # noqa: E501
        self._monitoring_privileges = None
        self._name = None
        self._prompt = None
        self._site_id = None
        self.discriminator = None
        if monitoring_privileges is not None:
            self.monitoring_privileges = monitoring_privileges
        if name is not None:
            self.name = name
        if prompt is not None:
            self.prompt = prompt
        if site_id is not None:
            self.site_id = site_id

    @property
    def monitoring_privileges(self):
        """Gets the monitoring_privileges of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501

        Set of monitoring group's privileges.  # noqa: E501

        :return: The monitoring_privileges of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._monitoring_privileges

    @monitoring_privileges.setter
    def monitoring_privileges(self, monitoring_privileges):
        """Sets the monitoring_privileges of this MonitoringGroupsMonitoringGroupIdBody.

        Set of monitoring group's privileges.  # noqa: E501

        :param monitoring_privileges: The monitoring_privileges of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["listen", "whisper", "barge", "take_over"]  # noqa: E501
        if not set(monitoring_privileges).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `monitoring_privileges` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(monitoring_privileges) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._monitoring_privileges = monitoring_privileges

    @property
    def name(self):
        """Gets the name of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501

        Monitoring group's name.  # noqa: E501

        :return: The name of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this MonitoringGroupsMonitoringGroupIdBody.

        Monitoring group's name.  # noqa: E501

        :param name: The name of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def prompt(self):
        """Gets the prompt of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501

        Whether Play a disclaimer prompt to the call participants  # noqa: E501

        :return: The prompt of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :rtype: bool
        """
        return self._prompt

    @prompt.setter
    def prompt(self, prompt):
        """Sets the prompt of this MonitoringGroupsMonitoringGroupIdBody.

        Whether Play a disclaimer prompt to the call participants  # noqa: E501

        :param prompt: The prompt of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :type: bool
        """

        self._prompt = prompt

    @property
    def site_id(self):
        """Gets the site_id of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501

        Unique identifier of the monitoring group's site.  # noqa: E501

        :return: The site_id of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this MonitoringGroupsMonitoringGroupIdBody.

        Unique identifier of the monitoring group's site.  # noqa: E501

        :param site_id: The site_id of this MonitoringGroupsMonitoringGroupIdBody.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MonitoringGroupsMonitoringGroupIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MonitoringGroupsMonitoringGroupIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
