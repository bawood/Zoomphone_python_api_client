# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class NumbersNumberIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'capability': 'list[str]',
        'display_name': 'str',
        'emergency_address_status': 'int',
        'sip_group_id': 'str'
    }

    attribute_map = {
        'capability': 'capability',
        'display_name': 'display_name',
        'emergency_address_status': 'emergency_address_status',
        'sip_group_id': 'sip_group_id'
    }

    def __init__(self, capability=None, display_name=None, emergency_address_status=None, sip_group_id=None):  # noqa: E501
        """NumbersNumberIdBody - a model defined in Swagger"""  # noqa: E501
        self._capability = None
        self._display_name = None
        self._emergency_address_status = None
        self._sip_group_id = None
        self.discriminator = None
        if capability is not None:
            self.capability = capability
        if display_name is not None:
            self.display_name = display_name
        if emergency_address_status is not None:
            self.emergency_address_status = emergency_address_status
        if sip_group_id is not None:
            self.sip_group_id = sip_group_id

    @property
    def capability(self):
        """Gets the capability of this NumbersNumberIdBody.  # noqa: E501

        Phone number capability. Values: `outgoing` or `incoming`. Add one or both.  # noqa: E501

        :return: The capability of this NumbersNumberIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._capability

    @capability.setter
    def capability(self, capability):
        """Sets the capability of this NumbersNumberIdBody.

        Phone number capability. Values: `outgoing` or `incoming`. Add one or both.  # noqa: E501

        :param capability: The capability of this NumbersNumberIdBody.  # noqa: E501
        :type: list[str]
        """

        self._capability = capability

    @property
    def display_name(self):
        """Gets the display_name of this NumbersNumberIdBody.  # noqa: E501

        Phone number display name.  # noqa: E501

        :return: The display_name of this NumbersNumberIdBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this NumbersNumberIdBody.

        Phone number display name.  # noqa: E501

        :param display_name: The display_name of this NumbersNumberIdBody.  # noqa: E501
        :type: str
        """

        self._display_name = display_name

    @property
    def emergency_address_status(self):
        """Gets the emergency_address_status of this NumbersNumberIdBody.  # noqa: E501

        Confirm byoc phone number's emergency address status. 2-confirmed  # noqa: E501

        :return: The emergency_address_status of this NumbersNumberIdBody.  # noqa: E501
        :rtype: int
        """
        return self._emergency_address_status

    @emergency_address_status.setter
    def emergency_address_status(self, emergency_address_status):
        """Sets the emergency_address_status of this NumbersNumberIdBody.

        Confirm byoc phone number's emergency address status. 2-confirmed  # noqa: E501

        :param emergency_address_status: The emergency_address_status of this NumbersNumberIdBody.  # noqa: E501
        :type: int
        """

        self._emergency_address_status = emergency_address_status

    @property
    def sip_group_id(self):
        """Gets the sip_group_id of this NumbersNumberIdBody.  # noqa: E501

        Sip group id, only used for byoc phone number update.  # noqa: E501

        :return: The sip_group_id of this NumbersNumberIdBody.  # noqa: E501
        :rtype: str
        """
        return self._sip_group_id

    @sip_group_id.setter
    def sip_group_id(self, sip_group_id):
        """Sets the sip_group_id of this NumbersNumberIdBody.

        Sip group id, only used for byoc phone number update.  # noqa: E501

        :param sip_group_id: The sip_group_id of this NumbersNumberIdBody.  # noqa: E501
        :type: str
        """

        self._sip_group_id = sip_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(NumbersNumberIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NumbersNumberIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
