# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneDevicesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assigned_to': 'str',
        'assignee_extension_ids': 'list[str]',
        'display_name': 'str',
        'mac_address': 'str',
        'model': 'str',
        'type': 'str',
        'provision_template_id': 'str'
    }

    attribute_map = {
        'assigned_to': 'assigned_to',
        'assignee_extension_ids': 'assignee_extension_ids',
        'display_name': 'display_name',
        'mac_address': 'mac_address',
        'model': 'model',
        'type': 'type',
        'provision_template_id': 'provision_template_id'
    }

    def __init__(self, assigned_to=None, assignee_extension_ids=None, display_name=None, mac_address=None, model=None, type=None, provision_template_id=None):  # noqa: E501
        """PhoneDevicesBody - a model defined in Swagger"""  # noqa: E501
        self._assigned_to = None
        self._assignee_extension_ids = None
        self._display_name = None
        self._mac_address = None
        self._model = None
        self._type = None
        self._provision_template_id = None
        self.discriminator = None
        if assigned_to is not None:
            self.assigned_to = assigned_to
        if assignee_extension_ids is not None:
            self.assignee_extension_ids = assignee_extension_ids
        self.display_name = display_name
        self.mac_address = mac_address
        if model is not None:
            self.model = model
        if type is not None:
            self.type = type
        if provision_template_id is not None:
            self.provision_template_id = provision_template_id

    @property
    def assigned_to(self):
        """Gets the assigned_to of this PhoneDevicesBody.  # noqa: E501

        User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods#operation/users) API.  # noqa: E501

        :return: The assigned_to of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._assigned_to

    @assigned_to.setter
    def assigned_to(self, assigned_to):
        """Sets the assigned_to of this PhoneDevicesBody.

        User ID or email address of the user to whom this device is to be assigned. The User ID and the email of the user can be retrieved using the [List Users](https://marketplace.zoom.us/docs/api-reference/zoom-api/methods#operation/users) API.  # noqa: E501

        :param assigned_to: The assigned_to of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """

        self._assigned_to = assigned_to

    @property
    def assignee_extension_ids(self):
        """Gets the assignee_extension_ids of this PhoneDevicesBody.  # noqa: E501

        Available only for the account that has enabled the common area feature.   Extension ID of the [`user`](https://marketplace.zoom.us/docs/api-reference/phone/methods/#operation/phoneUser) or [`common area` ID](https://marketplace.zoom.us/docs/api-reference/phone/methods/#operation/listCommonAreas).  # noqa: E501

        :return: The assignee_extension_ids of this PhoneDevicesBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._assignee_extension_ids

    @assignee_extension_ids.setter
    def assignee_extension_ids(self, assignee_extension_ids):
        """Sets the assignee_extension_ids of this PhoneDevicesBody.

        Available only for the account that has enabled the common area feature.   Extension ID of the [`user`](https://marketplace.zoom.us/docs/api-reference/phone/methods/#operation/phoneUser) or [`common area` ID](https://marketplace.zoom.us/docs/api-reference/phone/methods/#operation/listCommonAreas).  # noqa: E501

        :param assignee_extension_ids: The assignee_extension_ids of this PhoneDevicesBody.  # noqa: E501
        :type: list[str]
        """

        self._assignee_extension_ids = assignee_extension_ids

    @property
    def display_name(self):
        """Gets the display_name of this PhoneDevicesBody.  # noqa: E501

        Display name of the desk phone.  # noqa: E501

        :return: The display_name of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PhoneDevicesBody.

        Display name of the desk phone.  # noqa: E501

        :param display_name: The display_name of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def mac_address(self):
        """Gets the mac_address of this PhoneDevicesBody.  # noqa: E501

        The MAC address of the desk phone.   Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.  # noqa: E501

        :return: The mac_address of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._mac_address

    @mac_address.setter
    def mac_address(self, mac_address):
        """Sets the mac_address of this PhoneDevicesBody.

        The MAC address of the desk phone.   Note: If you're using a wireless phone, enter the wired MAC address, not the wireless MAC address.  # noqa: E501

        :param mac_address: The mac_address of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """
        if mac_address is None:
            raise ValueError("Invalid value for `mac_address`, must not be `None`")  # noqa: E501

        self._mac_address = mac_address

    @property
    def model(self):
        """Gets the model of this PhoneDevicesBody.  # noqa: E501

        Model name of the device.  # noqa: E501

        :return: The model of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PhoneDevicesBody.

        Model name of the device.  # noqa: E501

        :param model: The model of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def type(self):
        """Gets the type of this PhoneDevicesBody.  # noqa: E501

        Manufacturer (brand) name of the device.  # noqa: E501

        :return: The type of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneDevicesBody.

        Manufacturer (brand) name of the device.  # noqa: E501

        :param type: The type of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def provision_template_id(self):
        """Gets the provision_template_id of this PhoneDevicesBody.  # noqa: E501

        Provision template id. Supported only by some devices. Empty string represents 'No value set'  # noqa: E501

        :return: The provision_template_id of this PhoneDevicesBody.  # noqa: E501
        :rtype: str
        """
        return self._provision_template_id

    @provision_template_id.setter
    def provision_template_id(self, provision_template_id):
        """Sets the provision_template_id of this PhoneDevicesBody.

        Provision template id. Supported only by some devices. Empty string represents 'No value set'  # noqa: E501

        :param provision_template_id: The provision_template_id of this PhoneDevicesBody.  # noqa: E501
        :type: str
        """

        self._provision_template_id = provision_template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneDevicesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneDevicesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
