# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneSettingTemplatesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'name': 'str',
        'site_id': 'str',
        'type': 'str'
    }

    attribute_map = {
        'description': 'description',
        'name': 'name',
        'site_id': 'site_id',
        'type': 'type'
    }

    def __init__(self, description=None, name=None, site_id=None, type=None):  # noqa: E501
        """PhoneSettingTemplatesBody - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._name = None
        self._site_id = None
        self._type = None
        self.discriminator = None
        if description is not None:
            self.description = description
        self.name = name
        if site_id is not None:
            self.site_id = site_id
        self.type = type

    @property
    def description(self):
        """Gets the description of this PhoneSettingTemplatesBody.  # noqa: E501

        A description of the template.  # noqa: E501

        :return: The description of this PhoneSettingTemplatesBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PhoneSettingTemplatesBody.

        A description of the template.  # noqa: E501

        :param description: The description of this PhoneSettingTemplatesBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def name(self):
        """Gets the name of this PhoneSettingTemplatesBody.  # noqa: E501

        The name of the template.  # noqa: E501

        :return: The name of this PhoneSettingTemplatesBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhoneSettingTemplatesBody.

        The name of the template.  # noqa: E501

        :param name: The name of this PhoneSettingTemplatesBody.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def site_id(self):
        """Gets the site_id of this PhoneSettingTemplatesBody.  # noqa: E501

        The unique identifier of the site. It's required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details.  # noqa: E501

        :return: The site_id of this PhoneSettingTemplatesBody.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this PhoneSettingTemplatesBody.

        The unique identifier of the site. It's required only when multiple sites are enabled. See [Managing multiple sites](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-multiple-sites) for details.  # noqa: E501

        :param site_id: The site_id of this PhoneSettingTemplatesBody.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def type(self):
        """Gets the type of this PhoneSettingTemplatesBody.  # noqa: E501

        The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.  # noqa: E501

        :return: The type of this PhoneSettingTemplatesBody.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneSettingTemplatesBody.

        The type of template. Values include `user`, `group`, `autoReceptionist`, `commonarea`, or `interop`.  # noqa: E501

        :param type: The type of this PhoneSettingTemplatesBody.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["user", "group", "autoReceptionist", "commonarea", "interop"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneSettingTemplatesBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneSettingTemplatesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
