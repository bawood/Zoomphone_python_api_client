# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'action': 'int',
        'audio_prompt_repeat': 'int',
        'forward_to_extension_id': 'str'
    }

    attribute_map = {
        'action': 'action',
        'audio_prompt_repeat': 'audio_prompt_repeat',
        'forward_to_extension_id': 'forward_to_extension_id'
    }

    def __init__(self, action=None, audio_prompt_repeat=None, forward_to_extension_id=None):  # noqa: E501
        """PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction - a model defined in Swagger"""  # noqa: E501
        self._action = None
        self._audio_prompt_repeat = None
        self._forward_to_extension_id = None
        self.discriminator = None
        if action is not None:
            self.action = action
        if audio_prompt_repeat is not None:
            self.audio_prompt_repeat = audio_prompt_repeat
        if forward_to_extension_id is not None:
            self.forward_to_extension_id = forward_to_extension_id

    @property
    def action(self):
        """Gets the action of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501

        The action if caller enters no action after the prompt played. -1 Disconnect the call 2 Forward to the user 4 Forward to the common area 5 Forward to Cisco/Polycom Room 6 Forward to the auto receptionist 7 Forward to the call queue 8 Forward to the shared line group 15 Forward to the Contact Center   # noqa: E501

        :return: The action of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :rtype: int
        """
        return self._action

    @action.setter
    def action(self, action):
        """Sets the action of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.

        The action if caller enters no action after the prompt played. -1 Disconnect the call 2 Forward to the user 4 Forward to the common area 5 Forward to Cisco/Polycom Room 6 Forward to the auto receptionist 7 Forward to the call queue 8 Forward to the shared line group 15 Forward to the Contact Center   # noqa: E501

        :param action: The action of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :type: int
        """

        self._action = action

    @property
    def audio_prompt_repeat(self):
        """Gets the audio_prompt_repeat of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501

        The number of times to repeat the audio prompt.  # noqa: E501

        :return: The audio_prompt_repeat of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :rtype: int
        """
        return self._audio_prompt_repeat

    @audio_prompt_repeat.setter
    def audio_prompt_repeat(self, audio_prompt_repeat):
        """Sets the audio_prompt_repeat of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.

        The number of times to repeat the audio prompt.  # noqa: E501

        :param audio_prompt_repeat: The audio_prompt_repeat of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3]  # noqa: E501
        if audio_prompt_repeat not in allowed_values:
            raise ValueError(
                "Invalid value for `audio_prompt_repeat` ({0}), must be one of {1}"  # noqa: E501
                .format(audio_prompt_repeat, allowed_values)
            )

        self._audio_prompt_repeat = audio_prompt_repeat

    @property
    def forward_to_extension_id(self):
        """Gets the forward_to_extension_id of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501

        The extension ID or contact center setting ID.  # noqa: E501

        :return: The forward_to_extension_id of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :rtype: str
        """
        return self._forward_to_extension_id

    @forward_to_extension_id.setter
    def forward_to_extension_id(self, forward_to_extension_id):
        """Sets the forward_to_extension_id of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.

        The extension ID or contact center setting ID.  # noqa: E501

        :param forward_to_extension_id: The forward_to_extension_id of this PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction.  # noqa: E501
        :type: str
        """

        self._forward_to_extension_id = forward_to_extension_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneautoReceptionistsautoReceptionistIdivrCallerEntersNoAction):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
