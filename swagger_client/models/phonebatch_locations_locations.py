# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhonebatchLocationsLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'bssid': 'str',
        'company_address': 'PhonebatchLocationsCompanyAddress',
        'display_name': 'str',
        'elin': 'str',
        'identifier': 'str',
        'network_switches': 'list[PhonebatchLocationsNetworkSwitches]',
        'parent_identifier': 'str',
        'private_ip': 'str',
        'public_ip': 'str',
        'sip_group_name': 'str',
        'minimum_match_criteria': 'bool'
    }

    attribute_map = {
        'bssid': 'bssid',
        'company_address': 'company_address',
        'display_name': 'display_name',
        'elin': 'elin',
        'identifier': 'identifier',
        'network_switches': 'network_switches',
        'parent_identifier': 'parent_identifier',
        'private_ip': 'private_ip',
        'public_ip': 'public_ip',
        'sip_group_name': 'sip_group_name',
        'minimum_match_criteria': 'minimum_match_criteria'
    }

    def __init__(self, bssid=None, company_address=None, display_name=None, elin=None, identifier=None, network_switches=None, parent_identifier=None, private_ip=None, public_ip=None, sip_group_name=None, minimum_match_criteria=None):  # noqa: E501
        """PhonebatchLocationsLocations - a model defined in Swagger"""  # noqa: E501
        self._bssid = None
        self._company_address = None
        self._display_name = None
        self._elin = None
        self._identifier = None
        self._network_switches = None
        self._parent_identifier = None
        self._private_ip = None
        self._public_ip = None
        self._sip_group_name = None
        self._minimum_match_criteria = None
        self.discriminator = None
        if bssid is not None:
            self.bssid = bssid
        self.company_address = company_address
        self.display_name = display_name
        if elin is not None:
            self.elin = elin
        self.identifier = identifier
        if network_switches is not None:
            self.network_switches = network_switches
        if parent_identifier is not None:
            self.parent_identifier = parent_identifier
        if private_ip is not None:
            self.private_ip = private_ip
        if public_ip is not None:
            self.public_ip = public_ip
        if sip_group_name is not None:
            self.sip_group_name = sip_group_name
        if minimum_match_criteria is not None:
            self.minimum_match_criteria = minimum_match_criteria

    @property
    def bssid(self):
        """Gets the bssid of this PhonebatchLocationsLocations.  # noqa: E501

        The location's BSSID (Basic Service Set Identifier).  # noqa: E501

        :return: The bssid of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._bssid

    @bssid.setter
    def bssid(self, bssid):
        """Sets the bssid of this PhonebatchLocationsLocations.

        The location's BSSID (Basic Service Set Identifier).  # noqa: E501

        :param bssid: The bssid of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._bssid = bssid

    @property
    def company_address(self):
        """Gets the company_address of this PhonebatchLocationsLocations.  # noqa: E501


        :return: The company_address of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: PhonebatchLocationsCompanyAddress
        """
        return self._company_address

    @company_address.setter
    def company_address(self, company_address):
        """Sets the company_address of this PhonebatchLocationsLocations.


        :param company_address: The company_address of this PhonebatchLocationsLocations.  # noqa: E501
        :type: PhonebatchLocationsCompanyAddress
        """
        if company_address is None:
            raise ValueError("Invalid value for `company_address`, must not be `None`")  # noqa: E501

        self._company_address = company_address

    @property
    def display_name(self):
        """Gets the display_name of this PhonebatchLocationsLocations.  # noqa: E501

        The location's display name.  # noqa: E501

        :return: The display_name of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this PhonebatchLocationsLocations.

        The location's display name.  # noqa: E501

        :param display_name: The display_name of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """
        if display_name is None:
            raise ValueError("Invalid value for `display_name`, must not be `None`")  # noqa: E501

        self._display_name = display_name

    @property
    def elin(self):
        """Gets the elin of this PhonebatchLocationsLocations.  # noqa: E501

        The location's ELIN (Emergency Location Identification Number). This value can be a BYOC number. If you use a BYOC number, you will need to manually update the BYOC address with your carrier.  # noqa: E501

        :return: The elin of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._elin

    @elin.setter
    def elin(self, elin):
        """Sets the elin of this PhonebatchLocationsLocations.

        The location's ELIN (Emergency Location Identification Number). This value can be a BYOC number. If you use a BYOC number, you will need to manually update the BYOC address with your carrier.  # noqa: E501

        :param elin: The elin of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._elin = elin

    @property
    def identifier(self):
        """Gets the identifier of this PhonebatchLocationsLocations.  # noqa: E501

        The location's ID.  # noqa: E501

        :return: The identifier of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._identifier

    @identifier.setter
    def identifier(self, identifier):
        """Sets the identifier of this PhonebatchLocationsLocations.

        The location's ID.  # noqa: E501

        :param identifier: The identifier of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """
        if identifier is None:
            raise ValueError("Invalid value for `identifier`, must not be `None`")  # noqa: E501

        self._identifier = identifier

    @property
    def network_switches(self):
        """Gets the network_switches of this PhonebatchLocationsLocations.  # noqa: E501


        :return: The network_switches of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: list[PhonebatchLocationsNetworkSwitches]
        """
        return self._network_switches

    @network_switches.setter
    def network_switches(self, network_switches):
        """Sets the network_switches of this PhonebatchLocationsLocations.


        :param network_switches: The network_switches of this PhonebatchLocationsLocations.  # noqa: E501
        :type: list[PhonebatchLocationsNetworkSwitches]
        """

        self._network_switches = network_switches

    @property
    def parent_identifier(self):
        """Gets the parent_identifier of this PhonebatchLocationsLocations.  # noqa: E501

        The location's parent location ID. Leave this value empty if the current location is a top location.  # noqa: E501

        :return: The parent_identifier of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._parent_identifier

    @parent_identifier.setter
    def parent_identifier(self, parent_identifier):
        """Sets the parent_identifier of this PhonebatchLocationsLocations.

        The location's parent location ID. Leave this value empty if the current location is a top location.  # noqa: E501

        :param parent_identifier: The parent_identifier of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._parent_identifier = parent_identifier

    @property
    def private_ip(self):
        """Gets the private_ip of this PhonebatchLocationsLocations.  # noqa: E501

        The location's subnet or private IP address. This field is required if `minimum_match_criteria` is true.  # noqa: E501

        :return: The private_ip of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._private_ip

    @private_ip.setter
    def private_ip(self, private_ip):
        """Sets the private_ip of this PhonebatchLocationsLocations.

        The location's subnet or private IP address. This field is required if `minimum_match_criteria` is true.  # noqa: E501

        :param private_ip: The private_ip of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._private_ip = private_ip

    @property
    def public_ip(self):
        """Gets the public_ip of this PhonebatchLocationsLocations.  # noqa: E501

        The location's public IP address. This field is required for top locations.  # noqa: E501

        :return: The public_ip of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._public_ip

    @public_ip.setter
    def public_ip(self, public_ip):
        """Sets the public_ip of this PhonebatchLocationsLocations.

        The location's public IP address. This field is required for top locations.  # noqa: E501

        :param public_ip: The public_ip of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._public_ip = public_ip

    @property
    def sip_group_name(self):
        """Gets the sip_group_name of this PhonebatchLocationsLocations.  # noqa: E501

        The location's assigned SIP routing group for outgoing calls. The system routes the call to the defined [SIP trunk](https://en.wikipedia.org/wiki/SIP_trunking) in the SIP groups when location-based routing is enabled.  This only affects top locations and ignores all other locations.  # noqa: E501

        :return: The sip_group_name of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: str
        """
        return self._sip_group_name

    @sip_group_name.setter
    def sip_group_name(self, sip_group_name):
        """Sets the sip_group_name of this PhonebatchLocationsLocations.

        The location's assigned SIP routing group for outgoing calls. The system routes the call to the defined [SIP trunk](https://en.wikipedia.org/wiki/SIP_trunking) in the SIP groups when location-based routing is enabled.  This only affects top locations and ignores all other locations.  # noqa: E501

        :param sip_group_name: The sip_group_name of this PhonebatchLocationsLocations.  # noqa: E501
        :type: str
        """

        self._sip_group_name = sip_group_name

    @property
    def minimum_match_criteria(self):
        """Gets the minimum_match_criteria of this PhonebatchLocationsLocations.  # noqa: E501

        If true, it requires a user's location match on both public and private IP address, or BSSID, or network switch; detecting only a public IP address is not enough to detect the location.  # noqa: E501

        :return: The minimum_match_criteria of this PhonebatchLocationsLocations.  # noqa: E501
        :rtype: bool
        """
        return self._minimum_match_criteria

    @minimum_match_criteria.setter
    def minimum_match_criteria(self, minimum_match_criteria):
        """Sets the minimum_match_criteria of this PhonebatchLocationsLocations.

        If true, it requires a user's location match on both public and private IP address, or BSSID, or network switch; detecting only a public IP address is not enough to detect the location.  # noqa: E501

        :param minimum_match_criteria: The minimum_match_criteria of this PhonebatchLocationsLocations.  # noqa: E501
        :type: bool
        """

        self._minimum_match_criteria = minimum_match_criteria

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonebatchLocationsLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonebatchLocationsLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
