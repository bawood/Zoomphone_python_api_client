# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enable': 'bool',
        'reset': 'bool',
        'allow_internal_calls': 'bool',
        'allowed_locations': 'PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocationsAllowedLocations'
    }

    attribute_map = {
        'enable': 'enable',
        'reset': 'reset',
        'allow_internal_calls': 'allow_internal_calls',
        'allowed_locations': 'allowed_locations'
    }

    def __init__(self, enable=None, reset=None, allow_internal_calls=None, allowed_locations=None):  # noqa: E501
        """PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations - a model defined in Swagger"""  # noqa: E501
        self._enable = None
        self._reset = None
        self._allow_internal_calls = None
        self._allowed_locations = None
        self.discriminator = None
        if enable is not None:
            self.enable = enable
        if reset is not None:
            self.reset = reset
        if allow_internal_calls is not None:
            self.allow_internal_calls = allow_internal_calls
        if allowed_locations is not None:
            self.allowed_locations = allowed_locations

    @property
    def enable(self):
        """Gets the enable of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501

        Whether to define where the extension or user can make and accept calls and send SMS. When the extension or user is outside of the allowed locations, calls will follow \"When a call is not answered\" settings, meanwhile outbound and inbound emergency calls and SMS will still be allowed. Note: SMS settings will only be available to users.  # noqa: E501

        :return: The enable of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :rtype: bool
        """
        return self._enable

    @enable.setter
    def enable(self, enable):
        """Sets the enable of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.

        Whether to define where the extension or user can make and accept calls and send SMS. When the extension or user is outside of the allowed locations, calls will follow \"When a call is not answered\" settings, meanwhile outbound and inbound emergency calls and SMS will still be allowed. Note: SMS settings will only be available to users.  # noqa: E501

        :param enable: The enable of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :type: bool
        """

        self._enable = enable

    @property
    def reset(self):
        """Gets the reset of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501

        If reset, the current settings will reset to the default setting.  # noqa: E501

        :return: The reset of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :rtype: bool
        """
        return self._reset

    @reset.setter
    def reset(self, reset):
        """Sets the reset of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.

        If reset, the current settings will reset to the default setting.  # noqa: E501

        :param reset: The reset of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :type: bool
        """

        self._reset = reset

    @property
    def allow_internal_calls(self):
        """Gets the allow_internal_calls of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501

        Whether to allow internal calls/SMS when outside of allowed locations.  # noqa: E501

        :return: The allow_internal_calls of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :rtype: bool
        """
        return self._allow_internal_calls

    @allow_internal_calls.setter
    def allow_internal_calls(self, allow_internal_calls):
        """Sets the allow_internal_calls of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.

        Whether to allow internal calls/SMS when outside of allowed locations.  # noqa: E501

        :param allow_internal_calls: The allow_internal_calls of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :type: bool
        """

        self._allow_internal_calls = allow_internal_calls

    @property
    def allowed_locations(self):
        """Gets the allowed_locations of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501


        :return: The allowed_locations of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :rtype: PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocationsAllowedLocations
        """
        return self._allowed_locations

    @allowed_locations.setter
    def allowed_locations(self, allowed_locations):
        """Sets the allowed_locations of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.


        :param allowed_locations: The allowed_locations of this PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations.  # noqa: E501
        :type: PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocationsAllowedLocations
        """

        self._allowed_locations = allowed_locations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonecommonAreascommonAreaIdpoliciespolicyTypeAllowedCallLocations):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
