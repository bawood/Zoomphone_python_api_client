# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'site_id': 'str',
        'selected_all_holidays': 'bool'
    }

    attribute_map = {
        'site_id': 'site_id',
        'selected_all_holidays': 'selected_all_holidays'
    }

    def __init__(self, site_id=None, selected_all_holidays=None):  # noqa: E501
        """PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays - a model defined in Swagger"""  # noqa: E501
        self._site_id = None
        self._selected_all_holidays = None
        self.discriminator = None
        if site_id is not None:
            self.site_id = site_id
        if selected_all_holidays is not None:
            self.selected_all_holidays = selected_all_holidays

    @property
    def site_id(self):
        """Gets the site_id of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501

        The site ID.  # noqa: E501

        :return: The site_id of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501
        :rtype: str
        """
        return self._site_id

    @site_id.setter
    def site_id(self, site_id):
        """Sets the site_id of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.

        The site ID.  # noqa: E501

        :param site_id: The site_id of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501
        :type: str
        """

        self._site_id = site_id

    @property
    def selected_all_holidays(self):
        """Gets the selected_all_holidays of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501

        Whether to select the site all holidays.  # noqa: E501

        :return: The selected_all_holidays of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501
        :rtype: bool
        """
        return self._selected_all_holidays

    @selected_all_holidays.setter
    def selected_all_holidays(self, selected_all_holidays):
        """Sets the selected_all_holidays of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.

        Whether to select the site all holidays.  # noqa: E501

        :param selected_all_holidays: The selected_all_holidays of this PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays.  # noqa: E501
        :type: bool
        """

        self._selected_all_holidays = selected_all_holidays

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonecommonAreascommonAreaIdpoliciespolicyTypeRestrictedCallHoursRestrictedHolidayHoursSitesSiteHolidays):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
