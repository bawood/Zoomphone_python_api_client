# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'allow_callers_check_voicemail': 'bool',
        'allow_members_to_reset': 'bool',
        'audio_while_connecting_id': 'str',
        'call_distribution': 'PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallDistribution',
        'call_forwarding_settings': 'list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallForwardingSettings]',
        'call_not_answer_action': 'int',
        'busy_on_another_call_action': 'int',
        'busy_require_press_1_before_connecting': 'bool',
        'un_answered_require_press_1_before_connecting': 'bool',
        'overflow_play_callee_voicemail_greeting': 'bool',
        'play_callee_voicemail_greeting': 'bool',
        'busy_play_callee_voicemail_greeting': 'bool',
        'phone_number': 'str',
        'description': 'str',
        'busy_phone_number': 'str',
        'busy_description': 'str',
        'connect_to_operator': 'bool',
        'custom_hours_settings': 'list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CustomHoursSettings]',
        'forward_to_extension_id': 'str',
        'busy_forward_to_extension_id': 'str',
        '_from': 'datetime',
        'greeting_prompt_id': 'str',
        'holiday_id': 'str',
        'max_call_in_queue': 'int',
        'max_wait_time': 'int',
        'music_on_hold_id': 'str',
        'name': 'str',
        'operator_extension_id': 'str',
        'receive_call': 'bool',
        'require_press_1_before_connecting': 'bool',
        'ring_mode': 'str',
        'to': 'datetime',
        'type': 'int',
        'voicemail_greeting_id': 'str',
        'wrap_up_time': 'int'
    }

    attribute_map = {
        'allow_callers_check_voicemail': 'allow_callers_check_voicemail',
        'allow_members_to_reset': 'allow_members_to_reset',
        'audio_while_connecting_id': 'audio_while_connecting_id',
        'call_distribution': 'call_distribution',
        'call_forwarding_settings': 'call_forwarding_settings',
        'call_not_answer_action': 'call_not_answer_action',
        'busy_on_another_call_action': 'busy_on_another_call_action',
        'busy_require_press_1_before_connecting': 'busy_require_press_1_before_connecting',
        'un_answered_require_press_1_before_connecting': 'un_answered_require_press_1_before_connecting',
        'overflow_play_callee_voicemail_greeting': 'overflow_play_callee_voicemail_greeting',
        'play_callee_voicemail_greeting': 'play_callee_voicemail_greeting',
        'busy_play_callee_voicemail_greeting': 'busy_play_callee_voicemail_greeting',
        'phone_number': 'phone_number',
        'description': 'description',
        'busy_phone_number': 'busy_phone_number',
        'busy_description': 'busy_description',
        'connect_to_operator': 'connect_to_operator',
        'custom_hours_settings': 'custom_hours_settings',
        'forward_to_extension_id': 'forward_to_extension_id',
        'busy_forward_to_extension_id': 'busy_forward_to_extension_id',
        '_from': 'from',
        'greeting_prompt_id': 'greeting_prompt_id',
        'holiday_id': 'holiday_id',
        'max_call_in_queue': 'max_call_in_queue',
        'max_wait_time': 'max_wait_time',
        'music_on_hold_id': 'music_on_hold_id',
        'name': 'name',
        'operator_extension_id': 'operator_extension_id',
        'receive_call': 'receive_call',
        'require_press_1_before_connecting': 'require_press_1_before_connecting',
        'ring_mode': 'ring_mode',
        'to': 'to',
        'type': 'type',
        'voicemail_greeting_id': 'voicemail_greeting_id',
        'wrap_up_time': 'wrap_up_time'
    }

    def __init__(self, allow_callers_check_voicemail=None, allow_members_to_reset=None, audio_while_connecting_id=None, call_distribution=None, call_forwarding_settings=None, call_not_answer_action=None, busy_on_another_call_action=None, busy_require_press_1_before_connecting=None, un_answered_require_press_1_before_connecting=None, overflow_play_callee_voicemail_greeting=None, play_callee_voicemail_greeting=None, busy_play_callee_voicemail_greeting=None, phone_number=None, description=None, busy_phone_number=None, busy_description=None, connect_to_operator=None, custom_hours_settings=None, forward_to_extension_id=None, busy_forward_to_extension_id=None, _from=None, greeting_prompt_id=None, holiday_id=None, max_call_in_queue=None, max_wait_time=None, music_on_hold_id=None, name=None, operator_extension_id=None, receive_call=None, require_press_1_before_connecting=None, ring_mode=None, to=None, type=None, voicemail_greeting_id=None, wrap_up_time=None):  # noqa: E501
        """PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1 - a model defined in Swagger"""  # noqa: E501
        self._allow_callers_check_voicemail = None
        self._allow_members_to_reset = None
        self._audio_while_connecting_id = None
        self._call_distribution = None
        self._call_forwarding_settings = None
        self._call_not_answer_action = None
        self._busy_on_another_call_action = None
        self._busy_require_press_1_before_connecting = None
        self._un_answered_require_press_1_before_connecting = None
        self._overflow_play_callee_voicemail_greeting = None
        self._play_callee_voicemail_greeting = None
        self._busy_play_callee_voicemail_greeting = None
        self._phone_number = None
        self._description = None
        self._busy_phone_number = None
        self._busy_description = None
        self._connect_to_operator = None
        self._custom_hours_settings = None
        self._forward_to_extension_id = None
        self._busy_forward_to_extension_id = None
        self.__from = None
        self._greeting_prompt_id = None
        self._holiday_id = None
        self._max_call_in_queue = None
        self._max_wait_time = None
        self._music_on_hold_id = None
        self._name = None
        self._operator_extension_id = None
        self._receive_call = None
        self._require_press_1_before_connecting = None
        self._ring_mode = None
        self._to = None
        self._type = None
        self._voicemail_greeting_id = None
        self._wrap_up_time = None
        self.discriminator = None
        if allow_callers_check_voicemail is not None:
            self.allow_callers_check_voicemail = allow_callers_check_voicemail
        if allow_members_to_reset is not None:
            self.allow_members_to_reset = allow_members_to_reset
        if audio_while_connecting_id is not None:
            self.audio_while_connecting_id = audio_while_connecting_id
        if call_distribution is not None:
            self.call_distribution = call_distribution
        if call_forwarding_settings is not None:
            self.call_forwarding_settings = call_forwarding_settings
        if call_not_answer_action is not None:
            self.call_not_answer_action = call_not_answer_action
        if busy_on_another_call_action is not None:
            self.busy_on_another_call_action = busy_on_another_call_action
        if busy_require_press_1_before_connecting is not None:
            self.busy_require_press_1_before_connecting = busy_require_press_1_before_connecting
        if un_answered_require_press_1_before_connecting is not None:
            self.un_answered_require_press_1_before_connecting = un_answered_require_press_1_before_connecting
        if overflow_play_callee_voicemail_greeting is not None:
            self.overflow_play_callee_voicemail_greeting = overflow_play_callee_voicemail_greeting
        if play_callee_voicemail_greeting is not None:
            self.play_callee_voicemail_greeting = play_callee_voicemail_greeting
        if busy_play_callee_voicemail_greeting is not None:
            self.busy_play_callee_voicemail_greeting = busy_play_callee_voicemail_greeting
        if phone_number is not None:
            self.phone_number = phone_number
        if description is not None:
            self.description = description
        if busy_phone_number is not None:
            self.busy_phone_number = busy_phone_number
        if busy_description is not None:
            self.busy_description = busy_description
        if connect_to_operator is not None:
            self.connect_to_operator = connect_to_operator
        if custom_hours_settings is not None:
            self.custom_hours_settings = custom_hours_settings
        if forward_to_extension_id is not None:
            self.forward_to_extension_id = forward_to_extension_id
        if busy_forward_to_extension_id is not None:
            self.busy_forward_to_extension_id = busy_forward_to_extension_id
        if _from is not None:
            self._from = _from
        if greeting_prompt_id is not None:
            self.greeting_prompt_id = greeting_prompt_id
        if holiday_id is not None:
            self.holiday_id = holiday_id
        if max_call_in_queue is not None:
            self.max_call_in_queue = max_call_in_queue
        if max_wait_time is not None:
            self.max_wait_time = max_wait_time
        if music_on_hold_id is not None:
            self.music_on_hold_id = music_on_hold_id
        if name is not None:
            self.name = name
        if operator_extension_id is not None:
            self.operator_extension_id = operator_extension_id
        if receive_call is not None:
            self.receive_call = receive_call
        if require_press_1_before_connecting is not None:
            self.require_press_1_before_connecting = require_press_1_before_connecting
        if ring_mode is not None:
            self.ring_mode = ring_mode
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type
        if voicemail_greeting_id is not None:
            self.voicemail_greeting_id = voicemail_greeting_id
        if wrap_up_time is not None:
            self.wrap_up_time = wrap_up_time

    @property
    def allow_callers_check_voicemail(self):
        """Gets the allow_callers_check_voicemail of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Whether to allow the callers to check voicemails over a phone. Required only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The allow_callers_check_voicemail of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._allow_callers_check_voicemail

    @allow_callers_check_voicemail.setter
    def allow_callers_check_voicemail(self, allow_callers_check_voicemail):
        """Sets the allow_callers_check_voicemail of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Whether to allow the callers to check voicemails over a phone. Required only when the `call_not_answer_action` setting is set to `1` (Forward to a voicemail).  # noqa: E501

        :param allow_callers_check_voicemail: The allow_callers_check_voicemail of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._allow_callers_check_voicemail = allow_callers_check_voicemail

    @property
    def allow_members_to_reset(self):
        """Gets the allow_members_to_reset of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Allow queue members to set their own Business Hours. This will allow queue members' Business Hours to override the default hours of the Call Queue.  This is only required for `Call Queue custom_hours` sub-setting.  # noqa: E501

        :return: The allow_members_to_reset of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._allow_members_to_reset

    @allow_members_to_reset.setter
    def allow_members_to_reset(self, allow_members_to_reset):
        """Sets the allow_members_to_reset of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Allow queue members to set their own Business Hours. This will allow queue members' Business Hours to override the default hours of the Call Queue.  This is only required for `Call Queue custom_hours` sub-setting.  # noqa: E501

        :param allow_members_to_reset: The allow_members_to_reset of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._allow_members_to_reset = allow_members_to_reset

    @property
    def audio_while_connecting_id(self):
        """Gets the audio_while_connecting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The audio while connecting prompt ID. Option to select the audio played for the inbound callers when they are waiting to be routed to the next available call queue member.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :return: The audio_while_connecting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._audio_while_connecting_id

    @audio_while_connecting_id.setter
    def audio_while_connecting_id(self, audio_while_connecting_id):
        """Sets the audio_while_connecting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The audio while connecting prompt ID. Option to select the audio played for the inbound callers when they are waiting to be routed to the next available call queue member.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :param audio_while_connecting_id: The audio_while_connecting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._audio_while_connecting_id = audio_while_connecting_id

    @property
    def call_distribution(self):
        """Gets the call_distribution of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501


        :return: The call_distribution of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallDistribution
        """
        return self._call_distribution

    @call_distribution.setter
    def call_distribution(self, call_distribution):
        """Sets the call_distribution of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.


        :param call_distribution: The call_distribution of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallDistribution
        """

        self._call_distribution = call_distribution

    @property
    def call_forwarding_settings(self):
        """Gets the call_forwarding_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The call forwarding settings. This is only required for the `call_forwarding` sub-setting.  # noqa: E501

        :return: The call_forwarding_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallForwardingSettings]
        """
        return self._call_forwarding_settings

    @call_forwarding_settings.setter
    def call_forwarding_settings(self, call_forwarding_settings):
        """Sets the call_forwarding_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The call forwarding settings. This is only required for the `call_forwarding` sub-setting.  # noqa: E501

        :param call_forwarding_settings: The call_forwarding_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CallForwardingSettings]
        """

        self._call_forwarding_settings = call_forwarding_settings

    @property
    def call_not_answer_action(self):
        """Gets the call_not_answer_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The action to take when a call is not answered:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  * `13` - Forward to a message.  * `14` - Forward to an interactive voice response (IVR).   This is only required for the `call_handling` sub-setting.  # noqa: E501

        :return: The call_not_answer_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._call_not_answer_action

    @call_not_answer_action.setter
    def call_not_answer_action(self, call_not_answer_action):
        """Sets the call_not_answer_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The action to take when a call is not answered:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `11` — Disconnect.  * `12` — Play a message, then disconnect.  * `13` - Forward to a message.  * `14` - Forward to an interactive voice response (IVR).   This is only required for the `call_handling` sub-setting.  # noqa: E501

        :param call_not_answer_action: The call_not_answer_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 4, 6, 7, 8, 9, 10, 11, 12, 13, 14]  # noqa: E501
        if call_not_answer_action not in allowed_values:
            raise ValueError(
                "Invalid value for `call_not_answer_action` ({0}), must be one of {1}"  # noqa: E501
                .format(call_not_answer_action, allowed_values)
            )

        self._call_not_answer_action = call_not_answer_action

    @property
    def busy_on_another_call_action(self):
        """Gets the busy_on_another_call_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The action to take when I'm busy on another call:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `12` — Play a message, then disconnect.  * `21` — Call waiting.  * `22` — Play a busy signal.   This is only required for the `call_handling` sub-setting.  # noqa: E501

        :return: The busy_on_another_call_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._busy_on_another_call_action

    @busy_on_another_call_action.setter
    def busy_on_another_call_action(self, busy_on_another_call_action):
        """Sets the busy_on_another_call_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The action to take when I'm busy on another call:  * `1` — Forward to a voicemail.  * `2` — Forward to the user.  * `4` — Forward to the common area.  * `6` — Forward to the auto receptionist.  * `7` — Forward to a call queue.  * `8` — Forward to a shared line group.  * `9` — Forward to an external contact.  * `10` - Forward to a phone number.  * `12` — Play a message, then disconnect.  * `21` — Call waiting.  * `22` — Play a busy signal.   This is only required for the `call_handling` sub-setting.  # noqa: E501

        :param busy_on_another_call_action: The busy_on_another_call_action of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 4, 6, 7, 8, 9, 10, 12, 21, 22]  # noqa: E501
        if busy_on_another_call_action not in allowed_values:
            raise ValueError(
                "Invalid value for `busy_on_another_call_action` ({0}), must be one of {1}"  # noqa: E501
                .format(busy_on_another_call_action, allowed_values)
            )

        self._busy_on_another_call_action = busy_on_another_call_action

    @property
    def busy_require_press_1_before_connecting(self):
        """Gets the busy_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        When one is busy on another call, the receiver needs to press 1 before connecting the call for it to be forwarded to an external contact or a number. Enable this option to ensure that forwarded calls won't reach the voicemail box for the external contact or a number.  # noqa: E501

        :return: The busy_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._busy_require_press_1_before_connecting

    @busy_require_press_1_before_connecting.setter
    def busy_require_press_1_before_connecting(self, busy_require_press_1_before_connecting):
        """Sets the busy_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        When one is busy on another call, the receiver needs to press 1 before connecting the call for it to be forwarded to an external contact or a number. Enable this option to ensure that forwarded calls won't reach the voicemail box for the external contact or a number.  # noqa: E501

        :param busy_require_press_1_before_connecting: The busy_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._busy_require_press_1_before_connecting = busy_require_press_1_before_connecting

    @property
    def un_answered_require_press_1_before_connecting(self):
        """Gets the un_answered_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        When a call goes unanswered, press 1 before connecting the call to forward to an external contact or a number. Enable this option to ensure that forwarded calls won't reach the voicemail box for the external contact or a number.  # noqa: E501

        :return: The un_answered_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._un_answered_require_press_1_before_connecting

    @un_answered_require_press_1_before_connecting.setter
    def un_answered_require_press_1_before_connecting(self, un_answered_require_press_1_before_connecting):
        """Sets the un_answered_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        When a call goes unanswered, press 1 before connecting the call to forward to an external contact or a number. Enable this option to ensure that forwarded calls won't reach the voicemail box for the external contact or a number.  # noqa: E501

        :param un_answered_require_press_1_before_connecting: The un_answered_require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._un_answered_require_press_1_before_connecting = un_answered_require_press_1_before_connecting

    @property
    def overflow_play_callee_voicemail_greeting(self):
        """Gets the overflow_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Whether to play the callee's voicemail greeting when the caller reaches the end of forwarding sequence. Displayed when `call_not_answer_action` set to: `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :return: The overflow_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._overflow_play_callee_voicemail_greeting

    @overflow_play_callee_voicemail_greeting.setter
    def overflow_play_callee_voicemail_greeting(self, overflow_play_callee_voicemail_greeting):
        """Sets the overflow_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Whether to play the callee's voicemail greeting when the caller reaches the end of forwarding sequence. Displayed when `call_not_answer_action` set to: `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :param overflow_play_callee_voicemail_greeting: The overflow_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._overflow_play_callee_voicemail_greeting = overflow_play_callee_voicemail_greeting

    @property
    def play_callee_voicemail_greeting(self):
        """Gets the play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_on_another_call_action` action or `call_not_answer_action` set to `1` - Forward to a voicemail.  # noqa: E501

        :return: The play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._play_callee_voicemail_greeting

    @play_callee_voicemail_greeting.setter
    def play_callee_voicemail_greeting(self, play_callee_voicemail_greeting):
        """Sets the play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_on_another_call_action` action or `call_not_answer_action` set to `1` - Forward to a voicemail.  # noqa: E501

        :param play_callee_voicemail_greeting: The play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._play_callee_voicemail_greeting = play_callee_voicemail_greeting

    @property
    def busy_play_callee_voicemail_greeting(self):
        """Gets the busy_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_on_another_call_action` action set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :return: The busy_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._busy_play_callee_voicemail_greeting

    @busy_play_callee_voicemail_greeting.setter
    def busy_play_callee_voicemail_greeting(self, busy_play_callee_voicemail_greeting):
        """Sets the busy_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Whether to play callee's voicemail greeting when caller reaches end of forwarding sequence. Displayed when `busy_on_another_call_action` action set to `2` - Forward to the user, `4` - Forward to the common area, `6` - Forward to the auto receptionist, `7` - Forward to a call queue, `8` - Forward to a shared line group, `9` - Forward to an external contact, `10` - Forward to an external number.  # noqa: E501

        :param busy_play_callee_voicemail_greeting: The busy_play_callee_voicemail_greeting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._busy_play_callee_voicemail_greeting = busy_play_callee_voicemail_greeting

    @property
    def phone_number(self):
        """Gets the phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The extension's phone number or forward to an external number, in [E.164 format](https://en.wikipedia.org/wiki/E.164) format. Required when `call_not_answer_action` action set to `10` - Forward to an external number.  # noqa: E501

        :return: The phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The extension's phone number or forward to an external number, in [E.164 format](https://en.wikipedia.org/wiki/E.164) format. Required when `call_not_answer_action` action set to `10` - Forward to an external number.  # noqa: E501

        :param phone_number: The phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._phone_number = phone_number

    @property
    def description(self):
        """Gets the description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        (optional) Forward to an external number description. Add when `call_not_answer_action` is set to `10` - Forward to an external number.  # noqa: E501

        :return: The description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        (optional) Forward to an external number description. Add when `call_not_answer_action` is set to `10` - Forward to an external number.  # noqa: E501

        :param description: The description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def busy_phone_number(self):
        """Gets the busy_phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The extension's phone number or Forward to an external number, in [E.164 format](https://en.wikipedia.org/wiki/E.164) format. Set when `busy_on_another_call_action` action set to `10` - Forward to an external number.  # noqa: E501

        :return: The busy_phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._busy_phone_number

    @busy_phone_number.setter
    def busy_phone_number(self, busy_phone_number):
        """Sets the busy_phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The extension's phone number or Forward to an external number, in [E.164 format](https://en.wikipedia.org/wiki/E.164) format. Set when `busy_on_another_call_action` action set to `10` - Forward to an external number.  # noqa: E501

        :param busy_phone_number: The busy_phone_number of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._busy_phone_number = busy_phone_number

    @property
    def busy_description(self):
        """Gets the busy_description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Forward to an external number description(optional). Set when `busy_on_another_call_action` action set to `10` - Forward to an external number.  # noqa: E501

        :return: The busy_description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._busy_description

    @busy_description.setter
    def busy_description(self, busy_description):
        """Sets the busy_description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Forward to an external number description(optional). Set when `busy_on_another_call_action` action set to `10` - Forward to an external number.  # noqa: E501

        :param busy_description: The busy_description of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._busy_description = busy_description

    @property
    def connect_to_operator(self):
        """Gets the connect_to_operator of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Whether to allow callers to reach an operator. Required only when the `call_not_answer_action` or `busy_on_another_call_action` is set to `1` (Forward to a voicemail).  # noqa: E501

        :return: The connect_to_operator of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._connect_to_operator

    @connect_to_operator.setter
    def connect_to_operator(self, connect_to_operator):
        """Sets the connect_to_operator of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Whether to allow callers to reach an operator. Required only when the `call_not_answer_action` or `busy_on_another_call_action` is set to `1` (Forward to a voicemail).  # noqa: E501

        :param connect_to_operator: The connect_to_operator of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._connect_to_operator = connect_to_operator

    @property
    def custom_hours_settings(self):
        """Gets the custom_hours_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The custom hours settings. This is only required for the `custom_hours` sub-setting.  # noqa: E501

        :return: The custom_hours_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CustomHoursSettings]
        """
        return self._custom_hours_settings

    @custom_hours_settings.setter
    def custom_hours_settings(self, custom_hours_settings):
        """Sets the custom_hours_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The custom hours settings. This is only required for the `custom_hours` sub-setting.  # noqa: E501

        :param custom_hours_settings: The custom_hours_settings of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: list[PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1CustomHoursSettings]
        """

        self._custom_hours_settings = custom_hours_settings

    @property
    def forward_to_extension_id(self):
        """Gets the forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The forwarding extension ID. Required only when call_not_answer_action setting is set to 2 - Forward to the user. 4 - Forward to the common area. 6 - Forward to the auto receptionist. 7 - Forward to a call queue. 8 - Forward to a shared line group. or 9 - forward to an external contact.  # noqa: E501

        :return: The forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._forward_to_extension_id

    @forward_to_extension_id.setter
    def forward_to_extension_id(self, forward_to_extension_id):
        """Sets the forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The forwarding extension ID. Required only when call_not_answer_action setting is set to 2 - Forward to the user. 4 - Forward to the common area. 6 - Forward to the auto receptionist. 7 - Forward to a call queue. 8 - Forward to a shared line group. or 9 - forward to an external contact.  # noqa: E501

        :param forward_to_extension_id: The forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._forward_to_extension_id = forward_to_extension_id

    @property
    def busy_forward_to_extension_id(self):
        """Gets the busy_forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The forwarding extension ID. Required only when busy_on_another_call_action setting is set to 2 - Forward to the user. 4 - Forward to the common area. 6 - Forward to the auto receptionist. 7 - Forward to a call queue. 8 - Forward to a shared line group. or 9 - forward to an external contact.  # noqa: E501

        :return: The busy_forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._busy_forward_to_extension_id

    @busy_forward_to_extension_id.setter
    def busy_forward_to_extension_id(self, busy_forward_to_extension_id):
        """Sets the busy_forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The forwarding extension ID. Required only when busy_on_another_call_action setting is set to 2 - Forward to the user. 4 - Forward to the common area. 6 - Forward to the auto receptionist. 7 - Forward to a call queue. 8 - Forward to a shared line group. or 9 - forward to an external contact.  # noqa: E501

        :param busy_forward_to_extension_id: The busy_forward_to_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._busy_forward_to_extension_id = busy_forward_to_extension_id

    @property
    def _from(self):
        """Gets the _from of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The holiday's start date and time, in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. This is only required for the `holiday` sub-setting.  # noqa: E501

        :return: The _from of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: datetime
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The holiday's start date and time, in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. This is only required for the `holiday` sub-setting.  # noqa: E501

        :param _from: The _from of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: datetime
        """

        self.__from = _from

    @property
    def greeting_prompt_id(self):
        """Gets the greeting_prompt_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The greeting audio prompt ID.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` or `Auto Receptionist` `call_handling` sub-setting.  # noqa: E501

        :return: The greeting_prompt_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._greeting_prompt_id

    @greeting_prompt_id.setter
    def greeting_prompt_id(self, greeting_prompt_id):
        """Sets the greeting_prompt_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The greeting audio prompt ID.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` or `Auto Receptionist` `call_handling` sub-setting.  # noqa: E501

        :param greeting_prompt_id: The greeting_prompt_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._greeting_prompt_id = greeting_prompt_id

    @property
    def holiday_id(self):
        """Gets the holiday_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The holiday's ID. This is only required for the `holiday` sub-setting.  # noqa: E501

        :return: The holiday_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._holiday_id

    @holiday_id.setter
    def holiday_id(self, holiday_id):
        """Sets the holiday_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The holiday's ID. This is only required for the `holiday` sub-setting.  # noqa: E501

        :param holiday_id: The holiday_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._holiday_id = holiday_id

    @property
    def max_call_in_queue(self):
        """Gets the max_call_in_queue of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The maximum number of calls in queue Specify the maximum number of callers to place in the queue. When this number is exceeded, callers will be routed based on the overflow option. Up to 60.  This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :return: The max_call_in_queue of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._max_call_in_queue

    @max_call_in_queue.setter
    def max_call_in_queue(self, max_call_in_queue):
        """Sets the max_call_in_queue of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The maximum number of calls in queue Specify the maximum number of callers to place in the queue. When this number is exceeded, callers will be routed based on the overflow option. Up to 60.  This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :param max_call_in_queue: The max_call_in_queue of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """

        self._max_call_in_queue = max_call_in_queue

    @property
    def max_wait_time(self):
        """Gets the max_wait_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The max wait time, in seconds, for `simultaneous` ring mode or the ring duration for each device for `sequential` ring mode:  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`   Specify how long a caller will wait in the queue. Once the wait time is exceeded, the caller will be rerouted based on the overflow option for `Call Queue`: * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`  * `120`  * `180`  * `240`  * `300`  * `600`  * `900`  * `1200`  * `1500`  * `1800`    This is only required for the `call_handling` sub-setting.  # noqa: E501

        :return: The max_wait_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._max_wait_time

    @max_wait_time.setter
    def max_wait_time(self, max_wait_time):
        """Sets the max_wait_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The max wait time, in seconds, for `simultaneous` ring mode or the ring duration for each device for `sequential` ring mode:  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`   Specify how long a caller will wait in the queue. Once the wait time is exceeded, the caller will be rerouted based on the overflow option for `Call Queue`: * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`  * `120`  * `180`  * `240`  * `300`  * `600`  * `900`  * `1200`  * `1500`  * `1800`    This is only required for the `call_handling` sub-setting.  # noqa: E501

        :param max_wait_time: The max_wait_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """
        allowed_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 120, 180, 240, 300, 600, 900, 1200, 1500, 1800]  # noqa: E501
        if max_wait_time not in allowed_values:
            raise ValueError(
                "Invalid value for `max_wait_time` ({0}), must be one of {1}"  # noqa: E501
                .format(max_wait_time, allowed_values)
            )

        self._max_wait_time = max_wait_time

    @property
    def music_on_hold_id(self):
        """Gets the music_on_hold_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The music on hold prompt ID. This is an option to choose music for inbound callers when they're placed on hold by a call queue member.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :return: The music_on_hold_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._music_on_hold_id

    @music_on_hold_id.setter
    def music_on_hold_id(self, music_on_hold_id):
        """Sets the music_on_hold_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The music on hold prompt ID. This is an option to choose music for inbound callers when they're placed on hold by a call queue member.   Options: empty char - default and `0` - disable   This is only required for the `Call Queue` `call_handling` sub-setting.  # noqa: E501

        :param music_on_hold_id: The music_on_hold_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._music_on_hold_id = music_on_hold_id

    @property
    def name(self):
        """Gets the name of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The name of the holiday. This is only required for the `holiday` sub-setting.  # noqa: E501

        :return: The name of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The name of the holiday. This is only required for the `holiday` sub-setting.  # noqa: E501

        :param name: The name of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def operator_extension_id(self):
        """Gets the operator_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The extension ID of the operator to whom the call is being forwarded. Required only when `call_not_answer_action` is set to `1` (Forward to a voicemail) and `connect_to_operator` is set to `true`.  # noqa: E501

        :return: The operator_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._operator_extension_id

    @operator_extension_id.setter
    def operator_extension_id(self, operator_extension_id):
        """Sets the operator_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The extension ID of the operator to whom the call is being forwarded. Required only when `call_not_answer_action` is set to `1` (Forward to a voicemail) and `connect_to_operator` is set to `true`.  # noqa: E501

        :param operator_extension_id: The operator_extension_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._operator_extension_id = operator_extension_id

    @property
    def receive_call(self):
        """Gets the receive_call of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        Receive calls while on a call. When enabled, call queue members can still receive new incoming calls notification even on the call.   This is only required for the `Call Queue call handling` sub-setting.  # noqa: E501

        :return: The receive_call of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._receive_call

    @receive_call.setter
    def receive_call(self, receive_call):
        """Sets the receive_call of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        Receive calls while on a call. When enabled, call queue members can still receive new incoming calls notification even on the call.   This is only required for the `Call Queue call handling` sub-setting.  # noqa: E501

        :param receive_call: The receive_call of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._receive_call = receive_call

    @property
    def require_press_1_before_connecting(self):
        """Gets the require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. Enable this option to ensure missed calls do not reach to your personal voicemail. This is only required for the `call_forwarding` sub-setting.  Press 1 is always enabled and is required for `callQueue` type extension calls.  # noqa: E501

        :return: The require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: bool
        """
        return self._require_press_1_before_connecting

    @require_press_1_before_connecting.setter
    def require_press_1_before_connecting(self, require_press_1_before_connecting):
        """Sets the require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        When a call is forwarded to a personal phone number, whether the user must press \"1\" before the call connects. Enable this option to ensure missed calls do not reach to your personal voicemail. This is only required for the `call_forwarding` sub-setting.  Press 1 is always enabled and is required for `callQueue` type extension calls.  # noqa: E501

        :param require_press_1_before_connecting: The require_press_1_before_connecting of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: bool
        """

        self._require_press_1_before_connecting = require_press_1_before_connecting

    @property
    def ring_mode(self):
        """Gets the ring_mode of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The call handling ring mode:  * `simultaneous`  * `sequential`. For user business hours, `ring_mode` need to be set with `max_wait_time`.  # noqa: E501

        :return: The ring_mode of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._ring_mode

    @ring_mode.setter
    def ring_mode(self, ring_mode):
        """Sets the ring_mode of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The call handling ring mode:  * `simultaneous`  * `sequential`. For user business hours, `ring_mode` need to be set with `max_wait_time`.  # noqa: E501

        :param ring_mode: The ring_mode of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """
        allowed_values = ["simultaneous", "sequential"]  # noqa: E501
        if ring_mode not in allowed_values:
            raise ValueError(
                "Invalid value for `ring_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(ring_mode, allowed_values)
            )

        self._ring_mode = ring_mode

    @property
    def to(self):
        """Gets the to of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The holiday's end date and time, in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. This is only required for the `holiday` sub-setting.  # noqa: E501

        :return: The to of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: datetime
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The holiday's end date and time, in `yyyy-MM-dd'T'HH:mm:ss'Z'` format. This is only required for the `holiday` sub-setting.  # noqa: E501

        :param to: The to of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: datetime
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The type of custom hours:  * `1` — 24 hours, 7 days a week.  * `2` — Custom hours.   This is only required for the `custom_hours` sub-setting.  # noqa: E501

        :return: The type of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The type of custom hours:  * `1` — 24 hours, 7 days a week.  * `2` — Custom hours.   This is only required for the `custom_hours` sub-setting.  # noqa: E501

        :param type: The type of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def voicemail_greeting_id(self):
        """Gets the voicemail_greeting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The voicemail greeting prompt ID. Required when `call_not_answer_action` or `busy_on_another_call_action` is set to `1` (Forward to a voicemail). Required only for `call_handling` subsettings of `Call Queue`, `Auto Receptionist` or `User`.  # noqa: E501

        :return: The voicemail_greeting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: str
        """
        return self._voicemail_greeting_id

    @voicemail_greeting_id.setter
    def voicemail_greeting_id(self, voicemail_greeting_id):
        """Sets the voicemail_greeting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The voicemail greeting prompt ID. Required when `call_not_answer_action` or `busy_on_another_call_action` is set to `1` (Forward to a voicemail). Required only for `call_handling` subsettings of `Call Queue`, `Auto Receptionist` or `User`.  # noqa: E501

        :param voicemail_greeting_id: The voicemail_greeting_id of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: str
        """

        self._voicemail_greeting_id = voicemail_greeting_id

    @property
    def wrap_up_time(self):
        """Gets the wrap_up_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501

        The wrap up time in seconds  Specify the duration before the next queue call is routed to a member in call queue: * `0`  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`  * `120`  * `180`  * `240`  * `300`  This is only required for the `call_handling` sub-setting.  # noqa: E501

        :return: The wrap_up_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :rtype: int
        """
        return self._wrap_up_time

    @wrap_up_time.setter
    def wrap_up_time(self, wrap_up_time):
        """Sets the wrap_up_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.

        The wrap up time in seconds  Specify the duration before the next queue call is routed to a member in call queue: * `0`  * `10`  * `15`  * `20`  * `25`  * `30`  * `35`  * `40`  * `45`  * `50`  * `55`  * `60`  * `120`  * `180`  * `240`  * `300`  This is only required for the `call_handling` sub-setting.  # noqa: E501

        :param wrap_up_time: The wrap_up_time of this PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1.  # noqa: E501
        :type: int
        """
        allowed_values = [10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 120, 180, 240, 300]  # noqa: E501
        if wrap_up_time not in allowed_values:
            raise ValueError(
                "Invalid value for `wrap_up_time` ({0}), must be one of {1}"  # noqa: E501
                .format(wrap_up_time, allowed_values)
            )

        self._wrap_up_time = wrap_up_time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneextensionextensionIdcallHandlingsettingssettingTypeSettings1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
