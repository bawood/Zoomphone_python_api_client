# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '_from': 'str',
        'to': 'str',
        'type': 'int',
        'weekday': 'int'
    }

    attribute_map = {
        '_from': 'from',
        'to': 'to',
        'type': 'type',
        'weekday': 'weekday'
    }

    def __init__(self, _from=None, to=None, type=None, weekday=None):  # noqa: E501
        """PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours - a model defined in Swagger"""  # noqa: E501
        self.__from = None
        self._to = None
        self._type = None
        self._weekday = None
        self.discriminator = None
        if _from is not None:
            self._from = _from
        if to is not None:
            self.to = to
        if type is not None:
            self.type = type
        if weekday is not None:
            self.weekday = weekday

    @property
    def _from(self):
        """Gets the _from of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501

        The start time for custom hours in `HH:mm` format.  # noqa: E501

        :return: The _from of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :rtype: str
        """
        return self.__from

    @_from.setter
    def _from(self, _from):
        """Sets the _from of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.

        The start time for custom hours in `HH:mm` format.  # noqa: E501

        :param _from: The _from of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :type: str
        """

        self.__from = _from

    @property
    def to(self):
        """Gets the to of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501

        The end time custom hours in `HH:mm` format.  # noqa: E501

        :return: The to of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :rtype: str
        """
        return self._to

    @to.setter
    def to(self, to):
        """Sets the to of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.

        The end time custom hours in `HH:mm` format.  # noqa: E501

        :param to: The to of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :type: str
        """

        self._to = to

    @property
    def type(self):
        """Gets the type of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501

        The type of custom hours:  * `0` — Disabled.  * `1` — 24 hours.  * `2` — Customized hours.  # noqa: E501

        :return: The type of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :rtype: int
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.

        The type of custom hours:  * `0` — Disabled.  * `1` — 24 hours.  * `2` — Customized hours.  # noqa: E501

        :param type: The type of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :type: int
        """
        allowed_values = [0, 1, 2]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def weekday(self):
        """Gets the weekday of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501

        The day of the week:  * `1` — Sunday  * `2` — Monday  * `3` — Tuesday  * `4` — Wednesday  * `5` — Thursday  * `6` — Friday  * `7` — Saturday  # noqa: E501

        :return: The weekday of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :rtype: int
        """
        return self._weekday

    @weekday.setter
    def weekday(self, weekday):
        """Sets the weekday of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.

        The day of the week:  * `1` — Sunday  * `2` — Monday  * `3` — Tuesday  * `4` — Wednesday  * `5` — Thursday  * `6` — Friday  * `7` — Saturday  # noqa: E501

        :param weekday: The weekday of this PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours.  # noqa: E501
        :type: int
        """
        allowed_values = [1, 2, 3, 4, 5, 6, 7]  # noqa: E501
        if weekday not in allowed_values:
            raise ValueError(
                "Invalid value for `weekday` ({0}), must be one of {1}"  # noqa: E501
                .format(weekday, allowed_values)
            )

        self._weekday = weekday

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonesitessiteIdsettingssettingTypeBusinessHoursCustomHours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
