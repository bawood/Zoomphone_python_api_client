# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number': 'int',
        'unit': 'str'
    }

    attribute_map = {
        'number': 'number',
        'unit': 'unit'
    }

    def __init__(self, number=None, unit='hours'):  # noqa: E501
        """PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout - a model defined in Swagger"""  # noqa: E501
        self._number = None
        self._unit = None
        self.discriminator = None
        self.number = number
        if unit is not None:
            self.unit = unit

    @property
    def number(self):
        """Gets the number of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501


        :return: The number of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.


        :param number: The number of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501
        :type: int
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501
        allowed_values = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 30]  # noqa: E501
        if number not in allowed_values:
            raise ValueError(
                "Invalid value for `number` ({0}), must be one of {1}"  # noqa: E501
                .format(number, allowed_values)
            )

        self._number = number

    @property
    def unit(self):
        """Gets the unit of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501

        `minutes` - available if the `number` values are: '5, 10, 15, 30'   `hours` - not available if the `number` value is '30'  # noqa: E501

        :return: The unit of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501
        :rtype: str
        """
        return self._unit

    @unit.setter
    def unit(self, unit):
        """Sets the unit of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.

        `minutes` - available if the `number` values are: '5, 10, 15, 30'   `hours` - not available if the `number` value is '30'  # noqa: E501

        :param unit: The unit of this PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout.  # noqa: E501
        :type: str
        """
        allowed_values = ["minutes", "hours"]  # noqa: E501
        if unit not in allowed_values:
            raise ValueError(
                "Invalid value for `unit` ({0}), must be one of {1}"  # noqa: E501
                .format(unit, allowed_values)
            )

        self._unit = unit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhonesitessiteIdsettingssettingTypeDeskPhoneHotDeskingSessionTimeout):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
