# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneusersbatchDeskPhones(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'brand': 'str',
        'model': 'str',
        'mac': 'str',
        'provision_template': 'str'
    }

    attribute_map = {
        'brand': 'brand',
        'model': 'model',
        'mac': 'mac',
        'provision_template': 'provision_template'
    }

    def __init__(self, brand=None, model=None, mac=None, provision_template=None):  # noqa: E501
        """PhoneusersbatchDeskPhones - a model defined in Swagger"""  # noqa: E501
        self._brand = None
        self._model = None
        self._mac = None
        self._provision_template = None
        self.discriminator = None
        if brand is not None:
            self.brand = brand
        if model is not None:
            self.model = model
        if mac is not None:
            self.mac = mac
        if provision_template is not None:
            self.provision_template = provision_template

    @property
    def brand(self):
        """Gets the brand of this PhoneusersbatchDeskPhones.  # noqa: E501

        The manufacturer (brand) name of the device.  # noqa: E501

        :return: The brand of this PhoneusersbatchDeskPhones.  # noqa: E501
        :rtype: str
        """
        return self._brand

    @brand.setter
    def brand(self, brand):
        """Sets the brand of this PhoneusersbatchDeskPhones.

        The manufacturer (brand) name of the device.  # noqa: E501

        :param brand: The brand of this PhoneusersbatchDeskPhones.  # noqa: E501
        :type: str
        """

        self._brand = brand

    @property
    def model(self):
        """Gets the model of this PhoneusersbatchDeskPhones.  # noqa: E501

        The model name of the device.  # noqa: E501

        :return: The model of this PhoneusersbatchDeskPhones.  # noqa: E501
        :rtype: str
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this PhoneusersbatchDeskPhones.

        The model name of the device.  # noqa: E501

        :param model: The model of this PhoneusersbatchDeskPhones.  # noqa: E501
        :type: str
        """

        self._model = model

    @property
    def mac(self):
        """Gets the mac of this PhoneusersbatchDeskPhones.  # noqa: E501

        The MAC address of the desk phone.  # noqa: E501

        :return: The mac of this PhoneusersbatchDeskPhones.  # noqa: E501
        :rtype: str
        """
        return self._mac

    @mac.setter
    def mac(self, mac):
        """Sets the mac of this PhoneusersbatchDeskPhones.

        The MAC address of the desk phone.  # noqa: E501

        :param mac: The mac of this PhoneusersbatchDeskPhones.  # noqa: E501
        :type: str
        """

        self._mac = mac

    @property
    def provision_template(self):
        """Gets the provision_template of this PhoneusersbatchDeskPhones.  # noqa: E501

        The provision template name. Supported by select devices.  # noqa: E501

        :return: The provision_template of this PhoneusersbatchDeskPhones.  # noqa: E501
        :rtype: str
        """
        return self._provision_template

    @provision_template.setter
    def provision_template(self, provision_template):
        """Sets the provision_template of this PhoneusersbatchDeskPhones.

        The provision template name. Supported by select devices.  # noqa: E501

        :param provision_template: The provision_template of this PhoneusersbatchDeskPhones.  # noqa: E501
        :type: str
        """

        self._provision_template = provision_template

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneusersbatchDeskPhones, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneusersbatchDeskPhones):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
