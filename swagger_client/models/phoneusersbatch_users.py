# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PhoneusersbatchUsers(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'email': 'str',
        'first_name': 'str',
        'last_name': 'str',
        'calling_plans': 'list[str]',
        'site_code': 'str',
        'site_name': 'str',
        'template_name': 'str',
        'extension_number': 'str',
        'phone_numbers': 'list[str]',
        'outbound_caller_id': 'str',
        'select_outbound_caller_id': 'bool',
        'sms': 'bool',
        'desk_phones': 'list[PhoneusersbatchDeskPhones]'
    }

    attribute_map = {
        'email': 'email',
        'first_name': 'first_name',
        'last_name': 'last_name',
        'calling_plans': 'calling_plans',
        'site_code': 'site_code',
        'site_name': 'site_name',
        'template_name': 'template_name',
        'extension_number': 'extension_number',
        'phone_numbers': 'phone_numbers',
        'outbound_caller_id': 'outbound_caller_id',
        'select_outbound_caller_id': 'select_outbound_caller_id',
        'sms': 'sms',
        'desk_phones': 'desk_phones'
    }

    def __init__(self, email=None, first_name=None, last_name=None, calling_plans=None, site_code=None, site_name=None, template_name=None, extension_number=None, phone_numbers=None, outbound_caller_id=None, select_outbound_caller_id=None, sms=None, desk_phones=None):  # noqa: E501
        """PhoneusersbatchUsers - a model defined in Swagger"""  # noqa: E501
        self._email = None
        self._first_name = None
        self._last_name = None
        self._calling_plans = None
        self._site_code = None
        self._site_name = None
        self._template_name = None
        self._extension_number = None
        self._phone_numbers = None
        self._outbound_caller_id = None
        self._select_outbound_caller_id = None
        self._sms = None
        self._desk_phones = None
        self.discriminator = None
        self.email = email
        if first_name is not None:
            self.first_name = first_name
        if last_name is not None:
            self.last_name = last_name
        self.calling_plans = calling_plans
        if site_code is not None:
            self.site_code = site_code
        if site_name is not None:
            self.site_name = site_name
        if template_name is not None:
            self.template_name = template_name
        self.extension_number = extension_number
        if phone_numbers is not None:
            self.phone_numbers = phone_numbers
        if outbound_caller_id is not None:
            self.outbound_caller_id = outbound_caller_id
        if select_outbound_caller_id is not None:
            self.select_outbound_caller_id = select_outbound_caller_id
        if sms is not None:
            self.sms = sms
        if desk_phones is not None:
            self.desk_phones = desk_phones

    @property
    def email(self):
        """Gets the email of this PhoneusersbatchUsers.  # noqa: E501

        The user email. It ensures the users are active in your Zoom account.  # noqa: E501

        :return: The email of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this PhoneusersbatchUsers.

        The user email. It ensures the users are active in your Zoom account.  # noqa: E501

        :param email: The email of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """
        if email is None:
            raise ValueError("Invalid value for `email`, must not be `None`")  # noqa: E501

        self._email = email

    @property
    def first_name(self):
        """Gets the first_name of this PhoneusersbatchUsers.  # noqa: E501

        The user's first name. It ensures the users are active in your Zoom account.  # noqa: E501

        :return: The first_name of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._first_name

    @first_name.setter
    def first_name(self, first_name):
        """Sets the first_name of this PhoneusersbatchUsers.

        The user's first name. It ensures the users are active in your Zoom account.  # noqa: E501

        :param first_name: The first_name of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._first_name = first_name

    @property
    def last_name(self):
        """Gets the last_name of this PhoneusersbatchUsers.  # noqa: E501

        The user's last name. It ensures the users are active in your Zoom account.  # noqa: E501

        :return: The last_name of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._last_name

    @last_name.setter
    def last_name(self, last_name):
        """Sets the last_name of this PhoneusersbatchUsers.

        The user's last name. It ensures the users are active in your Zoom account.  # noqa: E501

        :param last_name: The last_name of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._last_name = last_name

    @property
    def calling_plans(self):
        """Gets the calling_plans of this PhoneusersbatchUsers.  # noqa: E501

        The calling plan. <br> * Type \"AU/NZ Metered\" if the assigned package is \"Australia/New Zealand Metered Calling Plan\".<br> * Type \"AU/NZ Unlimited\" if the assigned package is \"Australia/New Zealand Unlimited Calling Plan\".<br> * Type \"UK/Ireland Metered\" if the assigned package is \"United Kingdom/Ireland Metered Calling Plan\".<br> * Type \"UK/Ireland Unlimited\" if the assigned package is \"United Kingdom/Ireland Unlimited Calling Plan\".<br> * Type \"US/CA Metered\" if the assigned package is \"United States/Canada Metered Calling Plan\".<br> * Type \"US/CA Unlimited\" if the assigned package is \"United States/Canada Unlimited Calling Plan\".<br> * Type \"Europe Zone A Metered\" if the assigned package is \"Europe Zone A Metered Calling Plan\".<br> * Type \"Europe Zone A Unlimited\" if the assigned package is \"Europe Zone A Unlimited Calling Plan\".<br> * Type \"Europe Zone B Metered\" if the assigned package is \"Europe Zone B Metered Calling Plan\".<br> * Type \"Europe Zone B Unlimited\" if the assigned package is \"Europe Zone B Unlimited Calling Plan\".<br> * Type \"JP Metered\" if the assigned package is \"Japan Metered Calling Plan\".<br> * Type \"JP Unlimited\" if the assigned package is \"Japan Unlimited Calling Plan\".<br> * Type \"IN Metered\" if the assigned package is \"India Metered Calling Plan\".<br> * Type \"IN Unlimited\" if the assigned package is \"India Unlimited Calling Plan\".<br> * Type \"IN Pro\" if the assigned package is \"Zoom Phone India Pro\".<br> * Type \"IN International Calling Add-On\" if the assigned package is \"India International Calling Add-On\".<br> * Type \"Global Select Metered\" if the assigned package is \"Global Select Metered Calling Plan\".<br> * Type \"Global Select\" if the assigned package is \"Global Select Calling Plan\".<br> * Type \"International Calling Add-On\" if the assigned package is \"International Calling Add-On\".<br> * Type \"Beta\" if the assigned package is \"Beta Calling Plan\".<br> * Type \"Pro\" if the assigned package is \"Zoom Phone Pro\".<br> * Type \"Power Pack\" if the assigned package is \"Zoom Phone Power Pack\". Leave this section blank if no package has been assigned.  # noqa: E501

        :return: The calling_plans of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: list[str]
        """
        return self._calling_plans

    @calling_plans.setter
    def calling_plans(self, calling_plans):
        """Sets the calling_plans of this PhoneusersbatchUsers.

        The calling plan. <br> * Type \"AU/NZ Metered\" if the assigned package is \"Australia/New Zealand Metered Calling Plan\".<br> * Type \"AU/NZ Unlimited\" if the assigned package is \"Australia/New Zealand Unlimited Calling Plan\".<br> * Type \"UK/Ireland Metered\" if the assigned package is \"United Kingdom/Ireland Metered Calling Plan\".<br> * Type \"UK/Ireland Unlimited\" if the assigned package is \"United Kingdom/Ireland Unlimited Calling Plan\".<br> * Type \"US/CA Metered\" if the assigned package is \"United States/Canada Metered Calling Plan\".<br> * Type \"US/CA Unlimited\" if the assigned package is \"United States/Canada Unlimited Calling Plan\".<br> * Type \"Europe Zone A Metered\" if the assigned package is \"Europe Zone A Metered Calling Plan\".<br> * Type \"Europe Zone A Unlimited\" if the assigned package is \"Europe Zone A Unlimited Calling Plan\".<br> * Type \"Europe Zone B Metered\" if the assigned package is \"Europe Zone B Metered Calling Plan\".<br> * Type \"Europe Zone B Unlimited\" if the assigned package is \"Europe Zone B Unlimited Calling Plan\".<br> * Type \"JP Metered\" if the assigned package is \"Japan Metered Calling Plan\".<br> * Type \"JP Unlimited\" if the assigned package is \"Japan Unlimited Calling Plan\".<br> * Type \"IN Metered\" if the assigned package is \"India Metered Calling Plan\".<br> * Type \"IN Unlimited\" if the assigned package is \"India Unlimited Calling Plan\".<br> * Type \"IN Pro\" if the assigned package is \"Zoom Phone India Pro\".<br> * Type \"IN International Calling Add-On\" if the assigned package is \"India International Calling Add-On\".<br> * Type \"Global Select Metered\" if the assigned package is \"Global Select Metered Calling Plan\".<br> * Type \"Global Select\" if the assigned package is \"Global Select Calling Plan\".<br> * Type \"International Calling Add-On\" if the assigned package is \"International Calling Add-On\".<br> * Type \"Beta\" if the assigned package is \"Beta Calling Plan\".<br> * Type \"Pro\" if the assigned package is \"Zoom Phone Pro\".<br> * Type \"Power Pack\" if the assigned package is \"Zoom Phone Power Pack\". Leave this section blank if no package has been assigned.  # noqa: E501

        :param calling_plans: The calling_plans of this PhoneusersbatchUsers.  # noqa: E501
        :type: list[str]
        """
        if calling_plans is None:
            raise ValueError("Invalid value for `calling_plans`, must not be `None`")  # noqa: E501

        self._calling_plans = calling_plans

    @property
    def site_code(self):
        """Gets the site_code of this PhoneusersbatchUsers.  # noqa: E501

        The site code. It's required if the site name is not provided or if Indian plans are assigned.  # noqa: E501

        :return: The site_code of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._site_code

    @site_code.setter
    def site_code(self, site_code):
        """Sets the site_code of this PhoneusersbatchUsers.

        The site code. It's required if the site name is not provided or if Indian plans are assigned.  # noqa: E501

        :param site_code: The site_code of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._site_code = site_code

    @property
    def site_name(self):
        """Gets the site_name of this PhoneusersbatchUsers.  # noqa: E501

        The site name. It's required if the site code is not provided or if Indian plans are assigned.  # noqa: E501

        :return: The site_name of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._site_name

    @site_name.setter
    def site_name(self, site_name):
        """Sets the site_name of this PhoneusersbatchUsers.

        The site name. It's required if the site code is not provided or if Indian plans are assigned.  # noqa: E501

        :param site_name: The site_name of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._site_name = site_name

    @property
    def template_name(self):
        """Gets the template_name of this PhoneusersbatchUsers.  # noqa: E501

        The template name. Configure the user setting according to the specified template. The template must belong to the same site as the user.  # noqa: E501

        :return: The template_name of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._template_name

    @template_name.setter
    def template_name(self, template_name):
        """Sets the template_name of this PhoneusersbatchUsers.

        The template name. Configure the user setting according to the specified template. The template must belong to the same site as the user.  # noqa: E501

        :param template_name: The template_name of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._template_name = template_name

    @property
    def extension_number(self):
        """Gets the extension_number of this PhoneusersbatchUsers.  # noqa: E501

        The extension number. Do not include the site code in an extension number if the site code is enabled.  # noqa: E501

        :return: The extension_number of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._extension_number

    @extension_number.setter
    def extension_number(self, extension_number):
        """Sets the extension_number of this PhoneusersbatchUsers.

        The extension number. Do not include the site code in an extension number if the site code is enabled.  # noqa: E501

        :param extension_number: The extension_number of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """
        if extension_number is None:
            raise ValueError("Invalid value for `extension_number`, must not be `None`")  # noqa: E501

        self._extension_number = extension_number

    @property
    def phone_numbers(self):
        """Gets the phone_numbers of this PhoneusersbatchUsers.  # noqa: E501

        The phone numbers in E164 format. Separate multiple phone number entries with commas. Make sure that these numbers have been ported to your account as unassigned phone numbers.  # noqa: E501

        :return: The phone_numbers of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: list[str]
        """
        return self._phone_numbers

    @phone_numbers.setter
    def phone_numbers(self, phone_numbers):
        """Sets the phone_numbers of this PhoneusersbatchUsers.

        The phone numbers in E164 format. Separate multiple phone number entries with commas. Make sure that these numbers have been ported to your account as unassigned phone numbers.  # noqa: E501

        :param phone_numbers: The phone_numbers of this PhoneusersbatchUsers.  # noqa: E501
        :type: list[str]
        """

        self._phone_numbers = phone_numbers

    @property
    def outbound_caller_id(self):
        """Gets the outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501

        The outbound caller ID. Hides the caller ID if left blank. You can set an extension's phone number or any company number as the outbound caller ID.  # noqa: E501

        :return: The outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: str
        """
        return self._outbound_caller_id

    @outbound_caller_id.setter
    def outbound_caller_id(self, outbound_caller_id):
        """Sets the outbound_caller_id of this PhoneusersbatchUsers.

        The outbound caller ID. Hides the caller ID if left blank. You can set an extension's phone number or any company number as the outbound caller ID.  # noqa: E501

        :param outbound_caller_id: The outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501
        :type: str
        """

        self._outbound_caller_id = outbound_caller_id

    @property
    def select_outbound_caller_id(self):
        """Gets the select_outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501

        Whether to allow this extension to change the outbound caller ID when placing calls.  # noqa: E501

        :return: The select_outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: bool
        """
        return self._select_outbound_caller_id

    @select_outbound_caller_id.setter
    def select_outbound_caller_id(self, select_outbound_caller_id):
        """Sets the select_outbound_caller_id of this PhoneusersbatchUsers.

        Whether to allow this extension to change the outbound caller ID when placing calls.  # noqa: E501

        :param select_outbound_caller_id: The select_outbound_caller_id of this PhoneusersbatchUsers.  # noqa: E501
        :type: bool
        """

        self._select_outbound_caller_id = select_outbound_caller_id

    @property
    def sms(self):
        """Gets the sms of this PhoneusersbatchUsers.  # noqa: E501

        Whether to enable SMS for this user.  # noqa: E501

        :return: The sms of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: bool
        """
        return self._sms

    @sms.setter
    def sms(self, sms):
        """Sets the sms of this PhoneusersbatchUsers.

        Whether to enable SMS for this user.  # noqa: E501

        :param sms: The sms of this PhoneusersbatchUsers.  # noqa: E501
        :type: bool
        """

        self._sms = sms

    @property
    def desk_phones(self):
        """Gets the desk_phones of this PhoneusersbatchUsers.  # noqa: E501

        Required: brand, model, and MAC address of each desk phone.  Optional: provision template. Skips the provision template not supported by the device. For more information, see [supported devices](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices).  Each user can be assigned up to 3 desk phones.  All users must belong to the same site if a desk phone is assigned to multiple users.  # noqa: E501

        :return: The desk_phones of this PhoneusersbatchUsers.  # noqa: E501
        :rtype: list[PhoneusersbatchDeskPhones]
        """
        return self._desk_phones

    @desk_phones.setter
    def desk_phones(self, desk_phones):
        """Sets the desk_phones of this PhoneusersbatchUsers.

        Required: brand, model, and MAC address of each desk phone.  Optional: provision template. Skips the provision template not supported by the device. For more information, see [supported devices](https://support.zoom.us/hc/en-us/articles/360001299063-Zoom-Voice-Supported-Devices).  Each user can be assigned up to 3 desk phones.  All users must belong to the same site if a desk phone is assigned to multiple users.  # noqa: E501

        :param desk_phones: The desk_phones of this PhoneusersbatchUsers.  # noqa: E501
        :type: list[PhoneusersbatchDeskPhones]
        """

        self._desk_phones = desk_phones

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PhoneusersbatchUsers, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PhoneusersbatchUsers):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
