# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RoleIdMembersBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role_id': 'str',
        'copy_targets': 'bool',
        'copy_all_members': 'bool',
        'user_ids': 'list[str]'
    }

    attribute_map = {
        'role_id': 'role_id',
        'copy_targets': 'copy_targets',
        'copy_all_members': 'copy_all_members',
        'user_ids': 'user_ids'
    }

    def __init__(self, role_id=None, copy_targets=False, copy_all_members=False, user_ids=None):  # noqa: E501
        """RoleIdMembersBody - a model defined in Swagger"""  # noqa: E501
        self._role_id = None
        self._copy_targets = None
        self._copy_all_members = None
        self._user_ids = None
        self.discriminator = None
        if role_id is not None:
            self.role_id = role_id
        if copy_targets is not None:
            self.copy_targets = copy_targets
        if copy_all_members is not None:
            self.copy_all_members = copy_all_members
        if user_ids is not None:
            self.user_ids = user_ids

    @property
    def role_id(self):
        """Gets the role_id of this RoleIdMembersBody.  # noqa: E501

        Unique identifier of the existing [role](https://support.zoom.us/hc/en-us/articles/360042099012-Using-Zoom-Phone-role-management) assigned to the user: used when copying members' role.  # noqa: E501

        :return: The role_id of this RoleIdMembersBody.  # noqa: E501
        :rtype: str
        """
        return self._role_id

    @role_id.setter
    def role_id(self, role_id):
        """Sets the role_id of this RoleIdMembersBody.

        Unique identifier of the existing [role](https://support.zoom.us/hc/en-us/articles/360042099012-Using-Zoom-Phone-role-management) assigned to the user: used when copying members' role.  # noqa: E501

        :param role_id: The role_id of this RoleIdMembersBody.  # noqa: E501
        :type: str
        """

        self._role_id = role_id

    @property
    def copy_targets(self):
        """Gets the copy_targets of this RoleIdMembersBody.  # noqa: E501

        Whether to copy the target: used when copying members' role.  # noqa: E501

        :return: The copy_targets of this RoleIdMembersBody.  # noqa: E501
        :rtype: bool
        """
        return self._copy_targets

    @copy_targets.setter
    def copy_targets(self, copy_targets):
        """Sets the copy_targets of this RoleIdMembersBody.

        Whether to copy the target: used when copying members' role.  # noqa: E501

        :param copy_targets: The copy_targets of this RoleIdMembersBody.  # noqa: E501
        :type: bool
        """

        self._copy_targets = copy_targets

    @property
    def copy_all_members(self):
        """Gets the copy_all_members of this RoleIdMembersBody.  # noqa: E501

        Whether to copy all members with the role: used when copying members' role.  # noqa: E501

        :return: The copy_all_members of this RoleIdMembersBody.  # noqa: E501
        :rtype: bool
        """
        return self._copy_all_members

    @copy_all_members.setter
    def copy_all_members(self, copy_all_members):
        """Sets the copy_all_members of this RoleIdMembersBody.

        Whether to copy all members with the role: used when copying members' role.  # noqa: E501

        :param copy_all_members: The copy_all_members of this RoleIdMembersBody.  # noqa: E501
        :type: bool
        """

        self._copy_all_members = copy_all_members

    @property
    def user_ids(self):
        """Gets the user_ids of this RoleIdMembersBody.  # noqa: E501

        The user IDs.  # noqa: E501

        :return: The user_ids of this RoleIdMembersBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._user_ids

    @user_ids.setter
    def user_ids(self, user_ids):
        """Sets the user_ids of this RoleIdMembersBody.

        The user IDs.  # noqa: E501

        :param user_ids: The user_ids of this RoleIdMembersBody.  # noqa: E501
        :type: list[str]
        """

        self._user_ids = user_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RoleIdMembersBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RoleIdMembersBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
