# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SitesSiteIdBody1(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'site_code': 'int',
        'short_extension': 'PhonesitessiteIdShortExtension',
        'default_emergency_address': 'PhonesitessiteIdDefaultEmergencyAddress',
        'sip_zone': 'PhonesitessiteIdSipZone',
        'caller_id_name': 'str',
        'policy': 'PhonesitessiteIdPolicy'
    }

    attribute_map = {
        'name': 'name',
        'site_code': 'site_code',
        'short_extension': 'short_extension',
        'default_emergency_address': 'default_emergency_address',
        'sip_zone': 'sip_zone',
        'caller_id_name': 'caller_id_name',
        'policy': 'policy'
    }

    def __init__(self, name=None, site_code=None, short_extension=None, default_emergency_address=None, sip_zone=None, caller_id_name=None, policy=None):  # noqa: E501
        """SitesSiteIdBody1 - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._site_code = None
        self._short_extension = None
        self._default_emergency_address = None
        self._sip_zone = None
        self._caller_id_name = None
        self._policy = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if site_code is not None:
            self.site_code = site_code
        if short_extension is not None:
            self.short_extension = short_extension
        if default_emergency_address is not None:
            self.default_emergency_address = default_emergency_address
        if sip_zone is not None:
            self.sip_zone = sip_zone
        if caller_id_name is not None:
            self.caller_id_name = caller_id_name
        if policy is not None:
            self.policy = policy

    @property
    def name(self):
        """Gets the name of this SitesSiteIdBody1.  # noqa: E501

        The name of the site.  # noqa: E501

        :return: The name of this SitesSiteIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this SitesSiteIdBody1.

        The name of the site.  # noqa: E501

        :param name: The name of this SitesSiteIdBody1.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def site_code(self):
        """Gets the site_code of this SitesSiteIdBody1.  # noqa: E501

        [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b).  # noqa: E501

        :return: The site_code of this SitesSiteIdBody1.  # noqa: E501
        :rtype: int
        """
        return self._site_code

    @site_code.setter
    def site_code(self, site_code):
        """Sets the site_code of this SitesSiteIdBody1.

        [Site Code](https://support.zoom.us/hc/en-us/articles/360020809672-Managing-Multiple-Sites#h_79ca9c8f-c97b-4486-aa59-d0d9d31a525b).  # noqa: E501

        :param site_code: The site_code of this SitesSiteIdBody1.  # noqa: E501
        :type: int
        """

        self._site_code = site_code

    @property
    def short_extension(self):
        """Gets the short_extension of this SitesSiteIdBody1.  # noqa: E501


        :return: The short_extension of this SitesSiteIdBody1.  # noqa: E501
        :rtype: PhonesitessiteIdShortExtension
        """
        return self._short_extension

    @short_extension.setter
    def short_extension(self, short_extension):
        """Sets the short_extension of this SitesSiteIdBody1.


        :param short_extension: The short_extension of this SitesSiteIdBody1.  # noqa: E501
        :type: PhonesitessiteIdShortExtension
        """

        self._short_extension = short_extension

    @property
    def default_emergency_address(self):
        """Gets the default_emergency_address of this SitesSiteIdBody1.  # noqa: E501


        :return: The default_emergency_address of this SitesSiteIdBody1.  # noqa: E501
        :rtype: PhonesitessiteIdDefaultEmergencyAddress
        """
        return self._default_emergency_address

    @default_emergency_address.setter
    def default_emergency_address(self, default_emergency_address):
        """Sets the default_emergency_address of this SitesSiteIdBody1.


        :param default_emergency_address: The default_emergency_address of this SitesSiteIdBody1.  # noqa: E501
        :type: PhonesitessiteIdDefaultEmergencyAddress
        """

        self._default_emergency_address = default_emergency_address

    @property
    def sip_zone(self):
        """Gets the sip_zone of this SitesSiteIdBody1.  # noqa: E501


        :return: The sip_zone of this SitesSiteIdBody1.  # noqa: E501
        :rtype: PhonesitessiteIdSipZone
        """
        return self._sip_zone

    @sip_zone.setter
    def sip_zone(self, sip_zone):
        """Sets the sip_zone of this SitesSiteIdBody1.


        :param sip_zone: The sip_zone of this SitesSiteIdBody1.  # noqa: E501
        :type: PhonesitessiteIdSipZone
        """

        self._sip_zone = sip_zone

    @property
    def caller_id_name(self):
        """Gets the caller_id_name of this SitesSiteIdBody1.  # noqa: E501

        When an outbound call is placed using a number as the caller ID, the caller ID name and the number display to the called party. The caller ID name can be up to 15 characters. The user can reset caller ID name by setting it to \"\"  # noqa: E501

        :return: The caller_id_name of this SitesSiteIdBody1.  # noqa: E501
        :rtype: str
        """
        return self._caller_id_name

    @caller_id_name.setter
    def caller_id_name(self, caller_id_name):
        """Sets the caller_id_name of this SitesSiteIdBody1.

        When an outbound call is placed using a number as the caller ID, the caller ID name and the number display to the called party. The caller ID name can be up to 15 characters. The user can reset caller ID name by setting it to \"\"  # noqa: E501

        :param caller_id_name: The caller_id_name of this SitesSiteIdBody1.  # noqa: E501
        :type: str
        """

        self._caller_id_name = caller_id_name

    @property
    def policy(self):
        """Gets the policy of this SitesSiteIdBody1.  # noqa: E501


        :return: The policy of this SitesSiteIdBody1.  # noqa: E501
        :rtype: PhonesitessiteIdPolicy
        """
        return self._policy

    @policy.setter
    def policy(self, policy):
        """Sets the policy of this SitesSiteIdBody1.


        :param policy: The policy of this SitesSiteIdBody1.  # noqa: E501
        :type: PhonesitessiteIdPolicy
        """

        self._policy = policy

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SitesSiteIdBody1, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SitesSiteIdBody1):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
