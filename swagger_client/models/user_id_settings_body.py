# coding: utf-8

"""
    Zoom Phone API

    The Zoom Phone API allows developers to access information from Zoom. You can use this API to build private services or public applications on the [Zoom App Marketplace](http://marketplace.zoom.us). To learn how to get your credentials and create private/public applications, read our [OAuth](https://developers.zoom.us/docs/integrations/oauth/) documentation. All endpoints are available via `https` and are located at `api.zoom.us/v2/`.  For instance, you can list all users on an account via `https://api.zoom.us/v2/users/`.  **Note**: You will get `403` response `Zoom Phone has not been enabled for this account` if the phone account is not set up.  # noqa: E501

    OpenAPI spec version: 2.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UserIdSettingsBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'area_code': 'str',
        'audio_prompt_language': 'str',
        'country_iso_code': 'str',
        'music_on_hold_id': 'str',
        'outbound_caller_id': 'str'
    }

    attribute_map = {
        'area_code': 'area_code',
        'audio_prompt_language': 'audio_prompt_language',
        'country_iso_code': 'country_iso_code',
        'music_on_hold_id': 'music_on_hold_id',
        'outbound_caller_id': 'outbound_caller_id'
    }

    def __init__(self, area_code=None, audio_prompt_language=None, country_iso_code=None, music_on_hold_id=None, outbound_caller_id=None):  # noqa: E501
        """UserIdSettingsBody - a model defined in Swagger"""  # noqa: E501
        self._area_code = None
        self._audio_prompt_language = None
        self._country_iso_code = None
        self._music_on_hold_id = None
        self._outbound_caller_id = None
        self.discriminator = None
        if area_code is not None:
            self.area_code = area_code
        if audio_prompt_language is not None:
            self.audio_prompt_language = audio_prompt_language
        if country_iso_code is not None:
            self.country_iso_code = country_iso_code
        if music_on_hold_id is not None:
            self.music_on_hold_id = music_on_hold_id
        if outbound_caller_id is not None:
            self.outbound_caller_id = outbound_caller_id

    @property
    def area_code(self):
        """Gets the area_code of this UserIdSettingsBody.  # noqa: E501

        The user's area code.  # noqa: E501

        :return: The area_code of this UserIdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this UserIdSettingsBody.

        The user's area code.  # noqa: E501

        :param area_code: The area_code of this UserIdSettingsBody.  # noqa: E501
        :type: str
        """

        self._area_code = area_code

    @property
    def audio_prompt_language(self):
        """Gets the audio_prompt_language of this UserIdSettingsBody.  # noqa: E501

        This audio prompt language code.<br> American English: `en-US`<br> British English: `en-GB`<br> Español americano: `es-US`<br> Français canadien: `fr-CA`<br> Dansk: `da-DK`<br> Deutsch: `de-DE`<br> Español: `es-ES`<br> Français: `fr-FR`<br> Italiano: `it-IT`<br> Nederlands: `nl-NL`<br> Portugues portugal: `pt-PT`<br> Japanese: `ja-JP`<br> Korean: `ko-KO`<br> Portugues brasil: `pt-BR`<br> Chinese: `zh-CN`<br> Taiwanese: `zh-TW`<br>  # noqa: E501

        :return: The audio_prompt_language of this UserIdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._audio_prompt_language

    @audio_prompt_language.setter
    def audio_prompt_language(self, audio_prompt_language):
        """Sets the audio_prompt_language of this UserIdSettingsBody.

        This audio prompt language code.<br> American English: `en-US`<br> British English: `en-GB`<br> Español americano: `es-US`<br> Français canadien: `fr-CA`<br> Dansk: `da-DK`<br> Deutsch: `de-DE`<br> Español: `es-ES`<br> Français: `fr-FR`<br> Italiano: `it-IT`<br> Nederlands: `nl-NL`<br> Portugues portugal: `pt-PT`<br> Japanese: `ja-JP`<br> Korean: `ko-KO`<br> Portugues brasil: `pt-BR`<br> Chinese: `zh-CN`<br> Taiwanese: `zh-TW`<br>  # noqa: E501

        :param audio_prompt_language: The audio_prompt_language of this UserIdSettingsBody.  # noqa: E501
        :type: str
        """

        self._audio_prompt_language = audio_prompt_language

    @property
    def country_iso_code(self):
        """Gets the country_iso_code of this UserIdSettingsBody.  # noqa: E501

        The [country ISO code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).  # noqa: E501

        :return: The country_iso_code of this UserIdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._country_iso_code

    @country_iso_code.setter
    def country_iso_code(self, country_iso_code):
        """Sets the country_iso_code of this UserIdSettingsBody.

        The [country ISO code](https://marketplace.zoom.us/docs/api-reference/other-references/abbreviation-lists#countries).  # noqa: E501

        :param country_iso_code: The country_iso_code of this UserIdSettingsBody.  # noqa: E501
        :type: str
        """

        self._country_iso_code = country_iso_code

    @property
    def music_on_hold_id(self):
        """Gets the music_on_hold_id of this UserIdSettingsBody.  # noqa: E501

        The music on hold prompt ID.   Options: empty char - default and `0` - disable  # noqa: E501

        :return: The music_on_hold_id of this UserIdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._music_on_hold_id

    @music_on_hold_id.setter
    def music_on_hold_id(self, music_on_hold_id):
        """Sets the music_on_hold_id of this UserIdSettingsBody.

        The music on hold prompt ID.   Options: empty char - default and `0` - disable  # noqa: E501

        :param music_on_hold_id: The music_on_hold_id of this UserIdSettingsBody.  # noqa: E501
        :type: str
        """

        self._music_on_hold_id = music_on_hold_id

    @property
    def outbound_caller_id(self):
        """Gets the outbound_caller_id of this UserIdSettingsBody.  # noqa: E501

        The user's outbound caller ID phone number, in E164 format. If you hide the caller ID, set the value to an `empty string`  # noqa: E501

        :return: The outbound_caller_id of this UserIdSettingsBody.  # noqa: E501
        :rtype: str
        """
        return self._outbound_caller_id

    @outbound_caller_id.setter
    def outbound_caller_id(self, outbound_caller_id):
        """Sets the outbound_caller_id of this UserIdSettingsBody.

        The user's outbound caller ID phone number, in E164 format. If you hide the caller ID, set the value to an `empty string`  # noqa: E501

        :param outbound_caller_id: The outbound_caller_id of this UserIdSettingsBody.  # noqa: E501
        :type: str
        """

        self._outbound_caller_id = outbound_caller_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UserIdSettingsBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UserIdSettingsBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
